/*! For license information please see CoCreate-stripe.js.LICENSE.txt */
!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F():"function"==typeof define&&define.amd?define([],F):"object"==typeof exports?exports.CoCreate=F():(Q.CoCreate=Q.CoCreate||{},Q.CoCreate.stripe=F())}(this,(function(){return(()=>{"use strict";var __webpack_modules__={"../../CoCreate-components/CoCreate-action/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n// -testing1\nconst CoCreateAction = {\n  attribute: 'data-actions',\n  actions: {},\n  selectedStage: [],\n  stageIndex: 0,\n  selectedElement: null,\n  completedEventName: 'completedEvent',\n  __init: function () {\n    this.actionButtonEvent();\n  },\n  actionButtonEvent: function () {\n    const self = this;\n    document.addEventListener('click', function (event) {\n      let btn = event.target;\n\n      if (!btn.getAttribute('data-actions')) {\n        btn = event.target.closest('[data-actions]');\n      }\n\n      if (!btn) return;\n      event.preventDefault();\n      let actions = (btn.getAttribute(self.attribute) || \"\").replace(/\\s/g, '').split(',');\n      if (actions.length == 0) return;\n      self.stageIndex = 0;\n      self.selectedStage = actions; //. run function\n\n      self.selectedElement = btn;\n\n      self.__runActionFunc();\n    });\n  },\n  init: function ({\n    action,\n    callback,\n    endEvent\n  }) {\n    this.registerEvent(action, callback, null, endEvent);\n  },\n\n  /**\n   * key: string\n   * runFunc: function\n   * instance: object\n   * endEvent: string\n   **/\n  registerEvent: function (key, runFunc, instance, endEvent) {\n    if (this.actions[key]) {\n      return;\n    }\n\n    this.actions[key] = {\n      key: key,\n      runFunc: runFunc,\n      instance: instance || window,\n      endEvent: endEvent\n    }; //. register events\n\n    for (let __key in this.actions) {\n      if (__key != key && this.actions[__key]['endEvent'] === endEvent) {\n        return;\n      }\n    } //. register events\n\n\n    const _this = this;\n\n    document.addEventListener(endEvent, function (e) {\n      _this.__nextAction(endEvent, e.detail);\n    });\n  },\n  __runActionFunc: function (data) {\n    if (this.stageIndex >= this.selectedStage.length) {\n      //. if latest case, it will be run aTag\n      if (this.stageIndex == this.selectedStage.length) {\n        this.__runAtag(this.selectedElement);\n      }\n\n      return;\n    }\n\n    const actionName = this.selectedStage[this.stageIndex]; //. run function\n\n    const action = this.actions[actionName];\n\n    if (action) {\n      if (action.runFunc) {\n        action.runFunc.call(null, this.selectedElement, data);\n      } else {\n        this.__nextAction(action.endEvent, {});\n      }\n    } else {\n      let status = this.__runSpecialAction(actionName, data);\n\n      if (status === \"next\") {\n        this.__moveNextAction();\n      }\n    }\n  },\n  __nextAction: function (eventName, data) {\n    const key = this.selectedStage[this.stageIndex];\n\n    if (!key) {\n      return;\n    }\n\n    if (eventName !== this.actions[key].endEvent) {\n      return;\n    }\n\n    this.__moveNextAction(data);\n  },\n  __runAtag: function (button) {\n    var aTag = button.querySelector('a');\n\n    if (aTag) {// CoCreate.logic.setLinkProcess(aTag)\n    }\n  },\n  //. special action\n  __runSpecialAction: function (actionName, data) {\n    let matches = /(\\w+)\\{([a-zA-Z0-9_ \\-#$.]+)\\}/gm.exec(actionName);\n\n    if (!matches || matches.length < 3) {\n      return \"next\";\n    }\n\n    let type = matches[1],\n        param = matches[2].trim();\n    if (!param) return \"next\";\n    const self = this;\n\n    switch (type) {\n      case 'event':\n        console.log(\"Waiting Event....\");\n        document.addEventListener(param, eventData => {\n          console.log('Event Action (Received event from other section) ====== ' + param);\n\n          self.__moveNextAction(eventData);\n        }, {\n          once: true\n        });\n        break;\n\n      case 'timeout':\n        let delayTime = parseInt(param);\n\n        if (delayTime > 0) {\n          setTimeout(function () {\n            console.log(\"Timeout ======= \" + param);\n\n            self.__moveNextAction(data);\n          }, parseInt(param));\n        }\n\n        break;\n\n      case 'action':\n        let btn = document.querySelector(param);\n\n        if (btn) {\n          btn.click();\n        }\n\n        break;\n\n      default:\n        return \"next\";\n    }\n  },\n  __moveNextAction: function (data) {\n    this.stageIndex++;\n\n    this.__runActionFunc(data);\n  }\n};\n\nCoCreateAction.__init();\n\nvar _default = CoCreateAction;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-action/src/index.js\n")},"../../CoCreate-components/CoCreate-api/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _socketClient = _interopRequireDefault(__webpack_require__(/*! @cocreate/socket-client */ "../../CoCreate-components/CoCreate-socket-client/src/index.js"));\n\nvar _action = _interopRequireDefault(__webpack_require__(/*! @cocreate/action */ "../../CoCreate-components/CoCreate-action/src/index.js"));\n\nvar _render = _interopRequireDefault(__webpack_require__(/*! @cocreate/render */ "../../CoCreate-components/CoCreate-render/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nlet socketApi = new _socketClient.default(\'api\');\nconst CoCreateApi = {\n  modules: {},\n  init: function ({\n    name,\n    module\n  }) {\n    this.register(name, module);\n  },\n  register: function (name, m_instance) {\n    const self = this;\n\n    if (typeof this.modules[name] === \'undefined\') {\n      this.modules[name] = m_instance;\n      socketApi.listen(name, data => {\n        self.__responseProcess(name, data);\n      }); //. register actions\n\n      if (Array.isArray(m_instance[\'actions\'])) {\n        m_instance[\'actions\'].forEach(action => {\n          if (typeof m_instance[`action_${action}`] !== \'function\') {\n            m_instance[`action_${action}`] = function (element) {\n              self.__commonAction(m_instance.id, action, element);\n            };\n          }\n\n          _action.default.init({\n            action: action,\n            endEvent: action,\n            callback: btn => {\n              m_instance[`action_${action}`](btn);\n            }\n          });\n        });\n      }\n    }\n  },\n  __responseProcess: function (m_name, data) {\n    const {\n      type,\n      response\n    } = data;\n    const m_instance = this.modules[m_name];\n\n    if (type && response && m_instance) {\n      if (typeof m_instance[`render_${type}`] === \'function\') {\n        m_instance[`render_${type}`](response);\n      }\n\n      this.render(type, response);\n      document.dispatchEvent(new CustomEvent(type, {\n        detail: {\n          data: response\n        }\n      }));\n    }\n  },\n  __commonAction: function (id, action, element) {\n    const container = element.closest("form") || document;\n    let data = CoCreateApi.getFormData(id, action, container);\n    CoCreateApi.send(id, action, data);\n  },\n  getFormData: function (m_name, action, container) {\n    const mainAttr = `data-${m_name}`;\n    const self = this;\n    const elements = container.querySelectorAll(`[${mainAttr}^="${action}."]`);\n    let data = {};\n    elements.forEach(element => {\n      let name = element.getAttribute(mainAttr);\n      let array_name = element.getAttribute(mainAttr + "_array");\n\n      let value = self.__getElValue(element);\n\n      if (!name) return;\n\n      if (action) {\n        let re = new RegExp(`^${action}.`, \'i\');\n\n        if (re.test(name)) {\n          name = name.replace(re, "");\n        } else {\n          return;\n        }\n      }\n\n      if (array_name) {\n        if (!data[name]) {\n          data[name] = [];\n        }\n\n        data[name].push(self.getFormData(m_name, array_name, element));\n      } else if (value != null) {\n        data[name] = value;\n      }\n    });\n    let keys = Object.keys(data);\n    let objectData = {};\n    keys.forEach(k => {\n      if (k.split(\'.\').length > 1) {\n        let newData = self.__createObject(data[k], k);\n\n        delete data[k];\n        objectData = self.__mergeObject(objectData, newData);\n      } else {\n        objectData[k] = data[k];\n      }\n    });\n    return objectData;\n  },\n  __getElValue: function (element) {\n    let value = null;\n\n    if (typeof element.value !== "undefined") {\n      switch (element.type.toLocaleLowerCase()) {\n        case \'checkbox\':\n          if (element.checked) {\n            value = element.value;\n          }\n\n          break;\n\n        default:\n          value = element.value;\n          break;\n      }\n    } else {\n      value = element.getAttribute(\'value\');\n\n      if (!value) {\n        value = element.innerHTML;\n      }\n    }\n\n    return value;\n  },\n  __mergeObject: function (target, source) {\n    target = target || {};\n\n    for (let key of Object.keys(source)) {\n      if (source[key] instanceof Object) {\n        Object.assign(source[key], this.__mergeObject(target[key], source[key]));\n      }\n    }\n\n    Object.assign(target || {}, source);\n    return target;\n  },\n  __createObject: function (data, path) {\n    if (!path) return data;\n    let keys = path.split(\'.\');\n    let newObject = data;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      newObject = {\n        [keys[i]]: newObject\n      };\n    }\n\n    return newObject;\n  },\n  send: function (module, action, data) {\n    let request_data = this.getCommonParamsExtend(data || {});\n    request_data = { ...request_data,\n      data\n    };\n    socketApi.send(module, {\n      type: action,\n      data: request_data\n    });\n  },\n  render: function (action, data) {\n    _render.default.data({\n      selector: `[data-template_id="${action}"]`,\n      data: data\n    });\n  },\n  createApiSocket: function (host, namespace) {\n    if (namespace) {\n      socketApi.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n      socketApi.setGlobalScope(namespace);\n    } else {\n      socketApi.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  },\n  getCommonParamsExtend: function (info) {\n    return {\n      "apiKey": info.apiKey || config.apiKey,\n      "securityKey": info.securityKey || config.securityKey,\n      "organization_id": info.organization_id || config.organization_Id\n    };\n  }\n};\nCoCreateApi.createApiSocket(window.config.host ? window.config.host : \'server.cocreate.app\', window.config.organization_Id // window.config.apiKey\n// window.config.securityKey\n);\nvar _default = CoCreateApi;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-api/src/index.js\n')},"../../CoCreate-components/CoCreate-render/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\n/**\n * change name Class\n * add functionality to add value on any attr of each elements into template\n */\nconst CoCreateRender = {\n  __getValueFromObject: function (json, path) {\n    try {\n      if (typeof json == 'undefined' || !path) return false;\n      let jsonData = json,\n          subpath = path.split('.');\n\n      for (let i = 0; i < subpath.length; i++) {\n        jsonData = jsonData[subpath[i]];\n        if (!jsonData) return false;\n      }\n\n      return jsonData;\n    } catch (error) {\n      console.log(\"Error in getValueFromObject\", error);\n      return false;\n    }\n  },\n  __getValue: function (data, attrValue) {\n    let result = /{{\\s*([\\w\\W]+)\\s*}}/g.exec(attrValue);\n\n    if (result) {\n      return this.__getValueFromObject(data, result[1].trim());\n    }\n\n    return false;\n  },\n  __createObject: function (data, path) {\n    try {\n      if (!path) return data;\n      let keys = path.split('.');\n      let newObject = data;\n\n      for (var i = keys.length - 1; i >= 0; i--) {\n        newObject = {\n          [keys[i]]: newObject\n        };\n      }\n\n      return newObject;\n    } catch (error) {\n      console.log(\"Error in getValueFromObject\", error);\n      return false;\n    }\n  },\n  __replaceValue: function (data, inputValue) {\n    let isPass = false;\n    let self = this;\n    let resultValue = null; // let variables = inputValue.match(/{{\\s*(\\S+)\\s*}}/g);\n\n    let variables = inputValue.match(/{{([A-Za-z0-9_.,\\- ]*)}}/g);\n\n    if (variables) {\n      variables.forEach(attr => {\n        let value = self.__getValue(data, attr);\n\n        if (value && typeof value !== \"object\") {\n          isPass = true;\n          inputValue = inputValue.replace(attr, value);\n        }\n      });\n\n      if (isPass) {\n        resultValue = inputValue;\n      }\n    }\n\n    return resultValue;\n  },\n  setArray: function (template, data) {\n    const type = template.getAttribute('data-render_array') || \"data\";\n    const render_key = template.getAttribute('data-render_key') || type;\n    const self = this;\n\n    const arrayData = this.__getValueFromObject(data, type);\n\n    if (type && Array.isArray(arrayData)) {\n      arrayData.forEach((item, index) => {\n        let cloneEl = template.cloneNode(true);\n        cloneEl.classList.remove('template');\n        cloneEl.classList.add('clone_' + type);\n\n        if (typeof item !== 'object') {\n          item = {\n            \"--\": item\n          };\n        } else {\n          item['index'] = index;\n        }\n\n        let r_data = self.__createObject(item, render_key);\n\n        self.setValue([cloneEl], r_data);\n        template.insertAdjacentHTML('beforebegin', cloneEl.outerHTML);\n      });\n    }\n  },\n  setValue: function (els, data, passTo, template) {\n    if (!data) return;\n    const that = this;\n    Array.from(els).forEach(e => {\n      let passId = e.getAttribute('data-pass_id');\n\n      if (passTo && passId != passTo) {\n        return;\n      }\n\n      Array.from(e.attributes).forEach(attr => {\n        let attr_name = attr.name.toLowerCase();\n        let isPass = false;\n        let attrValue = attr.value;\n        attrValue = that.__replaceValue(data, attrValue);\n\n        if (attrValue) {\n          if (attr_name == 'value') {\n            let tag = e.tagName.toLowerCase();\n\n            switch (tag) {\n              case 'input':\n                e.setAttribute(attr_name, attrValue);\n                break;\n\n              case 'textarea':\n                e.setAttribute(attr_name, attrValue);\n                e.textContent = attrValue;\n                break;\n\n              default:\n                if (e.children.length === 0) {\n                  e.innerHTML = attrValue;\n                }\n\n            }\n          }\n\n          e.setAttribute(attr_name, attrValue);\n        }\n      });\n\n      if (e.children.length == 0 && e.textContent) {\n        let textContent = e.textContent;\n        textContent = that.__replaceValue(data, textContent);\n\n        if (textContent) {\n          e.textContent = textContent;\n        }\n      }\n\n      if (e.children.length > 0) {\n        that.setValue(e.children, data);\n\n        if (e.classList.contains('template')) {\n          that.setArray(e, data);\n        }\n      }\n    });\n  },\n  data: function ({\n    selector,\n    data,\n    elements,\n    passTo\n  }) {\n    if (selector) {\n      this.render(selector, data);\n    } else if (elements) {\n      this.setValue(elements, data, passTo);\n    }\n  },\n  render: function (selector, dataResult) {\n    let template_div = document.querySelector(selector);\n\n    if (!template_div) {\n      return;\n    }\n\n    if (Array.isArray(dataResult)) {\n      template_div.setAttribute('data-render_array', 'test');\n      this.setValue([template_div], {\n        test: dataResult\n      });\n    } else {\n      this.setValue(template_div.children, dataResult);\n    }\n  }\n};\nvar _default = CoCreateRender;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-render/src/index.js\n")},"../../CoCreate-components/CoCreate-socket-client/src/index.js":(module,exports)=>{eval("var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;\n\n(function (root, factory) {\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function () {\n      return factory(window, WebSocket, Blob);\n    }).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else {}\n})(typeof self !== 'undefined' ? self : void 0, function (wnd, WebSocket, Blob) {\n  class CoCreateSocketClient {\n    constructor(prefix = \"crud\") {\n      this.prefix = prefix || \"crud\";\n      this.sockets = new Map();\n      this.listeners = new Map();\n      this.messageQueue = new Map();\n      this.saveFileName = '';\n      this.globalScope = \"\";\n    }\n\n    setGlobalScope(scope) {\n      this.globalScope = `${this.prefix}/${scope}`;\n    }\n\n    getGlobalScope() {\n      return this.globalScope;\n    }\n    /**\n     * config: {namespace, room, host}\n     */\n\n\n    create(config) {\n      const {\n        namespace,\n        room\n      } = config;\n      const key = this.getKey(namespace, room);\n\n      let _this = this;\n\n      let socket;\n\n      if (this.sockets.get(key)) {\n        socket = this.sockets.get(key);\n        console.log('SOcket already has been register');\n        return;\n      }\n\n      let w_protocol = wnd.location.protocol;\n\n      if (wnd.location.protocol === \"about:\") {\n        w_protocol = wnd.parent.location.protocol;\n      }\n\n      let protocol = w_protocol === 'http:' ? 'ws' : 'wss';\n      const port = config.port ? config.port : 8088;\n      let socket_url = `${protocol}://${wnd.location.host}:${port}/${key}`;\n\n      if (config.host) {\n        if (config.host.includes(\"://\")) {\n          socket_url = `${config.host}/${key}`;\n        } else {\n          if (config.host.includes(\":\")) {\n            socket_url = `${protocol}://${config.host}/${key}`;\n          } else {\n            socket_url = `${protocol}://${config.host}:${port}/${key}`;\n          }\n        }\n      }\n\n      try {\n        socket = new WebSocket(socket_url);\n      } catch (error) {\n        console.log(error);\n      }\n\n      socket.onopen = function (event) {\n        const messages = _this.messageQueue.get(key) || [];\n        messages.forEach(msg => socket.send(JSON.stringify(msg)));\n\n        _this.sockets.set(key, socket);\n\n        _this.messageQueue.set(key, []);\n      };\n\n      socket.onclose = function (event) {\n        switch (event.code) {\n          case 1000:\n            // close normal\n            console.log(\"websocket: closed\");\n            break;\n\n          default:\n            _this.destroy(socket, key);\n\n            _this.reconnect(socket, config);\n\n            break;\n        }\n      };\n\n      socket.onerror = function (err) {\n        console.log('Socket error');\n\n        _this.destroy(socket, key);\n\n        _this.reconnect(socket, config);\n      };\n\n      socket.onmessage = function (data) {\n        try {\n          if (wnd.Blob) {\n            if (data.data instanceof Blob) {\n              _this.saveFile(data.data);\n\n              return;\n            }\n          }\n\n          let rev_data = JSON.parse(data.data);\n\n          if (rev_data.data.event) {\n            if (wnd.CustomEvent) {\n              var event = new wnd.CustomEvent(rev_data.data.event, {\n                detail: rev_data.data\n              });\n              wnd.document.dispatchEvent(event);\n              return;\n            } else {\n              process.emit(rev_data.data.event, rev_data.data);\n              return;\n            }\n          }\n\n          let action = rev_data.action;\n\n          const listeners = _this.listeners.get(rev_data.action);\n\n          if (!listeners) {\n            return;\n          }\n\n          listeners.forEach(listener => {\n            listener(rev_data.data, key);\n          });\n        } catch (e) {\n          console.log(e);\n        }\n      };\n    }\n    /**\n     * \n     */\n\n\n    send(action, data, room) {\n      const obj = {\n        action: action,\n        data: data\n      };\n      const key = this.getKeyByRoom(room);\n      const socket = this.getByRoom(room);\n\n      if (socket) {\n        socket.send(JSON.stringify(obj));\n      } else {\n        if (this.messageQueue.get(key)) {\n          this.messageQueue.get(key).push(obj);\n        } else {\n          this.messageQueue.set(key, [obj]);\n        }\n      }\n    }\n\n    sendFile(file, room) {\n      const socket = this.getByRoom(room);\n\n      if (socket) {\n        socket.send(file);\n      }\n    }\n    /**\n     * scope: ns/room\n     */\n\n\n    listen(type, callback) {\n      if (!this.listeners.get(type)) {\n        this.listeners.set(type, [callback]);\n      } else {\n        this.listeners.get(type).push(callback);\n      }\n    }\n\n    reconnect(socket, config) {\n      let _this = this;\n\n      setTimeout(function () {\n        _this.create(config);\n      }, 1000);\n    }\n\n    destroy(socket, key) {\n      if (socket) {\n        socket.onerror = socket.onopen = socket.onclose = null;\n        socket.close();\n        socket = null;\n      }\n\n      if (this.sockets.get(key)) {\n        this.sockets.delete(key);\n      }\n    }\n\n    destroyByKey(key) {\n      let socket = this.sockets.get(key);\n\n      if (socket) {\n        this.destroy(socket, key);\n      }\n    }\n\n    getKey(namespace, room) {\n      let key = `${this.prefix}`;\n\n      if (namespace && namespace != '') {\n        if (room && room != '') {\n          key += `/${namespace}/${room}`;\n        } else {\n          key += `/${namespace}`;\n        }\n      }\n\n      return key;\n    }\n\n    getByRoom(room) {\n      let key = this.getKeyByRoom(room);\n      return this.sockets.get(key);\n    }\n\n    getKeyByRoom(room) {\n      let key = this.globalScope;\n\n      if (room) {\n        key = `${this.prefix}/${room}`;\n      }\n\n      return key;\n    }\n\n    saveFile(blob) {\n      if (wnd.document) {\n        const file_name = this.saveFileName || 'downloadFile';\n        var a = wnd.document.createElement(\"a\");\n        wnd.document.body.appendChild(a);\n        a.style = \"display: none\";\n        let url = window.URL.createObjectURL(blob);\n        a.href = url;\n        a.download = file_name;\n        a.click();\n        wnd.URL.revokeObjectURL(url);\n        this.saveFileName = '';\n      }\n    }\n\n    listenAsync(eventname) {\n      return new Promise((resolve, reject) => {\n        if (wnd.document) {\n          //. browser case\n          wnd.document.addEventListener(eventname, function (event) {\n            resolve(event.detail);\n          }, {\n            once: true\n          });\n        } else {\n          //. node case\n          process.once(eventname, data => {\n            resolve(data);\n          });\n        }\n      });\n    }\n\n  }\n\n  return CoCreateSocketClient;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-socket-client/src/index.js\n")},"./src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _api = _interopRequireDefault(__webpack_require__(/*! @cocreate/api */ "../../CoCreate-components/CoCreate-api/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateStripe = {\n  id: \'stripe\',\n  actions: [\'balanceTransaction\', \'createSourceCustomer\', \'createCustomer\', \'getBalance\', \'listCustomers\', \'createTokenCard\', \'createCustomer\', \'updateCustomer\', \'createCharge\', \'create\'],\n  render_create: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_createCharge: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_updateCustomer: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_createCustomer: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_createTokenCard: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("createTokenCard ", data);\n    CoCreate.api.render(\'createTokenCard\', data);\n  },\n  render_balanceTransaction: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_createSourceCustomer: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_getBalance: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n    CoCreate.api.render(\'getBalance\', data);\n  },\n  render_createCustomer: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n    CoCreate.api.render(\'createCustomer\', data);\n  },\n  render_listCustomers: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n    CoCreate.api.render(\'listCustomers\', data);\n  }\n};\n\n_api.default.init({\n  name: CoCreateStripe.id,\n  module: CoCreateStripe\n});\n\nvar _default = CoCreateStripe;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zdHJpcGUvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJuYW1lcyI6WyJDb0NyZWF0ZVN0cmlwZSIsImlkIiwiYWN0aW9ucyIsInJlbmRlcl9jcmVhdGUiLCJkYXRhIiwib2JqZWN0IiwiYWxlcnQiLCJjb25zb2xlIiwibG9nIiwicmVuZGVyX2NyZWF0ZUNoYXJnZSIsInJlbmRlcl91cGRhdGVDdXN0b21lciIsInJlbmRlcl9jcmVhdGVDdXN0b21lciIsInJlbmRlcl9jcmVhdGVUb2tlbkNhcmQiLCJDb0NyZWF0ZSIsImFwaSIsInJlbmRlciIsInJlbmRlcl9iYWxhbmNlVHJhbnNhY3Rpb24iLCJyZW5kZXJfY3JlYXRlU291cmNlQ3VzdG9tZXIiLCJyZW5kZXJfZ2V0QmFsYW5jZSIsInJlbmRlcl9saXN0Q3VzdG9tZXJzIiwiaW5pdCIsIm5hbWUiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7OztBQUdBLE1BQU1BLGNBQWMsR0FBRztBQUN0QkMsSUFBRSxFQUFFLFFBRGtCO0FBRXRCQyxTQUFPLEVBQUUsQ0FDUCxvQkFETyxFQUVQLHNCQUZPLEVBR1AsZ0JBSE8sRUFJUCxZQUpPLEVBS1AsZUFMTyxFQU1QLGlCQU5PLEVBT1AsZ0JBUE8sRUFRUCxnQkFSTyxFQVNQLGNBVE8sRUFVUCxRQVZPLENBRmE7QUFnQnRCQyxlQUFhLEVBQUUsVUFBU0MsSUFBVCxFQUFlO0FBQ3hCLFFBQUlBLElBQUksQ0FBQ0MsTUFBTCxJQUFlLE9BQW5CLEVBQTRCO0FBQ3ZCQyxXQUFLLENBQUNGLElBQUksQ0FBQ0EsSUFBTixDQUFMO0FBQ0g7O0FBQ0ZBLFFBQUksR0FBRztBQUFDQSxVQUFJLEVBQUVBO0FBQVAsS0FBUDtBQUNBRyxXQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaLEVBQW9CSixJQUFwQjtBQUNMLEdBdEJxQjtBQXVCdEJLLHFCQUFtQixFQUFFLFVBQVNMLElBQVQsRUFBZTtBQUM5QixRQUFJQSxJQUFJLENBQUNDLE1BQUwsSUFBZSxPQUFuQixFQUE0QjtBQUN2QkMsV0FBSyxDQUFDRixJQUFJLENBQUNBLElBQU4sQ0FBTDtBQUNIOztBQUNGQSxRQUFJLEdBQUc7QUFBQ0EsVUFBSSxFQUFFQTtBQUFQLEtBQVA7QUFDQUcsV0FBTyxDQUFDQyxHQUFSLENBQVksT0FBWixFQUFvQkosSUFBcEI7QUFDTCxHQTdCcUI7QUE4QnRCTSx1QkFBcUIsRUFBRSxVQUFTTixJQUFULEVBQWU7QUFDaEMsUUFBSUEsSUFBSSxDQUFDQyxNQUFMLElBQWUsT0FBbkIsRUFBNEI7QUFDdkJDLFdBQUssQ0FBQ0YsSUFBSSxDQUFDQSxJQUFOLENBQUw7QUFDSDs7QUFDRkEsUUFBSSxHQUFHO0FBQUNBLFVBQUksRUFBRUE7QUFBUCxLQUFQO0FBQ0FHLFdBQU8sQ0FBQ0MsR0FBUixDQUFZLE9BQVosRUFBb0JKLElBQXBCO0FBQ0wsR0FwQ3FCO0FBc0N0Qk8sdUJBQXFCLEVBQUUsVUFBU1AsSUFBVCxFQUFlO0FBQ2hDLFFBQUlBLElBQUksQ0FBQ0MsTUFBTCxJQUFlLE9BQW5CLEVBQTRCO0FBQ3ZCQyxXQUFLLENBQUNGLElBQUksQ0FBQ0EsSUFBTixDQUFMO0FBQ0g7O0FBQ0ZBLFFBQUksR0FBRztBQUFDQSxVQUFJLEVBQUVBO0FBQVAsS0FBUDtBQUNBRyxXQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaLEVBQW9CSixJQUFwQjtBQUNMLEdBNUNxQjtBQThDdEJRLHdCQUFzQixFQUFFLFVBQVNSLElBQVQsRUFBZTtBQUNqQyxRQUFJQSxJQUFJLENBQUNDLE1BQUwsSUFBZSxPQUFuQixFQUE0QjtBQUN2QkMsV0FBSyxDQUFDRixJQUFJLENBQUNBLElBQU4sQ0FBTDtBQUNIOztBQUNGQSxRQUFJLEdBQUc7QUFBQ0EsVUFBSSxFQUFFQTtBQUFQLEtBQVA7QUFDQUcsV0FBTyxDQUFDQyxHQUFSLENBQVksa0JBQVosRUFBK0JKLElBQS9CO0FBQ0FTLFlBQVEsQ0FBQ0MsR0FBVCxDQUFhQyxNQUFiLENBQW9CLGlCQUFwQixFQUF1Q1gsSUFBdkM7QUFDTCxHQXJEcUI7QUFzRHRCWSwyQkFBeUIsRUFBRSxVQUFTWixJQUFULEVBQWU7QUFDcEMsUUFBSUEsSUFBSSxDQUFDQyxNQUFMLElBQWUsT0FBbkIsRUFBNEI7QUFDdkJDLFdBQUssQ0FBQ0YsSUFBSSxDQUFDQSxJQUFOLENBQUw7QUFDSDs7QUFDRkEsUUFBSSxHQUFHO0FBQUNBLFVBQUksRUFBRUE7QUFBUCxLQUFQO0FBQ0FHLFdBQU8sQ0FBQ0MsR0FBUixDQUFZLE9BQVosRUFBb0JKLElBQXBCO0FBQ0wsR0E1RHFCO0FBNkR0QmEsNkJBQTJCLEVBQUUsVUFBU2IsSUFBVCxFQUFlO0FBQ3RDLFFBQUlBLElBQUksQ0FBQ0MsTUFBTCxJQUFlLE9BQW5CLEVBQTRCO0FBQ3ZCQyxXQUFLLENBQUNGLElBQUksQ0FBQ0EsSUFBTixDQUFMO0FBQ0g7O0FBQ0ZBLFFBQUksR0FBRztBQUFDQSxVQUFJLEVBQUVBO0FBQVAsS0FBUDtBQUNBRyxXQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaLEVBQW9CSixJQUFwQjtBQUNMLEdBbkVxQjtBQW9FdEJjLG1CQUFpQixFQUFFLFVBQVNkLElBQVQsRUFBZTtBQUM1QixRQUFJQSxJQUFJLENBQUNDLE1BQUwsSUFBZSxPQUFuQixFQUE0QjtBQUN2QkMsV0FBSyxDQUFDRixJQUFJLENBQUNBLElBQU4sQ0FBTDtBQUNIOztBQUNGQSxRQUFJLEdBQUc7QUFBQ0EsVUFBSSxFQUFFQTtBQUFQLEtBQVA7QUFDQUcsV0FBTyxDQUFDQyxHQUFSLENBQVksT0FBWixFQUFvQkosSUFBcEI7QUFDQ1MsWUFBUSxDQUFDQyxHQUFULENBQWFDLE1BQWIsQ0FBb0IsWUFBcEIsRUFBa0NYLElBQWxDO0FBQ04sR0EzRXFCO0FBNEV0Qk8sdUJBQXFCLEVBQUUsVUFBU1AsSUFBVCxFQUFlO0FBQ2hDLFFBQUlBLElBQUksQ0FBQ0MsTUFBTCxJQUFlLE9BQW5CLEVBQTRCO0FBQ3ZCQyxXQUFLLENBQUNGLElBQUksQ0FBQ0EsSUFBTixDQUFMO0FBQ0g7O0FBQ0ZBLFFBQUksR0FBRztBQUFDQSxVQUFJLEVBQUVBO0FBQVAsS0FBUDtBQUNBRyxXQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaLEVBQW9CSixJQUFwQjtBQUNEUyxZQUFRLENBQUNDLEdBQVQsQ0FBYUMsTUFBYixDQUFvQixnQkFBcEIsRUFBc0NYLElBQXRDO0FBQ0osR0FuRnFCO0FBb0Z0QmUsc0JBQW9CLEVBQUUsVUFBU2YsSUFBVCxFQUFlO0FBQy9CLFFBQUlBLElBQUksQ0FBQ0MsTUFBTCxJQUFlLE9BQW5CLEVBQTRCO0FBQ3ZCQyxXQUFLLENBQUNGLElBQUksQ0FBQ0EsSUFBTixDQUFMO0FBQ0g7O0FBQ0ZBLFFBQUksR0FBRztBQUFDQSxVQUFJLEVBQUVBO0FBQVAsS0FBUDtBQUNBRyxXQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaLEVBQW9CSixJQUFwQjtBQUNEUyxZQUFRLENBQUNDLEdBQVQsQ0FBYUMsTUFBYixDQUFvQixlQUFwQixFQUFxQ1gsSUFBckM7QUFDSjtBQTNGcUIsQ0FBdkI7O0FBOEZBVSxhQUFJTSxJQUFKLENBQVM7QUFDUkMsTUFBSSxFQUFFckIsY0FBYyxDQUFDQyxFQURiO0FBRVJxQixRQUFNLEVBQUV0QjtBQUZBLENBQVQ7O2VBS2VBLGMiLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXBpIGZyb20gJ0Bjb2NyZWF0ZS9hcGknXG5cblxuY29uc3QgQ29DcmVhdGVTdHJpcGUgPSB7XG5cdGlkOiAnc3RyaXBlJyxcblx0YWN0aW9uczogW1xuXHQgICdiYWxhbmNlVHJhbnNhY3Rpb24nLFxuXHQgICdjcmVhdGVTb3VyY2VDdXN0b21lcicsXG5cdCAgJ2NyZWF0ZUN1c3RvbWVyJyxcblx0ICAnZ2V0QmFsYW5jZScsXG5cdCAgJ2xpc3RDdXN0b21lcnMnLFxuXHQgICdjcmVhdGVUb2tlbkNhcmQnLFxuXHQgICdjcmVhdGVDdXN0b21lcicsXG5cdCAgJ3VwZGF0ZUN1c3RvbWVyJyxcblx0ICAnY3JlYXRlQ2hhcmdlJyxcblx0ICAnY3JlYXRlJ1xuXHRdLFxuXHRcblx0XG5cdHJlbmRlcl9jcmVhdGU6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICBpZiAoZGF0YS5vYmplY3QgPT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICBhbGVydChkYXRhLmRhdGEpXG4gICAgICAgIH1cbiAgICAgICBkYXRhID0ge2RhdGE6IGRhdGF9O1xuICAgICAgIGNvbnNvbGUubG9nKFwiZGF0YSBcIixkYXRhKVxuXHR9LFxuXHRyZW5kZXJfY3JlYXRlQ2hhcmdlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgaWYgKGRhdGEub2JqZWN0ID09IFwiZXJyb3JcIikge1xuICAgICAgICAgICAgYWxlcnQoZGF0YS5kYXRhKVxuICAgICAgICB9XG4gICAgICAgZGF0YSA9IHtkYXRhOiBkYXRhfTtcbiAgICAgICBjb25zb2xlLmxvZyhcImRhdGEgXCIsZGF0YSlcblx0fSxcblx0cmVuZGVyX3VwZGF0ZUN1c3RvbWVyOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgaWYgKGRhdGEub2JqZWN0ID09IFwiZXJyb3JcIikge1xuICAgICAgICAgICAgYWxlcnQoZGF0YS5kYXRhKVxuICAgICAgICB9XG4gICAgICAgZGF0YSA9IHtkYXRhOiBkYXRhfTtcbiAgICAgICBjb25zb2xlLmxvZyhcImRhdGEgXCIsZGF0YSlcblx0fSxcblx0XG5cdHJlbmRlcl9jcmVhdGVDdXN0b21lcjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgIGlmIChkYXRhLm9iamVjdCA9PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGFsZXJ0KGRhdGEuZGF0YSlcbiAgICAgICAgfVxuICAgICAgIGRhdGEgPSB7ZGF0YTogZGF0YX07XG4gICAgICAgY29uc29sZS5sb2coXCJkYXRhIFwiLGRhdGEpXG5cdH0sXG5cdFxuXHRyZW5kZXJfY3JlYXRlVG9rZW5DYXJkOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgaWYgKGRhdGEub2JqZWN0ID09IFwiZXJyb3JcIikge1xuICAgICAgICAgICAgYWxlcnQoZGF0YS5kYXRhKVxuICAgICAgICB9XG4gICAgICAgZGF0YSA9IHtkYXRhOiBkYXRhfTtcbiAgICAgICBjb25zb2xlLmxvZyhcImNyZWF0ZVRva2VuQ2FyZCBcIixkYXRhKVxuICAgICAgIENvQ3JlYXRlLmFwaS5yZW5kZXIoJ2NyZWF0ZVRva2VuQ2FyZCcsIGRhdGEpO1xuXHR9LFxuXHRyZW5kZXJfYmFsYW5jZVRyYW5zYWN0aW9uOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgaWYgKGRhdGEub2JqZWN0ID09IFwiZXJyb3JcIikge1xuICAgICAgICAgICAgYWxlcnQoZGF0YS5kYXRhKVxuICAgICAgICB9XG4gICAgICAgZGF0YSA9IHtkYXRhOiBkYXRhfTtcbiAgICAgICBjb25zb2xlLmxvZyhcImRhdGEgXCIsZGF0YSlcblx0fSxcblx0cmVuZGVyX2NyZWF0ZVNvdXJjZUN1c3RvbWVyOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgaWYgKGRhdGEub2JqZWN0ID09IFwiZXJyb3JcIikge1xuICAgICAgICAgICAgYWxlcnQoZGF0YS5kYXRhKVxuICAgICAgICB9XG4gICAgICAgZGF0YSA9IHtkYXRhOiBkYXRhfTtcbiAgICAgICBjb25zb2xlLmxvZyhcImRhdGEgXCIsZGF0YSlcblx0fSxcblx0cmVuZGVyX2dldEJhbGFuY2U6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICBpZiAoZGF0YS5vYmplY3QgPT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICBhbGVydChkYXRhLmRhdGEpXG4gICAgICAgIH1cbiAgICAgICBkYXRhID0ge2RhdGE6IGRhdGF9O1xuICAgICAgIGNvbnNvbGUubG9nKFwiZGF0YSBcIixkYXRhKVxuICAgICAgICBDb0NyZWF0ZS5hcGkucmVuZGVyKCdnZXRCYWxhbmNlJywgZGF0YSk7XG5cdH0sXG5cdHJlbmRlcl9jcmVhdGVDdXN0b21lcjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgIGlmIChkYXRhLm9iamVjdCA9PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGFsZXJ0KGRhdGEuZGF0YSlcbiAgICAgICAgfVxuICAgICAgIGRhdGEgPSB7ZGF0YTogZGF0YX07XG4gICAgICAgY29uc29sZS5sb2coXCJkYXRhIFwiLGRhdGEpXG4gICAgICBDb0NyZWF0ZS5hcGkucmVuZGVyKCdjcmVhdGVDdXN0b21lcicsIGRhdGEpO1xuXHR9LFxuXHRyZW5kZXJfbGlzdEN1c3RvbWVyczogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgIGlmIChkYXRhLm9iamVjdCA9PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGFsZXJ0KGRhdGEuZGF0YSlcbiAgICAgICAgfVxuICAgICAgIGRhdGEgPSB7ZGF0YTogZGF0YX07XG4gICAgICAgY29uc29sZS5sb2coXCJkYXRhIFwiLGRhdGEpXG4gICAgICBDb0NyZWF0ZS5hcGkucmVuZGVyKCdsaXN0Q3VzdG9tZXJzJywgZGF0YSk7XG5cdH0sXG59XG5cbmFwaS5pbml0KHtcblx0bmFtZTogQ29DcmVhdGVTdHJpcGUuaWQsIFxuXHRtb2R1bGU6XHRDb0NyZWF0ZVN0cmlwZSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBDb0NyZWF0ZVN0cmlwZTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/index.js\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.exports}var __webpack_exports__=__webpack_require__("./src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));