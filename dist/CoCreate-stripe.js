/*! For license information please see CoCreate-stripe.js.LICENSE.txt */
!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F():"function"==typeof define&&define.amd?define([],F):"object"==typeof exports?exports.CoCreate=F():(Q.CoCreate=Q.CoCreate||{},Q.CoCreate.stripe=F())}(this,(function(){return(()=>{"use strict";var __webpack_modules__={"../../CoCreate-components/CoCreate-action/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n// -testing1\nconst CoCreateAction = {\n  attribute: 'data-actions',\n  actions: {},\n  selectedStage: [],\n  stageIndex: 0,\n  selectedElement: null,\n  completedEventName: 'completedEvent',\n  __init: function () {\n    this.actionButtonEvent();\n  },\n  actionButtonEvent: function () {\n    const self = this;\n    document.addEventListener('click', function (event) {\n      let btn = event.target;\n\n      if (!btn.getAttribute('data-actions')) {\n        btn = event.target.closest('[data-actions]');\n      }\n\n      if (!btn) return;\n      event.preventDefault();\n      let actions = (btn.getAttribute(self.attribute) || \"\").replace(/\\s/g, '').split(',');\n      if (actions.length == 0) return;\n      self.stageIndex = 0;\n      self.selectedStage = actions; //. run function\n\n      self.selectedElement = btn;\n\n      self.__runActionFunc();\n    });\n  },\n  init: function ({\n    action,\n    callback,\n    endEvent\n  }) {\n    this.registerEvent(action, callback, null, endEvent);\n  },\n\n  /**\n   * key: string\n   * runFunc: function\n   * instance: object\n   * endEvent: string\n   **/\n  registerEvent: function (key, runFunc, instance, endEvent) {\n    if (this.actions[key]) {\n      return;\n    }\n\n    this.actions[key] = {\n      key: key,\n      runFunc: runFunc,\n      instance: instance || window,\n      endEvent: endEvent\n    }; //. register events\n\n    for (let __key in this.actions) {\n      if (__key != key && this.actions[__key]['endEvent'] === endEvent) {\n        return;\n      }\n    } //. register events\n\n\n    const _this = this;\n\n    document.addEventListener(endEvent, function (e) {\n      _this.__nextAction(endEvent, e.detail);\n    });\n  },\n  __runActionFunc: function (data) {\n    if (this.stageIndex >= this.selectedStage.length) {\n      //. if latest case, it will be run aTag\n      if (this.stageIndex == this.selectedStage.length) {\n        this.__runAtag(this.selectedElement);\n      }\n\n      return;\n    }\n\n    const actionName = this.selectedStage[this.stageIndex]; //. run function\n\n    const action = this.actions[actionName];\n\n    if (action) {\n      if (action.runFunc) {\n        action.runFunc.call(null, this.selectedElement, data);\n      } else {\n        this.__nextAction(action.endEvent, {});\n      }\n    } else {\n      let status = this.__runSpecialAction(actionName, data);\n\n      if (status === \"next\") {\n        this.__moveNextAction();\n      }\n    }\n  },\n  __nextAction: function (eventName, data) {\n    const key = this.selectedStage[this.stageIndex];\n\n    if (!key) {\n      return;\n    }\n\n    if (eventName !== this.actions[key].endEvent) {\n      return;\n    }\n\n    this.__moveNextAction(data);\n  },\n  __runAtag: function (button) {\n    var aTag = button.querySelector('a');\n\n    if (aTag) {// CoCreate.logic.setLinkProcess(aTag)\n    }\n  },\n  //. special action\n  __runSpecialAction: function (actionName, data) {\n    let matches = /(\\w+)\\{([a-zA-Z0-9_ \\-#$.]+)\\}/gm.exec(actionName);\n\n    if (!matches || matches.length < 3) {\n      return \"next\";\n    }\n\n    let type = matches[1],\n        param = matches[2].trim();\n    if (!param) return \"next\";\n    const self = this;\n\n    switch (type) {\n      case 'event':\n        console.log(\"Waiting Event....\");\n        document.addEventListener(param, eventData => {\n          console.log('Event Action (Received event from other section) ====== ' + param);\n\n          self.__moveNextAction(eventData);\n        }, {\n          once: true\n        });\n        break;\n\n      case 'timeout':\n        let delayTime = parseInt(param);\n\n        if (delayTime > 0) {\n          setTimeout(function () {\n            console.log(\"Timeout ======= \" + param);\n\n            self.__moveNextAction(data);\n          }, parseInt(param));\n        }\n\n        break;\n\n      case 'action':\n        let btn = document.querySelector(param);\n\n        if (btn) {\n          btn.click();\n        }\n\n        break;\n\n      default:\n        return \"next\";\n    }\n  },\n  __moveNextAction: function (data) {\n    this.stageIndex++;\n\n    this.__runActionFunc(data);\n  }\n};\n\nCoCreateAction.__init();\n\nvar _default = CoCreateAction;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-action/src/index.js\n")},"../../CoCreate-components/CoCreate-api/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _socket = _interopRequireDefault(__webpack_require__(/*! @cocreate/socket */ "../../CoCreate-components/CoCreate-socket/src/index.js"));\n\nvar _action = _interopRequireDefault(__webpack_require__(/*! @cocreate/action */ "../../CoCreate-components/CoCreate-action/src/index.js"));\n\nvar _render = _interopRequireDefault(__webpack_require__(/*! @cocreate/render */ "../../CoCreate-components/CoCreate-render/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nlet socketApi = new _socket.default(\'api\');\nconst CoCreateApi = {\n  modules: {},\n  init: function ({\n    name,\n    module\n  }) {\n    this.register(name, module);\n  },\n  register: function (name, m_instance) {\n    const self = this;\n\n    if (typeof this.modules[name] === \'undefined\') {\n      this.modules[name] = m_instance;\n      socketApi.listen(name, data => {\n        self.__responseProcess(name, data);\n      }); //. register actions\n\n      if (Array.isArray(m_instance[\'actions\'])) {\n        m_instance[\'actions\'].forEach(action => {\n          if (typeof m_instance[`action_${action}`] !== \'function\') {\n            m_instance[`action_${action}`] = function (element) {\n              self.__commonAction(m_instance.id, action, element);\n            };\n          }\n\n          _action.default.init({\n            action: action,\n            endEvent: action,\n            callback: btn => {\n              m_instance[`action_${action}`](btn);\n            }\n          });\n        });\n      }\n    }\n  },\n  __responseProcess: function (m_name, data) {\n    const {\n      type,\n      response\n    } = data;\n    const m_instance = this.modules[m_name];\n\n    if (type && response && m_instance) {\n      if (typeof m_instance[`render_${type}`] === \'function\') {\n        m_instance[`render_${type}`](response);\n      }\n\n      this.render(type, response);\n      document.dispatchEvent(new CustomEvent(type, {\n        detail: {\n          data: response\n        }\n      }));\n    }\n  },\n  __commonAction: function (id, action, element) {\n    const container = element.closest("form") || document;\n    let data = CoCreateApi.getFormData(id, action, container);\n    CoCreateApi.send(id, action, data);\n  },\n  getFormData: function (m_name, action, container) {\n    const mainAttr = `data-${m_name}`;\n    const self = this;\n    const elements = container.querySelectorAll(`[${mainAttr}^="${action}."]`);\n    let data = {};\n    elements.forEach(element => {\n      let name = element.getAttribute(mainAttr);\n      let array_name = element.getAttribute(mainAttr + "_array");\n\n      let value = self.__getElValue(element);\n\n      if (!name) return;\n\n      if (action) {\n        let re = new RegExp(`^${action}.`, \'i\');\n\n        if (re.test(name)) {\n          name = name.replace(re, "");\n        } else {\n          return;\n        }\n      }\n\n      if (array_name) {\n        if (!data[name]) {\n          data[name] = [];\n        }\n\n        data[name].push(self.getFormData(m_name, array_name, element));\n      } else if (value != null) {\n        data[name] = value;\n      }\n    });\n    let keys = Object.keys(data);\n    let objectData = {};\n    keys.forEach(k => {\n      if (k.split(\'.\').length > 1) {\n        let newData = self.__createObject(data[k], k);\n\n        delete data[k];\n        objectData = self.__mergeObject(objectData, newData);\n      } else {\n        objectData[k] = data[k];\n      }\n    });\n    return objectData;\n  },\n  __getElValue: function (element) {\n    let value = null;\n\n    if (typeof element.value !== "undefined") {\n      switch (element.type.toLocaleLowerCase()) {\n        case \'checkbox\':\n          if (element.checked) {\n            value = element.value;\n          }\n\n          break;\n\n        default:\n          value = element.value;\n          break;\n      }\n    } else {\n      value = element.getAttribute(\'value\');\n\n      if (!value) {\n        value = element.innerHTML;\n      }\n    }\n\n    return value;\n  },\n  __mergeObject: function (target, source) {\n    target = target || {};\n\n    for (let key of Object.keys(source)) {\n      if (source[key] instanceof Object) {\n        Object.assign(source[key], this.__mergeObject(target[key], source[key]));\n      }\n    }\n\n    Object.assign(target || {}, source);\n    return target;\n  },\n  __createObject: function (data, path) {\n    if (!path) return data;\n    let keys = path.split(\'.\');\n    let newObject = data;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      newObject = {\n        [keys[i]]: newObject\n      };\n    }\n\n    return newObject;\n  },\n  send: function (module, action, data) {\n    let request_data = this.getCommonParamsExtend(data || {});\n    request_data = { ...request_data,\n      data\n    };\n    socketApi.send(module, {\n      type: action,\n      data: request_data\n    });\n  },\n  render: function (action, data) {\n    _render.default.data({\n      selector: `[data-template_id="${action}"]`,\n      data: data\n    });\n  },\n  createApiSocket: function (host, namespace) {\n    if (namespace) {\n      socketApi.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n      socketApi.setGlobalScope(namespace);\n    } else {\n      socketApi.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  },\n  getCommonParamsExtend: function (info) {\n    return {\n      "apiKey": info.apiKey || config.apiKey,\n      "securityKey": info.securityKey || config.securityKey,\n      "organization_id": info.organization_id || config.organization_Id\n    };\n  }\n};\nCoCreateApi.createApiSocket(window.config.host ? window.config.host : \'server.cocreate.app\', window.config.organization_Id // window.config.apiKey\n// window.config.securityKey\n);\nvar _default = CoCreateApi;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-api/src/index.js\n')},"../../CoCreate-components/CoCreate-crud/src/common-fun.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.getCommonParams = getCommonParams;\nexports.getCommonParamsExtend = getCommonParamsExtend;\nexports.generateSocketClient = generateSocketClient;\n\nfunction getCommonParams() {\n  return {\n    "apiKey": config.apiKey,\n    "securityKey": config.securityKey,\n    "organization_id": config.organization_Id\n  };\n}\n\nfunction getCommonParamsExtend(info) {\n  return {\n    "apiKey": info.apiKey || config.apiKey,\n    "securityKey": info.securityKey || config.securityKey,\n    "organization_id": info.organization_id || config.organization_Id\n  };\n}\n\nfunction generateSocketClient(namespace, room) {\n  let ns = namespace || config.organization_Id;\n  let rr = room || \'\';\n\n  if (rr) {\n    return `${ns}/${rr}`;\n  } else {\n    return ns;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zdHJpcGUvLi4vQ29DcmVhdGUtY29tcG9uZW50cy9Db0NyZWF0ZS1jcnVkL3NyYy9jb21tb24tZnVuLmpzPzVkOGUiXSwibmFtZXMiOlsiZ2V0Q29tbW9uUGFyYW1zIiwiY29uZmlnIiwiYXBpS2V5Iiwic2VjdXJpdHlLZXkiLCJvcmdhbml6YXRpb25fSWQiLCJnZXRDb21tb25QYXJhbXNFeHRlbmQiLCJpbmZvIiwib3JnYW5pemF0aW9uX2lkIiwiZ2VuZXJhdGVTb2NrZXRDbGllbnQiLCJuYW1lc3BhY2UiLCJyb29tIiwibnMiLCJyciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUEsU0FBU0EsZUFBVCxHQUNBO0FBQ0UsU0FBTztBQUNMLGNBQW9CQyxNQUFNLENBQUNDLE1BRHRCO0FBRUwsbUJBQW9CRCxNQUFNLENBQUNFLFdBRnRCO0FBR0wsdUJBQW9CRixNQUFNLENBQUNHO0FBSHRCLEdBQVA7QUFLRDs7QUFFRCxTQUFTQyxxQkFBVCxDQUErQkMsSUFBL0IsRUFDQTtBQUNFLFNBQU87QUFDTCxjQUFvQkEsSUFBSSxDQUFDSixNQUFMLElBQWVELE1BQU0sQ0FBQ0MsTUFEckM7QUFFTCxtQkFBb0JJLElBQUksQ0FBQ0gsV0FBTCxJQUFvQkYsTUFBTSxDQUFDRSxXQUYxQztBQUdMLHVCQUFvQkcsSUFBSSxDQUFDQyxlQUFMLElBQXdCTixNQUFNLENBQUNHO0FBSDlDLEdBQVA7QUFLRDs7QUFFRCxTQUFTSSxvQkFBVCxDQUErQkMsU0FBL0IsRUFBMENDLElBQTFDLEVBQ0E7QUFDRSxNQUFJQyxFQUFFLEdBQUdGLFNBQVMsSUFBSVIsTUFBTSxDQUFDRyxlQUE3QjtBQUNBLE1BQUlRLEVBQUUsR0FBR0YsSUFBSSxJQUFJLEVBQWpCOztBQUNBLE1BQUlFLEVBQUosRUFBUTtBQUNOLFdBQVEsR0FBRUQsRUFBRyxJQUFHQyxFQUFHLEVBQW5CO0FBQ0QsR0FGRCxNQUVPO0FBQ0wsV0FBT0QsRUFBUDtBQUNEO0FBQ0YiLCJmaWxlIjoiLi4vLi4vQ29DcmVhdGUtY29tcG9uZW50cy9Db0NyZWF0ZS1jcnVkL3NyYy9jb21tb24tZnVuLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gZ2V0Q29tbW9uUGFyYW1zKCkgXG57XG4gIHJldHVybiB7XG4gICAgXCJhcGlLZXlcIjogICAgICAgICAgIGNvbmZpZy5hcGlLZXksXG4gICAgXCJzZWN1cml0eUtleVwiOiAgICAgIGNvbmZpZy5zZWN1cml0eUtleSxcbiAgICBcIm9yZ2FuaXphdGlvbl9pZFwiOiAgY29uZmlnLm9yZ2FuaXphdGlvbl9JZCxcbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRDb21tb25QYXJhbXNFeHRlbmQoaW5mbykgXG57XG4gIHJldHVybiB7XG4gICAgXCJhcGlLZXlcIjogICAgICAgICAgIGluZm8uYXBpS2V5IHx8IGNvbmZpZy5hcGlLZXksXG4gICAgXCJzZWN1cml0eUtleVwiOiAgICAgIGluZm8uc2VjdXJpdHlLZXkgfHwgY29uZmlnLnNlY3VyaXR5S2V5LFxuICAgIFwib3JnYW5pemF0aW9uX2lkXCI6ICBpbmZvLm9yZ2FuaXphdGlvbl9pZCB8fCBjb25maWcub3JnYW5pemF0aW9uX0lkLFxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlU29ja2V0Q2xpZW50IChuYW1lc3BhY2UsIHJvb20pIFxue1xuICBsZXQgbnMgPSBuYW1lc3BhY2UgfHwgY29uZmlnLm9yZ2FuaXphdGlvbl9JZFxuICBsZXQgcnIgPSByb29tIHx8ICcnO1xuICBpZiAocnIpIHtcbiAgICByZXR1cm4gYCR7bnN9LyR7cnJ9YFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBucztcbiAgfVxufVxuXG5leHBvcnQge2dldENvbW1vblBhcmFtcywgZ2V0Q29tbW9uUGFyYW1zRXh0ZW5kLCBnZW5lcmF0ZVNvY2tldENsaWVudH07Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-crud/src/common-fun.js\n')},"../../CoCreate-components/CoCreate-crud/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = CRUD;\n\nvar _socket = _interopRequireDefault(__webpack_require__(/*! @cocreate/socket */ \"../../CoCreate-components/CoCreate-socket/src/index.js\"));\n\nvar _commonFun = __webpack_require__(/*! @cocreate/crud/src/common-fun.js */ \"../../CoCreate-components/CoCreate-crud/src/common-fun.js\");\n\nvar _utilsCrud = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud/src/utils.crud.js */ \"../../CoCreate-components/CoCreate-crud/src/utils.crud.js\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nlet socket = new _socket.default('crud'); // let crud = CRUD(socket)\n// var data = {\n//   \"org_id\": \"xxx\",\n//   \"customer.name\": \"Jin\",\n//   \"customer.fristname\": \"Jin\",\n//   \"customer.lastname\": \"CF\",\n//   \"customer.address.line1\": \"line1\",\n//   \"customer.address.line2\": \"line2\",\n//   'scope[0]': 'testing',\n//   'scope[1]': '---',\n//   \"customer.orders[0]\": 123,\n//   \"customer.orders[1]\": 243,\n// }\n// var obj = {\n//   test: {\n//     \"name\": '123',\n//     \"address\": 'address',\n//     \"customer\": {\n//       \"name\": 'tttt'\n//     },\n//     \"orders\": [1,2,3]\n//   }\n// }\n// console.log('----- convert object -----')\n// console.log(utilsCrud.decodeObject(data));\n// console.log(utilsCrud.encodeObject(obj));\n\nconst CoCreateCRUD = {\n  socket: null,\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n\n  /*\n   \n    CoCreate.crud.readDcoumentList {\n      collection: \"modules\",\n      element: \"xxxx\",\n      metadata: \"\",\n      operator: {\n        fetch: {\n          name: 'xxxx',\n          value: 'xxxxx'\n        },\n        filters: [{\n          name: 'field1',\n          operator: \"contain | range | eq | ne | lt | lte | gt | gte | in | nin\",\n          value: [v1, v2, ...]\n        }, {\n          name: \"_id\",\n          opreator: \"in\",\n          value: [\"id1\"]\n        }, {\n          ....\n        }],\n        orders: [{\n          name: 'field-x',\n          type: 1 | -1\n        }],\n        search: {\n          type: 'or | and',\n          value: [value1, value2]\n        },\n        \n        startIndex: 0 (integer),\n        count: 0 (integer)\n      },\n      \n      is_collection: true | false,\n      //. case fetch document case\n      created_ids : [id1, id2, ...],\n      \n      \n      -------- additional response data -----------\n      data: [] // array\n    }\n  */\n  readDocumentList(info) {\n    if (!info) return;\n    let request_data = (0, _commonFun.getCommonParams)();\n\n    if (!info.collection || !info.operator) {\n      return;\n    }\n\n    request_data = { ...request_data,\n      ...info\n    };\n    this.socket.send('readDocumentList', request_data);\n  },\n\n  /*\n  CoCreate.crud.createDocument({\n    namespace:'',\n    room:'',\n    broadcast: true/false, (default=ture)\n    broadcast_sender: true/false, (default=true) \n    \n    collection: \"test123\",\n    data:{\n    \tname1:“hello”,\n    \tname2:  “hello1”\n    },\n    element: “xxxx”,\n    metaData: \"xxxx\"\n  }),\n  */\n  // data param needs organization_id field added to pass security check\n  createDocument: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    let commonData = (0, _commonFun.getCommonParamsExtend)(info);\n    let request_data = { ...info,\n      ...commonData\n    };\n    let data = info.data || {};\n\n    if (!data['organization_id']) {\n      data['organization_id'] = config.organization_Id;\n    }\n\n    if (info['data']) {\n      data = { ...data,\n        ...info['data']\n      };\n    } //. rebuild data\n\n\n    request_data['data'] = data;\n    /** socket parameters **/\n    // if (info['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (info['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('createDocument', request_data, room);\n  },\n\n  /*\n  CoCreate.crud.updateDocument({\n    namespace: '',\n    room: '',\n    broadcast: true/false,\n    broadcast_sender: true/false,\n    \n    collection: \"test123\",\n    document_id: \"document_id\",\n    data:{\n    \tname1:“hello”,\n    \tname2:  “hello1”\n    },\n    delete_fields:[\"name3\", \"name4\"],\n    element: “xxxx”,\n    metaData: \"xxxx\"\n  }),\n  */\n  updateDocument: function (info) {\n    if (!info || !info['document_id']) return;\n    let commonData = (0, _commonFun.getCommonParamsExtend)(info);\n    let request_data = { ...info,\n      ...commonData\n    };\n\n    if (typeof info['data'] === 'object') {\n      request_data['set'] = info['data'];\n    }\n\n    if (Array.isArray(info['delete_fields'])) request_data['unset'] = info['delete_fields'];\n    if (!request_data['set'] && !request_data['unset']) return;\n\n    if (info.broadcast === false) {\n      request_data['broadcast'] = false;\n    }\n    /** socket parameters **/\n\n\n    if (info['broadcast_sender'] === undefined) {\n      request_data['broadcast_sender'] = true;\n    }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('updateDocument', request_data, room);\n  },\n\n  /*\n  CoCreate.crud.readDocument({\n    collection: \"test123\",\n    document_id: \"document_id\",\n    element: “xxxx”,\n    metaData: \"xxxx\",\n    exclude_fields: [] \n  }),\n  */\n  readDocument: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    if (!info['document_id'] || !info) {\n      return;\n    }\n\n    let commonData = (0, _commonFun.getCommonParams)();\n    let request_data = { ...info,\n      ...commonData\n    };\n    this.socket.send('readDocument', request_data);\n  },\n\n  /*\n  CoCreate.crud.deleteDocument({\n    namespace: '',\n    room: '',\n    broadcast: true/false,\n    broadcast_sender: true/false,\n    \n    collection: \"module\",\n    document_id: \"\",\n    element: “xxxx”,\n    metadata: \"xxxx\"\n  }),\n  */\n  deleteDocument: function (info) {\n    if (!info['document_id'] || !info) {\n      return;\n    }\n\n    let commonData = (0, _commonFun.getCommonParams)();\n    let request_data = { ...info,\n      ...commonData\n    };\n    /** socket parameters **/\n    // if (info['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (info['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('deleteDocument', request_data, room);\n  },\n\n  /** export / import db functions **/\n\n  /*\n  readDocument({\n   collection: \"test123\",\n   element: “xxxx”,\n   metaData: \"xxxx\",\n  }),\n  */\n  exportCollection: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['export_type'] = info['export_type'];\n    request_data['metadata'] = info['metadata'];\n    this.socket.send('exportDB', request_data);\n  },\n\n  /*\n  readDocument({\n    collection: \"test123\",\n    file: file\n  }),\n  */\n  importCollection: function (info) {\n    const {\n      file\n    } = info;\n\n    if (info === null || !(file instanceof File)) {\n      return;\n    }\n\n    const extension = file.name.split(\".\").pop();\n\n    if (!['json', 'csv'].some(item => item === extension)) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['import_type'] = extension;\n    this.socket.send('importDB', request_data);\n    this.socket.sendFile(file);\n  },\n  //. message listener\n  listenMessage: function (message, fun) {\n    this.socket.listen(message, fun);\n  },\n  listenerReadDocument: function (fun) {\n    this.socket.listen(\"readDocument\", fun);\n  },\n  listenerCreateDocument: function (fun) {\n    this.socket.listen(\"createDocument\", fun);\n  },\n  listenerDeleteDocument: function (fun) {\n    this.socket.listen(\"deleteDocument\", fun);\n  },\n  listenerUpdateDocument: function (fun) {\n    this.socket.listen(\"updateDocument\", fun);\n  },\n  listenerReadDocumentList: function (fun) {\n    this.socket.listen(\"readDocumentList\", fun);\n  }\n};\n\nfunction CRUD(socket) {\n  CoCreateCRUD.setSocket(socket);\n  return CoCreateCRUD;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-crud/src/index.js\n")},"../../CoCreate-components/CoCreate-crud/src/utils.crud.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nfunction __mergeObject(target, source) {\n  target = target || {};\n\n  for (let key of Object.keys(source)) {\n    if (source[key] instanceof Object) {\n      Object.assign(source[key], __mergeObject(target[key], source[key]));\n    }\n  }\n\n  Object.assign(target || {}, source);\n  return target;\n}\n\nfunction __createObject(data, path) {\n  if (!path) return data;\n  let keys = path.split('.');\n  let newObject = data;\n\n  for (var i = keys.length - 1; i >= 0; i--) {\n    newObject = {\n      [keys[i]]: newObject\n    };\n  }\n\n  return newObject;\n}\n\nfunction __createArray(key, data) {\n  try {\n    let item = /([\\w\\W]+)\\[(\\d+)\\]/gm.exec(key);\n\n    if (item && item.length == 3) {\n      let arrayKey = item[1];\n      let index = parseInt(item[2]);\n\n      if (!data[arrayKey] || !Array.isArray(data[arrayKey])) {\n        data[arrayKey] = [];\n      }\n\n      data[arrayKey][index] = data[key];\n      delete data[key];\n      key = arrayKey;\n    }\n  } catch {\n    console.log('create array error');\n  }\n\n  return key;\n}\n\nfunction isObject(item) {\n  return !!item && item.constructor === Object;\n}\n\nfunction isArray(item) {\n  return !!item && item.constructor === Array;\n}\n\nfunction decodeObject(data) {\n  let keys = Object.keys(data);\n  let objectData = {};\n  keys.forEach(k => {\n    k = __createArray(k, data);\n\n    if (k.split('.').length > 1) {\n      let newData = __createObject(data[k], k);\n\n      delete data[k];\n      objectData = __mergeObject(objectData, newData);\n    } else {\n      objectData[k] = data[k];\n    }\n  });\n  return objectData;\n}\n\nfunction encodeObject(data) {\n  let keys = Object.keys(data);\n  let newData = {};\n  keys.forEach(k => {\n    let data_value = data[k];\n\n    if (isObject(data[k])) {\n      let new_obj = encodeObject(data[k]);\n      let newKeys = Object.keys(new_obj);\n      newKeys.forEach(newKey => {\n        let value = new_obj[newKey];\n        newKey = k + \".\" + newKey;\n        newData[newKey] = value;\n      });\n    } else if (isArray(data_value)) {\n      data_value.forEach((v, index) => {\n        newData[`${k}[${index}]`] = v;\n      });\n    } else {\n      newData[k] = data[k];\n    }\n  });\n  return newData;\n}\n\nvar _default = {\n  decodeObject,\n  encodeObject\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zdHJpcGUvLi4vQ29DcmVhdGUtY29tcG9uZW50cy9Db0NyZWF0ZS1jcnVkL3NyYy91dGlscy5jcnVkLmpzPzhlNTUiXSwibmFtZXMiOlsiX19tZXJnZU9iamVjdCIsInRhcmdldCIsInNvdXJjZSIsImtleSIsIk9iamVjdCIsImtleXMiLCJhc3NpZ24iLCJfX2NyZWF0ZU9iamVjdCIsImRhdGEiLCJwYXRoIiwic3BsaXQiLCJuZXdPYmplY3QiLCJpIiwibGVuZ3RoIiwiX19jcmVhdGVBcnJheSIsIml0ZW0iLCJleGVjIiwiYXJyYXlLZXkiLCJpbmRleCIsInBhcnNlSW50IiwiQXJyYXkiLCJpc0FycmF5IiwiY29uc29sZSIsImxvZyIsImlzT2JqZWN0IiwiY29uc3RydWN0b3IiLCJkZWNvZGVPYmplY3QiLCJvYmplY3REYXRhIiwiZm9yRWFjaCIsImsiLCJuZXdEYXRhIiwiZW5jb2RlT2JqZWN0IiwiZGF0YV92YWx1ZSIsIm5ld19vYmoiLCJuZXdLZXlzIiwibmV3S2V5IiwidmFsdWUiLCJ2Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsU0FBVUEsYUFBVixDQUF3QkMsTUFBeEIsRUFBZ0NDLE1BQWhDLEVBQ0E7QUFDQ0QsUUFBTSxHQUFHQSxNQUFNLElBQUksRUFBbkI7O0FBQ0EsT0FBSyxJQUFJRSxHQUFULElBQWdCQyxNQUFNLENBQUNDLElBQVAsQ0FBWUgsTUFBWixDQUFoQixFQUFxQztBQUNwQyxRQUFJQSxNQUFNLENBQUNDLEdBQUQsQ0FBTixZQUF1QkMsTUFBM0IsRUFBbUM7QUFDbENBLFlBQU0sQ0FBQ0UsTUFBUCxDQUFjSixNQUFNLENBQUNDLEdBQUQsQ0FBcEIsRUFBMkJILGFBQWEsQ0FBQ0MsTUFBTSxDQUFDRSxHQUFELENBQVAsRUFBY0QsTUFBTSxDQUFDQyxHQUFELENBQXBCLENBQXhDO0FBQ0E7QUFDRDs7QUFFREMsUUFBTSxDQUFDRSxNQUFQLENBQWNMLE1BQU0sSUFBSSxFQUF4QixFQUE0QkMsTUFBNUI7QUFDQSxTQUFPRCxNQUFQO0FBQ0E7O0FBRUQsU0FBU00sY0FBVCxDQUF3QkMsSUFBeEIsRUFBOEJDLElBQTlCLEVBQ0E7QUFDQyxNQUFJLENBQUNBLElBQUwsRUFBVyxPQUFPRCxJQUFQO0FBRVgsTUFBSUgsSUFBSSxHQUFHSSxJQUFJLENBQUNDLEtBQUwsQ0FBVyxHQUFYLENBQVg7QUFDQSxNQUFJQyxTQUFTLEdBQUdILElBQWhCOztBQUVBLE9BQUssSUFBS0ksQ0FBQyxHQUFHUCxJQUFJLENBQUNRLE1BQUwsR0FBYyxDQUE1QixFQUErQkQsQ0FBQyxJQUFJLENBQXBDLEVBQXVDQSxDQUFDLEVBQXhDLEVBQTRDO0FBQzNDRCxhQUFTLEdBQUc7QUFBQyxPQUFDTixJQUFJLENBQUNPLENBQUQsQ0FBTCxHQUFXRDtBQUFaLEtBQVo7QUFDQTs7QUFDRCxTQUFPQSxTQUFQO0FBQ0E7O0FBRUQsU0FBU0csYUFBVCxDQUF1QlgsR0FBdkIsRUFBNEJLLElBQTVCLEVBQ0E7QUFDRSxNQUFJO0FBQ0YsUUFBSU8sSUFBSSxHQUFHLHVCQUF1QkMsSUFBdkIsQ0FBNEJiLEdBQTVCLENBQVg7O0FBQ0EsUUFBSVksSUFBSSxJQUFJQSxJQUFJLENBQUNGLE1BQUwsSUFBZSxDQUEzQixFQUE4QjtBQUM1QixVQUFJSSxRQUFRLEdBQUdGLElBQUksQ0FBQyxDQUFELENBQW5CO0FBQ0EsVUFBSUcsS0FBSyxHQUFHQyxRQUFRLENBQUNKLElBQUksQ0FBQyxDQUFELENBQUwsQ0FBcEI7O0FBRUEsVUFBSSxDQUFDUCxJQUFJLENBQUNTLFFBQUQsQ0FBTCxJQUFtQixDQUFDRyxLQUFLLENBQUNDLE9BQU4sQ0FBY2IsSUFBSSxDQUFDUyxRQUFELENBQWxCLENBQXhCLEVBQXVEO0FBQ3JEVCxZQUFJLENBQUNTLFFBQUQsQ0FBSixHQUFpQixFQUFqQjtBQUNEOztBQUNEVCxVQUFJLENBQUNTLFFBQUQsQ0FBSixDQUFlQyxLQUFmLElBQXdCVixJQUFJLENBQUNMLEdBQUQsQ0FBNUI7QUFDQSxhQUFPSyxJQUFJLENBQUNMLEdBQUQsQ0FBWDtBQUNBQSxTQUFHLEdBQUdjLFFBQU47QUFDRDtBQUNGLEdBYkQsQ0FhRSxNQUFNO0FBQ05LLFdBQU8sQ0FBQ0MsR0FBUixDQUFZLG9CQUFaO0FBQ0Q7O0FBQ0QsU0FBT3BCLEdBQVA7QUFDRDs7QUFJRCxTQUFTcUIsUUFBVCxDQUFrQlQsSUFBbEIsRUFBd0I7QUFDdEIsU0FBUSxDQUFDLENBQUNBLElBQUgsSUFBYUEsSUFBSSxDQUFDVSxXQUFMLEtBQXFCckIsTUFBekM7QUFDRDs7QUFDRCxTQUFTaUIsT0FBVCxDQUFpQk4sSUFBakIsRUFBdUI7QUFDckIsU0FBUSxDQUFDLENBQUNBLElBQUgsSUFBYUEsSUFBSSxDQUFDVSxXQUFMLEtBQXFCTCxLQUF6QztBQUNEOztBQUVELFNBQVNNLFlBQVQsQ0FBc0JsQixJQUF0QixFQUE0QjtBQUMxQixNQUFJSCxJQUFJLEdBQUdELE1BQU0sQ0FBQ0MsSUFBUCxDQUFZRyxJQUFaLENBQVg7QUFDQSxNQUFJbUIsVUFBVSxHQUFHLEVBQWpCO0FBRUF0QixNQUFJLENBQUN1QixPQUFMLENBQWNDLENBQUQsSUFBTztBQUNsQkEsS0FBQyxHQUFHZixhQUFhLENBQUNlLENBQUQsRUFBSXJCLElBQUosQ0FBakI7O0FBQ0EsUUFBSXFCLENBQUMsQ0FBQ25CLEtBQUYsQ0FBUSxHQUFSLEVBQWFHLE1BQWIsR0FBc0IsQ0FBMUIsRUFBNkI7QUFDM0IsVUFBSWlCLE9BQU8sR0FBR3ZCLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDcUIsQ0FBRCxDQUFMLEVBQVVBLENBQVYsQ0FBNUI7O0FBQ0EsYUFBT3JCLElBQUksQ0FBQ3FCLENBQUQsQ0FBWDtBQUVBRixnQkFBVSxHQUFHM0IsYUFBYSxDQUFDMkIsVUFBRCxFQUFhRyxPQUFiLENBQTFCO0FBQ0QsS0FMRCxNQUtPO0FBQ0xILGdCQUFVLENBQUNFLENBQUQsQ0FBVixHQUFnQnJCLElBQUksQ0FBQ3FCLENBQUQsQ0FBcEI7QUFDRDtBQUNGLEdBVkQ7QUFXQSxTQUFPRixVQUFQO0FBQ0Q7O0FBRUQsU0FBU0ksWUFBVCxDQUFzQnZCLElBQXRCLEVBQTRCO0FBQzFCLE1BQUlILElBQUksR0FBR0QsTUFBTSxDQUFDQyxJQUFQLENBQVlHLElBQVosQ0FBWDtBQUNBLE1BQUlzQixPQUFPLEdBQUcsRUFBZDtBQUNBekIsTUFBSSxDQUFDdUIsT0FBTCxDQUFjQyxDQUFELElBQU87QUFDbEIsUUFBSUcsVUFBVSxHQUFHeEIsSUFBSSxDQUFDcUIsQ0FBRCxDQUFyQjs7QUFDQSxRQUFJTCxRQUFRLENBQUNoQixJQUFJLENBQUNxQixDQUFELENBQUwsQ0FBWixFQUF1QjtBQUNyQixVQUFJSSxPQUFPLEdBQUdGLFlBQVksQ0FBQ3ZCLElBQUksQ0FBQ3FCLENBQUQsQ0FBTCxDQUExQjtBQUVBLFVBQUlLLE9BQU8sR0FBRzlCLE1BQU0sQ0FBQ0MsSUFBUCxDQUFZNEIsT0FBWixDQUFkO0FBQ0FDLGFBQU8sQ0FBQ04sT0FBUixDQUFpQk8sTUFBRCxJQUFZO0FBQzFCLFlBQUlDLEtBQUssR0FBR0gsT0FBTyxDQUFDRSxNQUFELENBQW5CO0FBQ0FBLGNBQU0sR0FBR04sQ0FBQyxHQUFHLEdBQUosR0FBVU0sTUFBbkI7QUFDQUwsZUFBTyxDQUFDSyxNQUFELENBQVAsR0FBa0JDLEtBQWxCO0FBQ0QsT0FKRDtBQU1ELEtBVkQsTUFVTyxJQUFJZixPQUFPLENBQUNXLFVBQUQsQ0FBWCxFQUF3QjtBQUM3QkEsZ0JBQVUsQ0FBQ0osT0FBWCxDQUFtQixDQUFDUyxDQUFELEVBQUluQixLQUFKLEtBQWM7QUFDL0JZLGVBQU8sQ0FBRSxHQUFFRCxDQUFFLElBQUdYLEtBQU0sR0FBZixDQUFQLEdBQTRCbUIsQ0FBNUI7QUFDRCxPQUZEO0FBR0QsS0FKTSxNQUlBO0FBQ0xQLGFBQU8sQ0FBQ0QsQ0FBRCxDQUFQLEdBQWFyQixJQUFJLENBQUNxQixDQUFELENBQWpCO0FBQ0Q7QUFDRixHQW5CRDtBQW9CQSxTQUFPQyxPQUFQO0FBQ0Q7O2VBRWM7QUFDYkosY0FEYTtBQUViSztBQUZhLEMiLCJmaWxlIjoiLi4vLi4vQ29DcmVhdGUtY29tcG9uZW50cy9Db0NyZWF0ZS1jcnVkL3NyYy91dGlscy5jcnVkLmpzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZnVuY3Rpb24gXHRfX21lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlKSBcbntcblx0dGFyZ2V0ID0gdGFyZ2V0IHx8IHt9O1xuXHRmb3IgKGxldCBrZXkgb2YgT2JqZWN0LmtleXMoc291cmNlKSkge1xuXHRcdGlmIChzb3VyY2Vba2V5XSBpbnN0YW5jZW9mIE9iamVjdCkge1xuXHRcdFx0T2JqZWN0LmFzc2lnbihzb3VyY2Vba2V5XSwgX19tZXJnZU9iamVjdCh0YXJnZXRba2V5XSwgc291cmNlW2tleV0pKVxuXHRcdH1cblx0fVxuXHRcblx0T2JqZWN0LmFzc2lnbih0YXJnZXQgfHwge30sIHNvdXJjZSlcblx0cmV0dXJuIHRhcmdldFxufVxuXG5mdW5jdGlvbiBfX2NyZWF0ZU9iamVjdChkYXRhLCBwYXRoKSBcbntcblx0aWYgKCFwYXRoKSByZXR1cm4gZGF0YTtcblx0XG5cdGxldCBrZXlzID0gcGF0aC5zcGxpdCgnLicpXG5cdGxldCBuZXdPYmplY3QgPSBkYXRhO1xuXG5cdGZvciAodmFyICBpID0ga2V5cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdG5ld09iamVjdCA9IHtba2V5c1tpXV06IG5ld09iamVjdH1cdFx0XHRcdFxuXHR9XG5cdHJldHVybiBuZXdPYmplY3Q7XG59XG5cbmZ1bmN0aW9uIF9fY3JlYXRlQXJyYXkoa2V5LCBkYXRhKVxue1xuICB0cnkge1xuICAgIGxldCBpdGVtID0gLyhbXFx3XFxXXSspXFxbKFxcZCspXFxdL2dtLmV4ZWMoa2V5KVxuICAgIGlmIChpdGVtICYmIGl0ZW0ubGVuZ3RoID09IDMpIHtcbiAgICAgIGxldCBhcnJheUtleSA9IGl0ZW1bMV07XG4gICAgICBsZXQgaW5kZXggPSBwYXJzZUludChpdGVtWzJdKTtcbiAgICAgIFxuICAgICAgaWYgKCFkYXRhW2FycmF5S2V5XSB8fCAhQXJyYXkuaXNBcnJheShkYXRhW2FycmF5S2V5XSkpIHtcbiAgICAgICAgZGF0YVthcnJheUtleV0gPSBbXTtcbiAgICAgIH0gXG4gICAgICBkYXRhW2FycmF5S2V5XVtpbmRleF0gPSBkYXRhW2tleV07XG4gICAgICBkZWxldGUgZGF0YVtrZXldO1xuICAgICAga2V5ID0gYXJyYXlLZXk7XG4gICAgfVxuICB9IGNhdGNoIHtcbiAgICBjb25zb2xlLmxvZygnY3JlYXRlIGFycmF5IGVycm9yJyk7XG4gIH1cbiAgcmV0dXJuIGtleTtcbn1cblxuXG5cbmZ1bmN0aW9uIGlzT2JqZWN0KGl0ZW0pIHtcbiAgcmV0dXJuICghIWl0ZW0pICYmIChpdGVtLmNvbnN0cnVjdG9yID09PSBPYmplY3QpO1xufVxuZnVuY3Rpb24gaXNBcnJheShpdGVtKSB7XG4gIHJldHVybiAoISFpdGVtKSAmJiAoaXRlbS5jb25zdHJ1Y3RvciA9PT0gQXJyYXkpO1xufVxuXG5mdW5jdGlvbiBkZWNvZGVPYmplY3QoZGF0YSkge1xuICBsZXQga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpXG4gIGxldCBvYmplY3REYXRhID0ge307XG4gIFxuICBrZXlzLmZvckVhY2goKGspID0+IHtcbiAgICBrID0gX19jcmVhdGVBcnJheShrLCBkYXRhKTtcbiAgICBpZiAoay5zcGxpdCgnLicpLmxlbmd0aCA+IDEpIHtcbiAgICAgIGxldCBuZXdEYXRhID0gX19jcmVhdGVPYmplY3QoZGF0YVtrXSwgayk7XG4gICAgICBkZWxldGUgZGF0YVtrXTtcbiAgICAgIFxuICAgICAgb2JqZWN0RGF0YSA9IF9fbWVyZ2VPYmplY3Qob2JqZWN0RGF0YSwgbmV3RGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9iamVjdERhdGFba10gPSBkYXRhW2tdO1xuICAgIH1cbiAgfSlcbiAgcmV0dXJuIG9iamVjdERhdGE7XG59XG5cbmZ1bmN0aW9uIGVuY29kZU9iamVjdChkYXRhKSB7XG4gIGxldCBrZXlzID0gT2JqZWN0LmtleXMoZGF0YSk7XG4gIGxldCBuZXdEYXRhID0ge307XG4gIGtleXMuZm9yRWFjaCgoaykgPT4ge1xuICAgIGxldCBkYXRhX3ZhbHVlID0gZGF0YVtrXTtcbiAgICBpZiAoaXNPYmplY3QoZGF0YVtrXSkpIHtcbiAgICAgIGxldCBuZXdfb2JqID0gZW5jb2RlT2JqZWN0KGRhdGFba10pO1xuICAgICAgXG4gICAgICBsZXQgbmV3S2V5cyA9IE9iamVjdC5rZXlzKG5ld19vYmopO1xuICAgICAgbmV3S2V5cy5mb3JFYWNoKChuZXdLZXkpID0+IHtcbiAgICAgICAgbGV0IHZhbHVlID0gbmV3X29ialtuZXdLZXldO1xuICAgICAgICBuZXdLZXkgPSBrICsgXCIuXCIgKyBuZXdLZXk7XG4gICAgICAgIG5ld0RhdGFbbmV3S2V5XSA9IHZhbHVlO1xuICAgICAgfSlcbiAgICAgIFxuICAgIH0gZWxzZSBpZiAoaXNBcnJheShkYXRhX3ZhbHVlKSl7XG4gICAgICBkYXRhX3ZhbHVlLmZvckVhY2goKHYsIGluZGV4KSA9PiB7XG4gICAgICAgIG5ld0RhdGFbYCR7a31bJHtpbmRleH1dYF0gPSB2O1xuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3RGF0YVtrXSA9IGRhdGFba107XG4gICAgfVxuICB9KVxuICByZXR1cm4gbmV3RGF0YTtcbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBkZWNvZGVPYmplY3QsXG4gIGVuY29kZU9iamVjdFxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-crud/src/utils.crud.js\n")},"../../CoCreate-components/CoCreate-message/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = Message;\n\nvar _socket = _interopRequireDefault(__webpack_require__(/*! @cocreate/socket */ \"../../CoCreate-components/CoCreate-socket/src/index.js\"));\n\nvar _commonFun = __webpack_require__(/*! @cocreate/crud/src/common-fun.js */ \"../../CoCreate-components/CoCreate-crud/src/common-fun.js\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// let socket = new CoCreateSocket('ws');\nconst CoCreateMessage = {\n  socket: null,\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n\n  /*\n  CoCreate.message.send({\n     namespace: '',\n     room: '',\n     broadcast: true/false,\n     broadcast_sender: true/false\n     \n     rooms: [r1, r2],\n     emit: {\n       message': 'nice game',\n       data': 'let's play a game ....'\n     }\n   })\n  */\n  send: function (data) {\n    let request_data = (0, _commonFun.getCommonParams)();\n\n    if (!data || !data.emit) {\n      return;\n    }\n\n    request_data = { ...request_data,\n      ...data\n    };\n    /** socket parameters **/\n    // if (data['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (data['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(data.namespace, data.room);\n    this.socket.send('sendMessage', request_data, room);\n  },\n  receive: function (message, fun) {\n    this.socket.listen(message, fun);\n  }\n};\n\nfunction Message(socket) {\n  CoCreateMessage.setSocket(socket);\n  return CoCreateMessage;\n}\n\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zdHJpcGUvLi4vQ29DcmVhdGUtY29tcG9uZW50cy9Db0NyZWF0ZS1tZXNzYWdlL3NyYy9pbmRleC5qcz8yOGYyIl0sIm5hbWVzIjpbIkNvQ3JlYXRlTWVzc2FnZSIsInNvY2tldCIsInNldFNvY2tldCIsInNlbmQiLCJkYXRhIiwicmVxdWVzdF9kYXRhIiwiZW1pdCIsInJvb20iLCJuYW1lc3BhY2UiLCJyZWNlaXZlIiwibWVzc2FnZSIsImZ1biIsImxpc3RlbiIsIk1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVBO0FBRUEsTUFBTUEsZUFBZSxHQUFHO0FBQ3RCQyxRQUFNLEVBQUUsSUFEYztBQUV0QkMsV0FBUyxFQUFFLFVBQVNELE1BQVQsRUFBaUI7QUFDMUIsU0FBS0EsTUFBTCxHQUFjQSxNQUFkO0FBQ0QsR0FKcUI7O0FBS3ZCO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQ0UsTUFBSSxFQUFFLFVBQVNDLElBQVQsRUFBZTtBQUNsQixRQUFJQyxZQUFZLEdBQUcsaUNBQW5COztBQUVBLFFBQUksQ0FBQ0QsSUFBRCxJQUFTLENBQUNBLElBQUksQ0FBQ0UsSUFBbkIsRUFBeUI7QUFDdkI7QUFDRDs7QUFDREQsZ0JBQVksR0FBRyxFQUFDLEdBQUdBLFlBQUo7QUFBa0IsU0FBR0Q7QUFBckIsS0FBZjtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFVBQU1HLElBQUksR0FBRyxxQ0FBcUJILElBQUksQ0FBQ0ksU0FBMUIsRUFBcUNKLElBQUksQ0FBQ0csSUFBMUMsQ0FBYjtBQUVBLFNBQUtOLE1BQUwsQ0FBWUUsSUFBWixDQUFpQixhQUFqQixFQUFnQ0UsWUFBaEMsRUFBOENFLElBQTlDO0FBQ0YsR0FyQ3NCO0FBdUN2QkUsU0FBTyxFQUFFLFVBQVNDLE9BQVQsRUFBa0JDLEdBQWxCLEVBQXVCO0FBQzlCLFNBQUtWLE1BQUwsQ0FBWVcsTUFBWixDQUFtQkYsT0FBbkIsRUFBNEJDLEdBQTVCO0FBQ0Q7QUF6Q3NCLENBQXhCOztBQTRDZSxTQUFTRSxPQUFULENBQWlCWixNQUFqQixFQUF5QjtBQUN0Q0QsaUJBQWUsQ0FBQ0UsU0FBaEIsQ0FBMEJELE1BQTFCO0FBQ0EsU0FBT0QsZUFBUDtBQUNEOztBQUFBIiwiZmlsZSI6Ii4uLy4uL0NvQ3JlYXRlLWNvbXBvbmVudHMvQ29DcmVhdGUtbWVzc2FnZS9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQ29DcmVhdGVTb2NrZXQgZnJvbSBcIkBjb2NyZWF0ZS9zb2NrZXRcIlxuaW1wb3J0IHtnZXRDb21tb25QYXJhbXMsIGdldENvbW1vblBhcmFtc0V4dGVuZCwgZ2VuZXJhdGVTb2NrZXRDbGllbnR9IGZyb20gXCJAY29jcmVhdGUvY3J1ZC9zcmMvY29tbW9uLWZ1bi5qc1wiXG5cbi8vIGxldCBzb2NrZXQgPSBuZXcgQ29DcmVhdGVTb2NrZXQoJ3dzJyk7XG5cbmNvbnN0IENvQ3JlYXRlTWVzc2FnZSA9IHtcbiAgc29ja2V0OiBudWxsLFxuICBzZXRTb2NrZXQ6IGZ1bmN0aW9uKHNvY2tldCkge1xuICAgIHRoaXMuc29ja2V0ID0gc29ja2V0O1xuICB9LFxuIC8qXG4gQ29DcmVhdGUubWVzc2FnZS5zZW5kKHtcbiAgICBuYW1lc3BhY2U6ICcnLFxuICAgIHJvb206ICcnLFxuICAgIGJyb2FkY2FzdDogdHJ1ZS9mYWxzZSxcbiAgICBicm9hZGNhc3Rfc2VuZGVyOiB0cnVlL2ZhbHNlXG4gICAgXG4gICAgcm9vbXM6IFtyMSwgcjJdLFxuICAgIGVtaXQ6IHtcbiAgICAgIG1lc3NhZ2UnOiAnbmljZSBnYW1lJyxcbiAgICAgIGRhdGEnOiAnbGV0J3MgcGxheSBhIGdhbWUgLi4uLidcbiAgICB9XG4gIH0pXG4gKi9cbiBzZW5kOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgbGV0IHJlcXVlc3RfZGF0YSA9IGdldENvbW1vblBhcmFtcygpO1xuICAgIFxuICAgIGlmICghZGF0YSB8fCAhZGF0YS5lbWl0KSB7XG4gICAgICByZXR1cm47ICAgICBcbiAgICB9XG4gICAgcmVxdWVzdF9kYXRhID0gey4uLnJlcXVlc3RfZGF0YSwgLi4uZGF0YX1cbiAgICBcbiAgICAvKiogc29ja2V0IHBhcmFtZXRlcnMgKiovXG4gICAgLy8gaWYgKGRhdGFbJ2Jyb2FkY2FzdCddID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyAgIHJlcXVlc3RfZGF0YVsnYnJvYWRjYXN0J10gPSB0cnVlO1xuICAgIC8vIH1cbiAgICAvLyBpZiAoZGF0YVsnYnJvYWRjYXN0X3NlbmRlciddID09PSB1bmRlZmluZWQpIHtcbiAgICAvLyAgIHJlcXVlc3RfZGF0YVsnYnJvYWRjYXN0X3NlbmRlciddID0gdHJ1ZTtcbiAgICAvLyB9XG4gICAgY29uc3Qgcm9vbSA9IGdlbmVyYXRlU29ja2V0Q2xpZW50KGRhdGEubmFtZXNwYWNlLCBkYXRhLnJvb20pO1xuICAgIFxuICAgIHRoaXMuc29ja2V0LnNlbmQoJ3NlbmRNZXNzYWdlJywgcmVxdWVzdF9kYXRhLCByb29tKVxuIH0sXG4gXG4gcmVjZWl2ZTogZnVuY3Rpb24obWVzc2FnZSwgZnVuKSB7XG4gICB0aGlzLnNvY2tldC5saXN0ZW4obWVzc2FnZSwgZnVuKTtcbiB9LFxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBNZXNzYWdlKHNvY2tldCkge1xuICBDb0NyZWF0ZU1lc3NhZ2Uuc2V0U29ja2V0KHNvY2tldClcbiAgcmV0dXJuIENvQ3JlYXRlTWVzc2FnZTtcbn07XG5cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-message/src/index.js\n")},"../../CoCreate-components/CoCreate-render/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\n/**\n * change name Class\n * add functionality to add value on any attr of each elements into template\n */\nconst CoCreateRender = {\n  __getValueFromObject: function (json, path) {\n    try {\n      if (typeof json == 'undefined' || !path) return false;\n      let jsonData = json,\n          subpath = path.split('.');\n\n      for (let i = 0; i < subpath.length; i++) {\n        jsonData = jsonData[subpath[i]];\n        if (!jsonData) return false;\n      }\n\n      return jsonData;\n    } catch (error) {\n      console.log(\"Error in getValueFromObject\", error);\n      return false;\n    }\n  },\n  __getValue: function (data, attrValue) {\n    let result = /{{\\s*([\\w\\W]+)\\s*}}/g.exec(attrValue);\n\n    if (result) {\n      return this.__getValueFromObject(data, result[1].trim());\n    }\n\n    return false;\n  },\n  __createObject: function (data, path) {\n    try {\n      if (!path) return data;\n      let keys = path.split('.');\n      let newObject = data;\n\n      for (var i = keys.length - 1; i >= 0; i--) {\n        newObject = {\n          [keys[i]]: newObject\n        };\n      }\n\n      return newObject;\n    } catch (error) {\n      console.log(\"Error in getValueFromObject\", error);\n      return false;\n    }\n  },\n  __replaceValue: function (data, inputValue) {\n    let isPass = false;\n    let self = this;\n    let resultValue = null; // let variables = inputValue.match(/{{\\s*(\\S+)\\s*}}/g);\n\n    let variables = inputValue.match(/{{([A-Za-z0-9_.,\\- ]*)}}/g);\n\n    if (variables) {\n      variables.forEach(attr => {\n        let value = self.__getValue(data, attr);\n\n        if (value && typeof value !== \"object\") {\n          isPass = true;\n          inputValue = inputValue.replace(attr, value);\n        }\n      });\n\n      if (isPass) {\n        resultValue = inputValue;\n      }\n    }\n\n    return resultValue;\n  },\n  setArray: function (template, data) {\n    const type = template.getAttribute('data-render_array') || \"data\";\n    const render_key = template.getAttribute('data-render_key') || type;\n    const self = this;\n\n    const arrayData = this.__getValueFromObject(data, type);\n\n    if (type && Array.isArray(arrayData)) {\n      arrayData.forEach((item, index) => {\n        let cloneEl = template.cloneNode(true);\n        cloneEl.classList.remove('template');\n        cloneEl.classList.add('clone_' + type);\n\n        if (typeof item !== 'object') {\n          item = {\n            \"--\": item\n          };\n        } else {\n          item['index'] = index;\n        }\n\n        let r_data = self.__createObject(item, render_key);\n\n        self.setValue([cloneEl], r_data);\n        template.insertAdjacentHTML('beforebegin', cloneEl.outerHTML);\n      });\n    }\n  },\n  setValue: function (els, data, passTo, template) {\n    if (!data) return;\n    const that = this;\n    Array.from(els).forEach(e => {\n      let passId = e.getAttribute('data-pass_id');\n\n      if (passTo && passId != passTo) {\n        return;\n      }\n\n      Array.from(e.attributes).forEach(attr => {\n        let attr_name = attr.name.toLowerCase();\n        let isPass = false;\n        let attrValue = attr.value;\n        attrValue = that.__replaceValue(data, attrValue);\n\n        if (attrValue) {\n          if (attr_name == 'value') {\n            let tag = e.tagName.toLowerCase();\n\n            switch (tag) {\n              case 'input':\n                e.setAttribute(attr_name, attrValue);\n                break;\n\n              case 'textarea':\n                e.setAttribute(attr_name, attrValue);\n                e.textContent = attrValue;\n                break;\n\n              default:\n                if (e.children.length === 0) {\n                  e.innerHTML = attrValue;\n                }\n\n            }\n          }\n\n          e.setAttribute(attr_name, attrValue);\n        }\n      });\n\n      if (e.children.length == 0 && e.textContent) {\n        let textContent = e.textContent;\n        textContent = that.__replaceValue(data, textContent);\n\n        if (textContent) {\n          e.textContent = textContent;\n        }\n      }\n\n      if (e.children.length > 0) {\n        that.setValue(e.children, data);\n\n        if (e.classList.contains('template')) {\n          that.setArray(e, data);\n        }\n      }\n    });\n  },\n  data: function ({\n    selector,\n    data,\n    elements,\n    passTo\n  }) {\n    if (selector) {\n      this.render(selector, data);\n    } else if (elements) {\n      this.setValue(elements, data, passTo);\n    }\n  },\n  render: function (selector, dataResult) {\n    let template_div = document.querySelector(selector);\n\n    if (!template_div) {\n      return;\n    }\n\n    if (Array.isArray(dataResult)) {\n      template_div.setAttribute('data-render_array', 'test');\n      this.setValue([template_div], {\n        test: dataResult\n      });\n    } else {\n      this.setValue(template_div.children, dataResult);\n    }\n  }\n};\nvar _default = CoCreateRender;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-render/src/index.js\n")},"../../CoCreate-components/CoCreate-socket/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nclass CoCreateSocket {\n  constructor(prefix = \"crud\") {\n    this.prefix = prefix || \"crud\";\n    this.sockets = new Map();\n    this.listeners = new Map();\n    this.messageQueue = new Map();\n    this.saveFileName = '';\n    this.globalScope = \"\";\n  }\n\n  setGlobalScope(scope) {\n    this.globalScope = `${this.prefix}/${scope}`;\n  }\n\n  getGlobalScope() {\n    return this.globalScope;\n  }\n  /**\n   * config: {namespace, room, host}\n   */\n\n\n  create(config) {\n    const {\n      namespace,\n      room\n    } = config;\n    const key = this.getKey(namespace, room);\n\n    let _this = this;\n\n    let socket;\n\n    if (this.sockets.get(key)) {\n      socket = this.sockets.get(key);\n      console.log('SOcket already has been register');\n      return;\n    }\n\n    let w_protocol = window.location.protocol;\n\n    if (window.location.protocol === \"about:\") {\n      w_protocol = window.parent.location.protocol;\n    }\n\n    let protocol = w_protocol === 'http:' ? 'ws' : 'wss';\n    const port = config.port ? config.port : 8088;\n    let socket_url = `${protocol}://${window.location.host}:${port}/${key}`;\n\n    if (config.host) {\n      if (config.host.includes(\"://\")) {\n        socket_url = `${config.host}/${key}`;\n      } else {\n        socket_url = `${protocol}://${config.host}:${port}/${key}`;\n      }\n    }\n\n    socket = new WebSocket(socket_url);\n\n    socket.onopen = function (event) {\n      console.log('created socket: ' + key);\n      const messages = _this.messageQueue.get(key) || [];\n      console.log(messages);\n      messages.forEach(msg => socket.send(JSON.stringify(msg)));\n\n      _this.sockets.set(key, socket);\n\n      _this.messageQueue.set(key, []);\n    };\n\n    socket.onclose = function (event) {\n      switch (event.code) {\n        case 1000:\n          // close normal\n          console.log(\"websocket: closed\");\n          break;\n\n        default:\n          _this.destroy(socket, key);\n\n          _this.reconnect(socket, config);\n\n          break;\n      }\n    };\n\n    socket.onerror = function (err) {\n      console.log('Socket error');\n\n      _this.destroy(socket, key);\n\n      _this.reconnect(socket, config);\n    };\n\n    socket.onmessage = function (data) {\n      try {\n        if (data.data instanceof Blob) {\n          _this.saveFile(data.data);\n\n          return;\n        }\n\n        let rev_data = JSON.parse(data.data);\n\n        if (rev_data.data.event) {\n          var event = new CustomEvent(rev_data.data.event, {\n            detail: rev_data.data\n          });\n          document.dispatchEvent(event);\n          return;\n        }\n\n        let action = rev_data.action;\n\n        const listeners = _this.listeners.get(rev_data.action);\n\n        if (!listeners) {\n          return;\n        }\n\n        listeners.forEach(listener => {\n          listener(rev_data.data, key);\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n  }\n  /**\n   * \n   */\n\n\n  send(action, data, room) {\n    const obj = {\n      action: action,\n      data: data\n    };\n    const key = this.getKeyByRoom(room);\n    const socket = this.getByRoom(room);\n\n    if (socket) {\n      socket.send(JSON.stringify(obj));\n    } else {\n      if (this.messageQueue.get(key)) {\n        this.messageQueue.get(key).push(obj);\n      } else {\n        this.messageQueue.set(key, [obj]);\n      }\n    }\n  }\n\n  sendFile(file, room) {\n    const socket = this.getByRoom(room);\n\n    if (socket) {\n      socket.send(file);\n    }\n  }\n  /**\n   * scope: ns/room\n   */\n\n\n  listen(type, callback) {\n    if (!this.listeners.get(type)) {\n      this.listeners.set(type, [callback]);\n    } else {\n      this.listeners.get(type).push(callback);\n    }\n  }\n\n  reconnect(socket, config) {\n    let _this = this;\n\n    setTimeout(function () {\n      _this.create(config);\n    }, 1000);\n  }\n\n  destroy(socket, key) {\n    if (socket) {\n      socket.onerror = socket.onopen = socket.onclose = null;\n      socket.close();\n      socket = null;\n    }\n\n    if (this.sockets.get(key)) {\n      this.sockets.delete(key);\n    }\n  }\n\n  getKey(namespace, room) {\n    let key = `${this.prefix}`;\n\n    if (namespace && namespace != '') {\n      if (room && room != '') {\n        key += `/${namespace}/${room}`;\n      } else {\n        key += `/${namespace}`;\n      }\n    }\n\n    return key;\n  }\n\n  getByRoom(room) {\n    let key = this.getKeyByRoom(room);\n    return this.sockets.get(key);\n  }\n\n  getKeyByRoom(room) {\n    let key = this.globalScope;\n\n    if (room) {\n      key = `${this.prefix}/${room}`;\n    }\n\n    return key;\n  }\n\n  saveFile(blob) {\n    // const {filename} = window.saveFileInfo;\n    const file_name = this.saveFileName || 'downloadFile';\n    var a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style = \"display: none\";\n    let url = window.URL.createObjectURL(blob);\n    a.href = url;\n    a.download = file_name;\n    a.click();\n    window.URL.revokeObjectURL(url);\n    this.saveFileName = '';\n  }\n\n  listenAsync(eventname) {\n    return new Promise(resolve => {\n      document.addEventListener(eventname, function (event) {\n        resolve(event.detail);\n      }, {\n        once: true\n      });\n    });\n  }\n\n}\n\nvar _default = CoCreateSocket;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-socket/src/index.js\n")},"../../CoCreate-components/CoCreate-utlis/src/index.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.generateUUID = generateUUID;\nexports.isRealTime = isRealTime;\nexports.getParentFromElement = getParentFromElement;\nexports.isReadValue = isReadValue;\nexports.isUpdateValue = isUpdateValue;\nexports.isJsonString = isJsonString;\nexports.getAttributes = getAttributes;\nexports.checkValue = checkValue;\nexports.allFrame = allFrame;\nexports.cssPath = cssPath;\nexports.getTopMostWindow = getTopMostWindow;\nexports.findIframeFromElement = findIframeFromElement;\nexports.getIframeFromPath = getIframeFromPath;\nexports.configMatch2 = configMatch2;\nexports.configExecuter = configExecuter;\nexports.UUID = UUID;\nexports.parseTextToHtml = parseTextToHtml;\nexports.splitBydelimiter = splitBydelimiter;\nexports.joinBydelimiter = joinBydelimiter;\nexports.isValidSelector = isValidSelector;\nexports.getElementPath = getElementPath;\nexports.isUsageY = isUsageY;\nexports.default = void 0;\n\n/**\n * Created by jin\n * 2020-04-03\n */\nfunction generateUUID(length = 36) {\n  // if (length == 10) {\n  //   var result           = \'\';\n  //   var characters       = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\';\n  //   var charactersLength = characters.length;\n  //   for ( var i = 0; i < length; i++ ) {\n  //     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  //   }\n  //   var dd = new Date().toTimeString();\n  //   var random = dd.replace(/[\\W_]+/g, "").substr(0,6);\n  //   result += random;\n  //   return result;\n  // }\n  let d = new Date().getTime();\n  let d2 = window.performance && window.performance.now && window.performance.now() * 1000 || 0;\n  let pattern = "uxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";\n\n  if (length <= pattern.length) {\n    pattern = pattern.substr(0, length);\n  } else {\n    let add_len = length - pattern.length;\n    let sub_pattern = "-xxxyyxxx";\n    let group_n = Math.floor(add_len / sub_pattern.length);\n\n    for (let i = 0; i < group_n; i++) {\n      pattern += sub_pattern;\n    }\n\n    group_n = add_len - group_n * sub_pattern.length;\n    pattern += sub_pattern.substr(0, group_n);\n  }\n\n  let uuid = pattern.replace(/[xy]/g, function (c) {\n    var r = Math.random() * 16;\n\n    if (d > 0) {\n      var r = (d + r) % 16 | 0;\n      d = Math.floor(d / 16);\n    } else {\n      var r = (d2 + r) % 16 | 0;\n      d2 = Math.floor(d2 / 16);\n    }\n\n    return (c == "x" ? r : r & 0x7 | 0x8).toString(16);\n  });\n  return uuid;\n}\n\nfunction isRealTime(element, parent_realTime) {\n  let realtime = element.getAttribute("data-realtime") || parent_realTime;\n\n  if (realtime === "false") {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getParentFromElement(element, parent_class, attributes) {\n  if (parent_class) {\n    if (element.classList.contains(parent_class)) {\n      return element;\n    }\n\n    let node = element.parentNode;\n\n    while (node != null && node.classList) {\n      if (node.classList.contains(parent_class)) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n  } else if (attributes) {\n    if (attributes.every(attr => element.attributes.hasOwnProperty(attr))) {\n      return element;\n    }\n\n    let node = element.parentNode;\n\n    while (node != null && node.attributes) {\n      if (attributes.every(attr => node.attributes.hasOwnProperty(attr))) {\n        return node;\n      }\n\n      node = node.parentNode;\n    }\n  }\n\n  return false;\n}\n\nfunction isReadValue(element) {\n  return element.getAttribute("data-read_value") != "false";\n}\n\nfunction isUpdateValue(element) {\n  return element.getAttribute("data-update_value") != "false";\n}\n\nfunction isJsonString(str_data) {\n  try {\n    let json_data = JSON.parse(str_data);\n\n    if (typeof json_data === "object" && json_data != null) {\n      return true;\n    } else {\n      return false;\n    }\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction getAttributes(element) {\n  return element.getAttributeNames().reduce((attrMap, name) => {\n    attrMap[name] = element.getAttribute(name);\n    return attrMap;\n  }, {});\n}\n\nfunction checkValue(value) {\n  if (!value) return false;\n\n  if (/{{\\s*([\\w\\W]+)\\s*}}/g.test(value)) {\n    return false;\n  }\n\n  return true;\n} // hosseins utills\n// function to go through all frames\n\n\nfunction allFrame(callback) {\n  let allFrames = [{\n    document,\n    window\n  }];\n\n  for (let frame of document.querySelectorAll("iframe")) {\n    let frameDocument = frame.contentDocument || frame.contentWindow.document;\n    let frameWindow = frame.contentWindow;\n    allFrames.push({\n      document: frameDocument,\n      window: frameWindow,\n      frameElement: frame\n    });\n  }\n\n  let result = new Set();\n\n  for (let frame of allFrames) {\n    let callbackResult = callback(frame);\n    if (callbackResult && typeof callbackResult[Symbol.iterator] === "function") callbackResult.forEach(el => result.add(el));else if (callbackResult) result.add(callbackResult);\n  }\n\n  return Array.from(result);\n}\n\nfunction cssPath(node) {\n  let pathSplits = [];\n\n  do {\n    if (!node || !node.tagName) return false;\n    let pathSplit = node.tagName.toLowerCase();\n    if (node.id && node.tagName !== "BODY") pathSplit += "#" + node.id;\n\n    if (node.classList.length && node.tagName !== "BODY") {\n      node.classList.forEach(item => {\n        if (item.indexOf(":") === -1) pathSplit += "." + item;\n      });\n    }\n\n    if (node.tagName !== "BODY" && node.parentNode) {\n      let index = Array.prototype.indexOf.call(node.parentNode.children, node);\n      pathSplit += `:nth-child(${index + 1})`;\n    }\n\n    pathSplits.unshift(pathSplit);\n    node = node.parentNode;\n  } while (node.tagName !== "HTML");\n\n  return pathSplits.join(" > ");\n}\n\nfunction getTopMostWindow() {\n  let parentWindow = window;\n\n  while (parentWindow !== window.parent) parentWindow = window.parent;\n\n  return parentWindow;\n}\n\nfunction findIframeFromElement(windowObject, element) {\n  let frameElement;\n  allFrame(frame => {\n    if (frame.document.contains(element)) frameElement = frame.frameElement; // window.cc.findIframeFromElement(frame.window, element);\n  });\n  return frameElement;\n}\n\nfunction getIframeFromPath(path) {\n  let topWindow = getTopMostWindow;\n  path.forEach(selector => {\n    if (topWindow) topWindow = topWindow.querySelector(selector);\n  });\n  return topWindow;\n} // DO NOT REMOVE\n// configMatch: function* configMatch(elementConfig, element) {\n//   for (let config of elementConfig) {\n//     // if (!Array.isArray(config.selector))\n//     //   config.selector = [config.selector];\n//     if (config.selector && element.matches(config.selector)) yield config;\n//   }\n//   return;\n// },\n\n\nfunction configMatch2(elementConfig, element) {\n  let result = [];\n\n  for (let config of elementConfig) {\n    if (config.selector && element.matches(config.selector)) result.push(config);\n  }\n\n  return result;\n} // DO NOT REMOVE\n// an opiniated function uses configMatch2 to read configs\n// WARNING: the config iterated from top to bottom. for deseired effect elementConfig should be reveresed\n// typeof elementConfig: array of objects and every objects containing keys as false, true or a selector \n// element: the element to read attributes\n// key: the key in which is in elementConfig and on match onSuccess callback will be called\n\n\nfunction configExecuter(element, key, onSuccess, elementConfig) {\n  for (let config of configMatch2(elementConfig || window.elementConfig, element)) if (config[key] === true) return onSuccess(element, config);else if (config[key] === false) return false;else if (config[key] === undefined) continue;else if (isValidSelector(config[key])) return onSuccess(element, config, true);else console.warn("builder: wrong element config ", config);\n\n  return false;\n}\n\nfunction UUID(length = 10) {\n  var result = "";\n  var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";\n  var charactersLength = characters.length;\n\n  for (var i = 0; i < length; i++) {\n    result += characters.charAt(Math.floor(Math.random() * charactersLength));\n  }\n\n  var d = new Date().toTimeString();\n  var random = d.replace(/[\\W_]+/g, "").substr(0, 6);\n  result += random;\n  return result;\n}\n\nfunction parseTextToHtml(text) {\n  let doc = new DOMParser().parseFromString(text, "text/html");\n  if (doc.head.children[0]) return doc.head.children[0];else return doc.body.children[0];\n}\n\nfunction splitBydelimiter(str, delimiter) {\n  return str.split(delimiter).map(s => s.trim());\n}\n\nfunction joinBydelimiter(str, delimiter) {\n  return str.map(s => s.trim()).join(delimiter);\n}\n\nfunction isValidSelector(selector) {\n  try {\n    document.createDocumentFragment().querySelector(selector);\n  } catch (error) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction getElementPath(element, returnContext) {\n  let path = [];\n  let topWindow = window;\n  let iframeElement = findIframeFromElement(topWindow, element);\n  let p = cssPath(iframeElement);\n  if (p) path.unshift(p);\n  return returnContext ? {\n    path,\n    document: iframeElement || document\n  } : path; //todo: support for nested iframe\n  // while(iframeElement !== findIframeFromElement(topWindow,iframeElement))\n  // {\n  //   iframeElement = findIframeFromElement(topWindow,iframeElement);\n  //   path.unshift(cssPath(iframeElement))\n  // }\n}\n\nfunction isUsageY(input) {\n  if (this.isJsonString(input.getAttribute(\'data-collection\'))) {\n    return false;\n  }\n\n  if (this.isJsonString(input.getAttribute(\'name\'))) {\n    return false;\n  }\n\n  if (input.tagName === "INPUT" && ["text", "email", "tel", "url"].includes(input.type) || input.tagName === "TEXTAREA") {\n    if (!input.getAttribute(\'name\')) {\n      return false;\n    }\n\n    if (input.getAttribute("data-realtime") == "false") {\n      return false;\n    }\n\n    if (input.getAttribute("data-unique") === "true") {\n      return false;\n    }\n\n    if (input.type === \'password\') {\n      return false;\n    }\n\n    if (!this.isReadValue(input)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nvar _default = {\n  isUsageY,\n  getElementPath,\n  isValidSelector,\n  joinBydelimiter,\n  splitBydelimiter,\n  parseTextToHtml,\n  UUID,\n  configExecuter,\n  configMatch2,\n  getIframeFromPath,\n  findIframeFromElement,\n  getTopMostWindow,\n  cssPath,\n  allFrame,\n  checkValue,\n  getAttributes,\n  isJsonString,\n  isUpdateValue,\n  isReadValue,\n  getParentFromElement,\n  isRealTime,\n  generateUUID\n};\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zdHJpcGUvLi4vQ29DcmVhdGUtY29tcG9uZW50cy9Db0NyZWF0ZS11dGxpcy9zcmMvaW5kZXguanM/NzU3ZiJdLCJuYW1lcyI6WyJnZW5lcmF0ZVVVSUQiLCJsZW5ndGgiLCJkIiwiRGF0ZSIsImdldFRpbWUiLCJkMiIsIndpbmRvdyIsInBlcmZvcm1hbmNlIiwibm93IiwicGF0dGVybiIsInN1YnN0ciIsImFkZF9sZW4iLCJzdWJfcGF0dGVybiIsImdyb3VwX24iLCJNYXRoIiwiZmxvb3IiLCJpIiwidXVpZCIsInJlcGxhY2UiLCJjIiwiciIsInJhbmRvbSIsInRvU3RyaW5nIiwiaXNSZWFsVGltZSIsImVsZW1lbnQiLCJwYXJlbnRfcmVhbFRpbWUiLCJyZWFsdGltZSIsImdldEF0dHJpYnV0ZSIsImdldFBhcmVudEZyb21FbGVtZW50IiwicGFyZW50X2NsYXNzIiwiYXR0cmlidXRlcyIsImNsYXNzTGlzdCIsImNvbnRhaW5zIiwibm9kZSIsInBhcmVudE5vZGUiLCJldmVyeSIsImF0dHIiLCJoYXNPd25Qcm9wZXJ0eSIsImlzUmVhZFZhbHVlIiwiaXNVcGRhdGVWYWx1ZSIsImlzSnNvblN0cmluZyIsInN0cl9kYXRhIiwianNvbl9kYXRhIiwiSlNPTiIsInBhcnNlIiwiZSIsImdldEF0dHJpYnV0ZXMiLCJnZXRBdHRyaWJ1dGVOYW1lcyIsInJlZHVjZSIsImF0dHJNYXAiLCJuYW1lIiwiY2hlY2tWYWx1ZSIsInZhbHVlIiwidGVzdCIsImFsbEZyYW1lIiwiY2FsbGJhY2siLCJhbGxGcmFtZXMiLCJkb2N1bWVudCIsImZyYW1lIiwicXVlcnlTZWxlY3RvckFsbCIsImZyYW1lRG9jdW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJjb250ZW50V2luZG93IiwiZnJhbWVXaW5kb3ciLCJwdXNoIiwiZnJhbWVFbGVtZW50IiwicmVzdWx0IiwiU2V0IiwiY2FsbGJhY2tSZXN1bHQiLCJTeW1ib2wiLCJpdGVyYXRvciIsImZvckVhY2giLCJlbCIsImFkZCIsIkFycmF5IiwiZnJvbSIsImNzc1BhdGgiLCJwYXRoU3BsaXRzIiwidGFnTmFtZSIsInBhdGhTcGxpdCIsInRvTG93ZXJDYXNlIiwiaWQiLCJpdGVtIiwiaW5kZXhPZiIsImluZGV4IiwicHJvdG90eXBlIiwiY2FsbCIsImNoaWxkcmVuIiwidW5zaGlmdCIsImpvaW4iLCJnZXRUb3BNb3N0V2luZG93IiwicGFyZW50V2luZG93IiwicGFyZW50IiwiZmluZElmcmFtZUZyb21FbGVtZW50Iiwid2luZG93T2JqZWN0IiwiZ2V0SWZyYW1lRnJvbVBhdGgiLCJwYXRoIiwidG9wV2luZG93Iiwic2VsZWN0b3IiLCJxdWVyeVNlbGVjdG9yIiwiY29uZmlnTWF0Y2gyIiwiZWxlbWVudENvbmZpZyIsImNvbmZpZyIsIm1hdGNoZXMiLCJjb25maWdFeGVjdXRlciIsImtleSIsIm9uU3VjY2VzcyIsInVuZGVmaW5lZCIsImlzVmFsaWRTZWxlY3RvciIsImNvbnNvbGUiLCJ3YXJuIiwiVVVJRCIsImNoYXJhY3RlcnMiLCJjaGFyYWN0ZXJzTGVuZ3RoIiwiY2hhckF0IiwidG9UaW1lU3RyaW5nIiwicGFyc2VUZXh0VG9IdG1sIiwidGV4dCIsImRvYyIsIkRPTVBhcnNlciIsInBhcnNlRnJvbVN0cmluZyIsImhlYWQiLCJib2R5Iiwic3BsaXRCeWRlbGltaXRlciIsInN0ciIsImRlbGltaXRlciIsInNwbGl0IiwibWFwIiwicyIsInRyaW0iLCJqb2luQnlkZWxpbWl0ZXIiLCJjcmVhdGVEb2N1bWVudEZyYWdtZW50IiwiZXJyb3IiLCJnZXRFbGVtZW50UGF0aCIsInJldHVybkNvbnRleHQiLCJpZnJhbWVFbGVtZW50IiwicCIsImlzVXNhZ2VZIiwiaW5wdXQiLCJpbmNsdWRlcyIsInR5cGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFHTyxTQUFTQSxZQUFULENBQXNCQyxNQUFNLEdBQUcsRUFBL0IsRUFBbUM7QUFDeEM7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SUFBUDtBQUNEOztBQUNELFNBQU8sS0FBUDtBQUNEOztlQUVjO0FBQ2JELFVBRGE7QUFFYkosZ0JBRmE7QUFHYnpCLGlCQUhhO0FBSWJzQixpQkFKYTtBQUtiUCxrQkFMYTtBQU1iUCxpQkFOYTtBQU9iTCxNQVBhO0FBUWJQLGdCQVJhO0FBU2JKLGNBVGE7QUFVYkwsbUJBVmE7QUFXYkYsdUJBWGE7QUFZYkgsa0JBWmE7QUFhYmQsU0FiYTtBQWNidEIsVUFkYTtBQWViSCxZQWZhO0FBZ0JiTCxlQWhCYTtBQWlCYk4sY0FqQmE7QUFrQmJELGVBbEJhO0FBbUJiRCxhQW5CYTtBQW9CYlYsc0JBcEJhO0FBcUJiTCxZQXJCYTtBQXNCYnZCO0FBdEJhLEMiLCJmaWxlIjoiLi4vLi4vQ29DcmVhdGUtY29tcG9uZW50cy9Db0NyZWF0ZS11dGxpcy9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENyZWF0ZWQgYnkgamluXG4gKiAyMDIwLTA0LTAzXG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKGxlbmd0aCA9IDM2KSB7XG4gIC8vIGlmIChsZW5ndGggPT0gMTApIHtcbiAgLy8gICB2YXIgcmVzdWx0ICAgICAgICAgICA9ICcnO1xuICAvLyAgIHZhciBjaGFyYWN0ZXJzICAgICAgID0gJ0FCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5JztcbiAgLy8gICB2YXIgY2hhcmFjdGVyc0xlbmd0aCA9IGNoYXJhY3RlcnMubGVuZ3RoO1xuICAvLyAgIGZvciAoIHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrICkge1xuICAvLyAgICAgcmVzdWx0ICs9IGNoYXJhY3RlcnMuY2hhckF0KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNoYXJhY3RlcnNMZW5ndGgpKTtcbiAgLy8gICB9XG5cbiAgLy8gICB2YXIgZGQgPSBuZXcgRGF0ZSgpLnRvVGltZVN0cmluZygpO1xuICAvLyAgIHZhciByYW5kb20gPSBkZC5yZXBsYWNlKC9bXFxXX10rL2csIFwiXCIpLnN1YnN0cigwLDYpO1xuICAvLyAgIHJlc3VsdCArPSByYW5kb207XG4gIC8vICAgcmV0dXJuIHJlc3VsdDtcbiAgLy8gfVxuXG4gIGxldCBkID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gIGxldCBkMiA9XG4gICAgKHdpbmRvdy5wZXJmb3JtYW5jZSAmJlxuICAgICAgd2luZG93LnBlcmZvcm1hbmNlLm5vdyAmJlxuICAgICAgd2luZG93LnBlcmZvcm1hbmNlLm5vdygpICogMTAwMCkgfHxcbiAgICAwO1xuICBsZXQgcGF0dGVybiA9IFwidXh4eHh4eHgteHh4eC00eHh4LXl4eHgteHh4eHh4eHh4eHh4XCI7XG5cbiAgaWYgKGxlbmd0aCA8PSBwYXR0ZXJuLmxlbmd0aCkge1xuICAgIHBhdHRlcm4gPSBwYXR0ZXJuLnN1YnN0cigwLCBsZW5ndGgpO1xuICB9XG4gIGVsc2Uge1xuICAgIGxldCBhZGRfbGVuID0gbGVuZ3RoIC0gcGF0dGVybi5sZW5ndGg7XG4gICAgbGV0IHN1Yl9wYXR0ZXJuID0gXCIteHh4eXl4eHhcIjtcblxuICAgIGxldCBncm91cF9uID0gTWF0aC5mbG9vcihhZGRfbGVuIC8gc3ViX3BhdHRlcm4ubGVuZ3RoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZ3JvdXBfbjsgaSsrKSB7XG4gICAgICBwYXR0ZXJuICs9IHN1Yl9wYXR0ZXJuO1xuICAgIH1cblxuICAgIGdyb3VwX24gPSBhZGRfbGVuIC0gZ3JvdXBfbiAqIHN1Yl9wYXR0ZXJuLmxlbmd0aDtcbiAgICBwYXR0ZXJuICs9IHN1Yl9wYXR0ZXJuLnN1YnN0cigwLCBncm91cF9uKTtcbiAgfVxuXG4gIGxldCB1dWlkID0gcGF0dGVybi5yZXBsYWNlKC9beHldL2csIGZ1bmN0aW9uKGMpIHtcbiAgICB2YXIgciA9IE1hdGgucmFuZG9tKCkgKiAxNjtcbiAgICBpZiAoZCA+IDApIHtcbiAgICAgIHZhciByID0gKGQgKyByKSAlIDE2IHwgMDtcbiAgICAgIGQgPSBNYXRoLmZsb29yKGQgLyAxNik7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdmFyIHIgPSAoZDIgKyByKSAlIDE2IHwgMDtcbiAgICAgIGQyID0gTWF0aC5mbG9vcihkMiAvIDE2KTtcbiAgICB9XG4gICAgcmV0dXJuIChjID09IFwieFwiID8gciA6IChyICYgMHg3KSB8IDB4OCkudG9TdHJpbmcoMTYpO1xuICB9KTtcbiAgcmV0dXJuIHV1aWQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JlYWxUaW1lKGVsZW1lbnQsIHBhcmVudF9yZWFsVGltZSkge1xuICBsZXQgcmVhbHRpbWUgPSBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtcmVhbHRpbWVcIikgfHwgcGFyZW50X3JlYWxUaW1lO1xuICBpZiAocmVhbHRpbWUgPT09IFwiZmFsc2VcIikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGFyZW50RnJvbUVsZW1lbnQoZWxlbWVudCwgcGFyZW50X2NsYXNzLCBhdHRyaWJ1dGVzKSB7XG4gIGlmIChwYXJlbnRfY2xhc3MpIHtcbiAgICBpZiAoZWxlbWVudC5jbGFzc0xpc3QuY29udGFpbnMocGFyZW50X2NsYXNzKSkge1xuICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgfVxuXG4gICAgbGV0IG5vZGUgPSBlbGVtZW50LnBhcmVudE5vZGU7XG4gICAgd2hpbGUgKG5vZGUgIT0gbnVsbCAmJiBub2RlLmNsYXNzTGlzdCkge1xuICAgICAgaWYgKG5vZGUuY2xhc3NMaXN0LmNvbnRhaW5zKHBhcmVudF9jbGFzcykpIHtcbiAgICAgICAgcmV0dXJuIG5vZGU7XG4gICAgICB9XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnROb2RlO1xuICAgIH1cbiAgfVxuICBlbHNlIGlmIChhdHRyaWJ1dGVzKSB7XG4gICAgaWYgKGF0dHJpYnV0ZXMuZXZlcnkoKGF0dHIpID0+IGVsZW1lbnQuYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShhdHRyKSkpIHtcbiAgICAgIHJldHVybiBlbGVtZW50O1xuICAgIH1cblxuICAgIGxldCBub2RlID0gZWxlbWVudC5wYXJlbnROb2RlO1xuICAgIHdoaWxlIChub2RlICE9IG51bGwgJiYgbm9kZS5hdHRyaWJ1dGVzKSB7XG4gICAgICBpZiAoYXR0cmlidXRlcy5ldmVyeSgoYXR0cikgPT4gbm9kZS5hdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGF0dHIpKSkge1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgIH1cbiAgICAgIG5vZGUgPSBub2RlLnBhcmVudE5vZGU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNSZWFkVmFsdWUoZWxlbWVudCkge1xuICByZXR1cm4gZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLXJlYWRfdmFsdWVcIikgIT0gXCJmYWxzZVwiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNVcGRhdGVWYWx1ZShlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtdXBkYXRlX3ZhbHVlXCIpICE9IFwiZmFsc2VcIjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzSnNvblN0cmluZyhzdHJfZGF0YSkge1xuICB0cnkge1xuICAgIGxldCBqc29uX2RhdGEgPSBKU09OLnBhcnNlKHN0cl9kYXRhKTtcbiAgICBpZiAodHlwZW9mIGpzb25fZGF0YSA9PT0gXCJvYmplY3RcIiAmJiBqc29uX2RhdGEgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXR0cmlidXRlcyhlbGVtZW50KSB7XG4gIHJldHVybiBlbGVtZW50LmdldEF0dHJpYnV0ZU5hbWVzKCkucmVkdWNlKChhdHRyTWFwLCBuYW1lKSA9PiB7XG4gICAgYXR0ck1hcFtuYW1lXSA9IGVsZW1lbnQuZ2V0QXR0cmlidXRlKG5hbWUpO1xuICAgIHJldHVybiBhdHRyTWFwO1xuICB9LCB7fSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1ZhbHVlKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHJldHVybiBmYWxzZTtcbiAgaWYgKC97e1xccyooW1xcd1xcV10rKVxccyp9fS9nLnRlc3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59XG4vLyBob3NzZWlucyB1dGlsbHNcblxuLy8gZnVuY3Rpb24gdG8gZ28gdGhyb3VnaCBhbGwgZnJhbWVzXG5leHBvcnQgZnVuY3Rpb24gYWxsRnJhbWUoY2FsbGJhY2spIHtcbiAgbGV0IGFsbEZyYW1lcyA9IFt7IGRvY3VtZW50LCB3aW5kb3cgfV07XG4gIGZvciAobGV0IGZyYW1lIG9mIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJpZnJhbWVcIikpIHtcbiAgICBsZXQgZnJhbWVEb2N1bWVudCA9IGZyYW1lLmNvbnRlbnREb2N1bWVudCB8fCBmcmFtZS5jb250ZW50V2luZG93LmRvY3VtZW50O1xuICAgIGxldCBmcmFtZVdpbmRvdyA9IGZyYW1lLmNvbnRlbnRXaW5kb3c7XG4gICAgYWxsRnJhbWVzLnB1c2goe1xuICAgICAgZG9jdW1lbnQ6IGZyYW1lRG9jdW1lbnQsXG4gICAgICB3aW5kb3c6IGZyYW1lV2luZG93LFxuICAgICAgZnJhbWVFbGVtZW50OiBmcmFtZSxcbiAgICB9KTtcbiAgfVxuICBsZXQgcmVzdWx0ID0gbmV3IFNldCgpO1xuICBmb3IgKGxldCBmcmFtZSBvZiBhbGxGcmFtZXMpIHtcbiAgICBsZXQgY2FsbGJhY2tSZXN1bHQgPSBjYWxsYmFjayhmcmFtZSk7XG4gICAgaWYgKFxuICAgICAgY2FsbGJhY2tSZXN1bHQgJiZcbiAgICAgIHR5cGVvZiBjYWxsYmFja1Jlc3VsdFtTeW1ib2wuaXRlcmF0b3JdID09PSBcImZ1bmN0aW9uXCJcbiAgICApXG4gICAgICBjYWxsYmFja1Jlc3VsdC5mb3JFYWNoKChlbCkgPT4gcmVzdWx0LmFkZChlbCkpO1xuICAgIGVsc2UgaWYgKGNhbGxiYWNrUmVzdWx0KSByZXN1bHQuYWRkKGNhbGxiYWNrUmVzdWx0KTtcbiAgfVxuXG4gIHJldHVybiBBcnJheS5mcm9tKHJlc3VsdCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjc3NQYXRoKG5vZGUpIHtcbiAgbGV0IHBhdGhTcGxpdHMgPSBbXTtcbiAgZG8ge1xuICAgIGlmICghbm9kZSB8fCAhbm9kZS50YWdOYW1lKSByZXR1cm4gZmFsc2U7XG4gICAgbGV0IHBhdGhTcGxpdCA9IG5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgIGlmIChub2RlLmlkICYmIG5vZGUudGFnTmFtZSAhPT0gXCJCT0RZXCIpIHBhdGhTcGxpdCArPSBcIiNcIiArIG5vZGUuaWQ7XG5cbiAgICBpZiAobm9kZS5jbGFzc0xpc3QubGVuZ3RoICYmIG5vZGUudGFnTmFtZSAhPT0gXCJCT0RZXCIpIHtcbiAgICAgIG5vZGUuY2xhc3NMaXN0LmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGl0ZW0uaW5kZXhPZihcIjpcIikgPT09IC0xKSBwYXRoU3BsaXQgKz0gXCIuXCIgKyBpdGVtO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKG5vZGUudGFnTmFtZSAhPT0gXCJCT0RZXCIgJiYgbm9kZS5wYXJlbnROb2RlKSB7XG4gICAgICBsZXQgaW5kZXggPSBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKFxuICAgICAgICBub2RlLnBhcmVudE5vZGUuY2hpbGRyZW4sXG4gICAgICAgIG5vZGVcbiAgICAgICk7XG4gICAgICBwYXRoU3BsaXQgKz0gYDpudGgtY2hpbGQoJHtpbmRleCArIDF9KWA7XG4gICAgfVxuXG4gICAgcGF0aFNwbGl0cy51bnNoaWZ0KHBhdGhTcGxpdCk7XG4gICAgbm9kZSA9IG5vZGUucGFyZW50Tm9kZTtcbiAgfSB3aGlsZSAobm9kZS50YWdOYW1lICE9PSBcIkhUTUxcIik7XG5cbiAgcmV0dXJuIHBhdGhTcGxpdHMuam9pbihcIiA+IFwiKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFRvcE1vc3RXaW5kb3coKSB7XG4gIGxldCBwYXJlbnRXaW5kb3cgPSB3aW5kb3c7XG4gIHdoaWxlIChwYXJlbnRXaW5kb3cgIT09IHdpbmRvdy5wYXJlbnQpIHBhcmVudFdpbmRvdyA9IHdpbmRvdy5wYXJlbnQ7XG4gIHJldHVybiBwYXJlbnRXaW5kb3c7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmaW5kSWZyYW1lRnJvbUVsZW1lbnQod2luZG93T2JqZWN0LCBlbGVtZW50KSB7XG4gIGxldCBmcmFtZUVsZW1lbnQ7XG4gIGFsbEZyYW1lKChmcmFtZSkgPT4ge1xuICAgIGlmIChmcmFtZS5kb2N1bWVudC5jb250YWlucyhlbGVtZW50KSkgZnJhbWVFbGVtZW50ID0gZnJhbWUuZnJhbWVFbGVtZW50O1xuICAgIC8vIHdpbmRvdy5jYy5maW5kSWZyYW1lRnJvbUVsZW1lbnQoZnJhbWUud2luZG93LCBlbGVtZW50KTtcbiAgfSk7XG4gIHJldHVybiBmcmFtZUVsZW1lbnQ7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRJZnJhbWVGcm9tUGF0aChwYXRoKSB7XG4gIGxldCB0b3BXaW5kb3cgPSBnZXRUb3BNb3N0V2luZG93O1xuXG4gIHBhdGguZm9yRWFjaCgoc2VsZWN0b3IpID0+IHtcbiAgICBpZiAodG9wV2luZG93KSB0b3BXaW5kb3cgPSB0b3BXaW5kb3cucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gIH0pO1xuICByZXR1cm4gdG9wV2luZG93O1xufVxuLy8gRE8gTk9UIFJFTU9WRVxuXG4vLyBjb25maWdNYXRjaDogZnVuY3Rpb24qIGNvbmZpZ01hdGNoKGVsZW1lbnRDb25maWcsIGVsZW1lbnQpIHtcbi8vICAgZm9yIChsZXQgY29uZmlnIG9mIGVsZW1lbnRDb25maWcpIHtcbi8vICAgICAvLyBpZiAoIUFycmF5LmlzQXJyYXkoY29uZmlnLnNlbGVjdG9yKSlcbi8vICAgICAvLyAgIGNvbmZpZy5zZWxlY3RvciA9IFtjb25maWcuc2VsZWN0b3JdO1xuXG4vLyAgICAgaWYgKGNvbmZpZy5zZWxlY3RvciAmJiBlbGVtZW50Lm1hdGNoZXMoY29uZmlnLnNlbGVjdG9yKSkgeWllbGQgY29uZmlnO1xuLy8gICB9XG4vLyAgIHJldHVybjtcbi8vIH0sXG5leHBvcnQgZnVuY3Rpb24gY29uZmlnTWF0Y2gyKGVsZW1lbnRDb25maWcsIGVsZW1lbnQpIHtcbiAgbGV0IHJlc3VsdCA9IFtdO1xuICBmb3IgKGxldCBjb25maWcgb2YgZWxlbWVudENvbmZpZykge1xuICAgIGlmIChjb25maWcuc2VsZWN0b3IgJiYgZWxlbWVudC5tYXRjaGVzKGNvbmZpZy5zZWxlY3RvcikpIHJlc3VsdC5wdXNoKGNvbmZpZyk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gRE8gTk9UIFJFTU9WRVxuXG4vLyBhbiBvcGluaWF0ZWQgZnVuY3Rpb24gdXNlcyBjb25maWdNYXRjaDIgdG8gcmVhZCBjb25maWdzXG4vLyBXQVJOSU5HOiB0aGUgY29uZmlnIGl0ZXJhdGVkIGZyb20gdG9wIHRvIGJvdHRvbS4gZm9yIGRlc2VpcmVkIGVmZmVjdCBlbGVtZW50Q29uZmlnIHNob3VsZCBiZSByZXZlcmVzZWRcbi8vIHR5cGVvZiBlbGVtZW50Q29uZmlnOiBhcnJheSBvZiBvYmplY3RzIGFuZCBldmVyeSBvYmplY3RzIGNvbnRhaW5pbmcga2V5cyBhcyBmYWxzZSwgdHJ1ZSBvciBhIHNlbGVjdG9yIFxuLy8gZWxlbWVudDogdGhlIGVsZW1lbnQgdG8gcmVhZCBhdHRyaWJ1dGVzXG4vLyBrZXk6IHRoZSBrZXkgaW4gd2hpY2ggaXMgaW4gZWxlbWVudENvbmZpZyBhbmQgb24gbWF0Y2ggb25TdWNjZXNzIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkXG5leHBvcnQgZnVuY3Rpb24gY29uZmlnRXhlY3V0ZXIoZWxlbWVudCwga2V5LCBvblN1Y2Nlc3MsIGVsZW1lbnRDb25maWcpIHtcbiAgZm9yIChsZXQgY29uZmlnIG9mIGNvbmZpZ01hdGNoMihlbGVtZW50Q29uZmlnIHx8IHdpbmRvdy5lbGVtZW50Q29uZmlnLCBlbGVtZW50KSlcbiAgICBpZiAoY29uZmlnW2tleV0gPT09IHRydWUpIHJldHVybiBvblN1Y2Nlc3MoZWxlbWVudCwgY29uZmlnKTtcbiAgICBlbHNlIGlmIChjb25maWdba2V5XSA9PT0gZmFsc2UpIHJldHVybiBmYWxzZTtcbiAgZWxzZSBpZiAoY29uZmlnW2tleV0gPT09IHVuZGVmaW5lZCkgY29udGludWU7XG4gIGVsc2UgaWYgKGlzVmFsaWRTZWxlY3Rvcihjb25maWdba2V5XSkpXG4gICAgcmV0dXJuIG9uU3VjY2VzcyhlbGVtZW50LCBjb25maWcsIHRydWUpO1xuICBlbHNlIGNvbnNvbGUud2FybihcImJ1aWxkZXI6IHdyb25nIGVsZW1lbnQgY29uZmlnIFwiLCBjb25maWcpO1xuXG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFVVSUQobGVuZ3RoID0gMTApIHtcbiAgdmFyIHJlc3VsdCA9IFwiXCI7XG4gIHZhciBjaGFyYWN0ZXJzID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XCI7XG5cbiAgdmFyIGNoYXJhY3RlcnNMZW5ndGggPSBjaGFyYWN0ZXJzLmxlbmd0aDtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdCArPSBjaGFyYWN0ZXJzLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBjaGFyYWN0ZXJzTGVuZ3RoKSk7XG4gIH1cblxuICB2YXIgZCA9IG5ldyBEYXRlKCkudG9UaW1lU3RyaW5nKCk7XG4gIHZhciByYW5kb20gPSBkLnJlcGxhY2UoL1tcXFdfXSsvZywgXCJcIikuc3Vic3RyKDAsIDYpO1xuICByZXN1bHQgKz0gcmFuZG9tO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VUZXh0VG9IdG1sKHRleHQpIHtcbiAgbGV0IGRvYyA9IG5ldyBET01QYXJzZXIoKS5wYXJzZUZyb21TdHJpbmcodGV4dCwgXCJ0ZXh0L2h0bWxcIik7XG4gIGlmIChkb2MuaGVhZC5jaGlsZHJlblswXSkgcmV0dXJuIGRvYy5oZWFkLmNoaWxkcmVuWzBdO1xuICBlbHNlIHJldHVybiBkb2MuYm9keS5jaGlsZHJlblswXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0QnlkZWxpbWl0ZXIoc3RyLCBkZWxpbWl0ZXIpIHtcbiAgcmV0dXJuIHN0ci5zcGxpdChkZWxpbWl0ZXIpLm1hcCgocykgPT4gcy50cmltKCkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gam9pbkJ5ZGVsaW1pdGVyKHN0ciwgZGVsaW1pdGVyKSB7XG4gIHJldHVybiBzdHIubWFwKChzKSA9PiBzLnRyaW0oKSkuam9pbihkZWxpbWl0ZXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNWYWxpZFNlbGVjdG9yKHNlbGVjdG9yKSB7XG4gIHRyeSB7XG4gICAgZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xuICB9XG4gIGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEVsZW1lbnRQYXRoKGVsZW1lbnQsIHJldHVybkNvbnRleHQpIHtcbiAgbGV0IHBhdGggPSBbXTtcblxuICBsZXQgdG9wV2luZG93ID0gd2luZG93O1xuICBsZXQgaWZyYW1lRWxlbWVudCA9IGZpbmRJZnJhbWVGcm9tRWxlbWVudCh0b3BXaW5kb3csIGVsZW1lbnQpO1xuICBsZXQgcCA9IGNzc1BhdGgoaWZyYW1lRWxlbWVudCk7XG4gIGlmIChwKSBwYXRoLnVuc2hpZnQocCk7XG5cbiAgcmV0dXJuIHJldHVybkNvbnRleHQgPyB7IHBhdGgsIGRvY3VtZW50OiBpZnJhbWVFbGVtZW50IHx8IGRvY3VtZW50IH0gOiBwYXRoO1xuICAvL3RvZG86IHN1cHBvcnQgZm9yIG5lc3RlZCBpZnJhbWVcbiAgLy8gd2hpbGUoaWZyYW1lRWxlbWVudCAhPT0gZmluZElmcmFtZUZyb21FbGVtZW50KHRvcFdpbmRvdyxpZnJhbWVFbGVtZW50KSlcbiAgLy8ge1xuICAvLyAgIGlmcmFtZUVsZW1lbnQgPSBmaW5kSWZyYW1lRnJvbUVsZW1lbnQodG9wV2luZG93LGlmcmFtZUVsZW1lbnQpO1xuICAvLyAgIHBhdGgudW5zaGlmdChjc3NQYXRoKGlmcmFtZUVsZW1lbnQpKVxuICAvLyB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1VzYWdlWShpbnB1dCkge1xuICBpZiAodGhpcy5pc0pzb25TdHJpbmcoaW5wdXQuZ2V0QXR0cmlidXRlKCdkYXRhLWNvbGxlY3Rpb24nKSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBpZiAodGhpcy5pc0pzb25TdHJpbmcoaW5wdXQuZ2V0QXR0cmlidXRlKCduYW1lJykpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaWYgKChpbnB1dC50YWdOYW1lID09PSBcIklOUFVUXCIgJiYgW1widGV4dFwiLCBcImVtYWlsXCIsIFwidGVsXCIsIFwidXJsXCJdLmluY2x1ZGVzKGlucHV0LnR5cGUpKSB8fCBpbnB1dC50YWdOYW1lID09PSBcIlRFWFRBUkVBXCIpIHtcblxuICAgIGlmICghaW5wdXQuZ2V0QXR0cmlidXRlKCduYW1lJykpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGlucHV0LmdldEF0dHJpYnV0ZShcImRhdGEtcmVhbHRpbWVcIikgPT0gXCJmYWxzZVwiKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKGlucHV0LmdldEF0dHJpYnV0ZShcImRhdGEtdW5pcXVlXCIpID09PSBcInRydWVcIikge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGlmIChpbnB1dC50eXBlID09PSAncGFzc3dvcmQnKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLmlzUmVhZFZhbHVlKGlucHV0KSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaXNVc2FnZVksXG4gIGdldEVsZW1lbnRQYXRoLFxuICBpc1ZhbGlkU2VsZWN0b3IsXG4gIGpvaW5CeWRlbGltaXRlcixcbiAgc3BsaXRCeWRlbGltaXRlcixcbiAgcGFyc2VUZXh0VG9IdG1sLFxuICBVVUlELFxuICBjb25maWdFeGVjdXRlcixcbiAgY29uZmlnTWF0Y2gyLFxuICBnZXRJZnJhbWVGcm9tUGF0aCxcbiAgZmluZElmcmFtZUZyb21FbGVtZW50LFxuICBnZXRUb3BNb3N0V2luZG93LFxuICBjc3NQYXRoLFxuICBhbGxGcmFtZSxcbiAgY2hlY2tWYWx1ZSxcbiAgZ2V0QXR0cmlidXRlcyxcbiAgaXNKc29uU3RyaW5nLFxuICBpc1VwZGF0ZVZhbHVlLFxuICBpc1JlYWRWYWx1ZSxcbiAgZ2V0UGFyZW50RnJvbUVsZW1lbnQsXG4gIGlzUmVhbFRpbWUsXG4gIGdlbmVyYXRlVVVJRFxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-utlis/src/index.js\n')},"./src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _api = _interopRequireDefault(__webpack_require__(/*! @cocreate/api */ "../../CoCreate-components/CoCreate-api/src/index.js"));\n\nvar _src = __webpack_require__(/*! ../../../CoCreateJS/src */ "../../CoCreateJS/src/index.js");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateStripe = {\n  id: \'stripe\',\n  actions: [\'balanceTransaction\', \'createSourceCustomer\', \'createCustomer\', \'getBalance\', \'listCustomers\', \'createTokenCard\', \'createCustomer\', \'updateCustomer\', \'createCharge\', \'create\'],\n  render_create: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_createCharge: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_updateCustomer: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_createCustomer: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_createTokenCard: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("createTokenCard ", data);\n    CoCreate.api.render(\'createTokenCard\', data);\n  },\n  render_balanceTransaction: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_createSourceCustomer: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_getBalance: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n    CoCreate.api.render(\'getBalance\', data);\n  },\n  render_createCustomer: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n    CoCreate.api.render(\'createCustomer\', data);\n  },\n  render_listCustomers: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n    CoCreate.api.render(\'listCustomers\', data);\n  }\n};\n\n_api.default.init({\n  name: CoCreateStripe.id,\n  module: CoCreateStripe\n});\n\nvar _default = CoCreateStripe;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zdHJpcGUvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJuYW1lcyI6WyJDb0NyZWF0ZVN0cmlwZSIsImlkIiwiYWN0aW9ucyIsInJlbmRlcl9jcmVhdGUiLCJkYXRhIiwib2JqZWN0IiwiYWxlcnQiLCJjb25zb2xlIiwibG9nIiwicmVuZGVyX2NyZWF0ZUNoYXJnZSIsInJlbmRlcl91cGRhdGVDdXN0b21lciIsInJlbmRlcl9jcmVhdGVDdXN0b21lciIsInJlbmRlcl9jcmVhdGVUb2tlbkNhcmQiLCJDb0NyZWF0ZSIsImFwaSIsInJlbmRlciIsInJlbmRlcl9iYWxhbmNlVHJhbnNhY3Rpb24iLCJyZW5kZXJfY3JlYXRlU291cmNlQ3VzdG9tZXIiLCJyZW5kZXJfZ2V0QmFsYW5jZSIsInJlbmRlcl9saXN0Q3VzdG9tZXJzIiwiaW5pdCIsIm5hbWUiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUdBLE1BQU1BLGNBQWMsR0FBRztBQUN0QkMsSUFBRSxFQUFFLFFBRGtCO0FBRXRCQyxTQUFPLEVBQUUsQ0FDUCxvQkFETyxFQUVQLHNCQUZPLEVBR1AsZ0JBSE8sRUFJUCxZQUpPLEVBS1AsZUFMTyxFQU1QLGlCQU5PLEVBT1AsZ0JBUE8sRUFRUCxnQkFSTyxFQVNQLGNBVE8sRUFVUCxRQVZPLENBRmE7QUFnQnRCQyxlQUFhLEVBQUUsVUFBU0MsSUFBVCxFQUFlO0FBQ3hCLFFBQUlBLElBQUksQ0FBQ0MsTUFBTCxJQUFlLE9BQW5CLEVBQTRCO0FBQ3ZCQyxXQUFLLENBQUNGLElBQUksQ0FBQ0EsSUFBTixDQUFMO0FBQ0g7O0FBQ0ZBLFFBQUksR0FBRztBQUFDQSxVQUFJLEVBQUVBO0FBQVAsS0FBUDtBQUNBRyxXQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaLEVBQW9CSixJQUFwQjtBQUNMLEdBdEJxQjtBQXVCdEJLLHFCQUFtQixFQUFFLFVBQVNMLElBQVQsRUFBZTtBQUM5QixRQUFJQSxJQUFJLENB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QUVBO0FBQVAsS0FBUDtBQUNBRyxXQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaLEVBQW9CSixJQUFwQjtBQUNEUyxZQUFRLENBQUNDLEdBQVQsQ0FBYUMsTUFBYixDQUFvQixnQkFBcEIsRUFBc0NYLElBQXRDO0FBQ0osR0FuRnFCO0FBb0Z0QmUsc0JBQW9CLEVBQUUsVUFBU2YsSUFBVCxFQUFlO0FBQy9CLFFBQUlBLElBQUksQ0FBQ0MsTUFBTCxJQUFlLE9BQW5CLEVBQTRCO0FBQ3ZCQyxXQUFLLENBQUNGLElBQUksQ0FBQ0EsSUFBTixDQUFMO0FBQ0g7O0FBQ0ZBLFFBQUksR0FBRztBQUFDQSxVQUFJLEVBQUVBO0FBQVAsS0FBUDtBQUNBRyxXQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaLEVBQW9CSixJQUFwQjtBQUNEUyxZQUFRLENBQUNDLEdBQVQsQ0FBYUMsTUFBYixDQUFvQixlQUFwQixFQUFxQ1gsSUFBckM7QUFDSjtBQTNGcUIsQ0FBdkI7O0FBOEZBVSxhQUFJTSxJQUFKLENBQVM7QUFDUkMsTUFBSSxFQUFFckIsY0FBYyxDQUFDQyxFQURiO0FBRVJxQixRQUFNLEVBQUV0QjtBQUZBLENBQVQ7O2VBS2VBLGMiLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXBpIGZyb20gJ0Bjb2NyZWF0ZS9hcGknXG5pbXBvcnQge3NvY2tldCwgY3J1ZH0gZnJvbSAnLi4vLi4vLi4vQ29DcmVhdGVKUy9zcmMnO1xuXG5cbmNvbnN0IENvQ3JlYXRlU3RyaXBlID0ge1xuXHRpZDogJ3N0cmlwZScsXG5cdGFjdGlvbnM6IFtcblx0ICAnYmFsYW5jZVRyYW5zYWN0aW9uJyxcblx0ICAnY3JlYXRlU291cmNlQ3VzdG9tZXInLFxuXHQgICdjcmVhdGVDdXN0b21lcicsXG5cdCAgJ2dldEJhbGFuY2UnLFxuXHQgICdsaXN0Q3VzdG9tZXJzJyxcblx0ICAnY3JlYXRlVG9rZW5DYXJkJyxcblx0ICAnY3JlYXRlQ3VzdG9tZXInLFxuXHQgICd1cGRhdGVDdXN0b21lcicsXG5cdCAgJ2NyZWF0ZUNoYXJnZScsXG5cdCAgJ2NyZWF0ZSdcblx0XSxcblx0XG5cdFxuXHRyZW5kZXJfY3JlYXRlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgaWYgKGRhdGEub2JqZWN0ID09IFwiZXJyb3JcIikge1xuICAgICAgICAgICAgYWxlcnQoZGF0YS5kYXRhKVxuICAgICAgICB9XG4gICAgICAgZGF0YSA9IHtkYXRhOiBkYXRhfTtcbiAgICAgICBjb25zb2xlLmxvZyhcImRhdGEgXCIsZGF0YSlcblx0fSxcblx0cmVuZGVyX2NyZWF0ZUNoYXJnZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgIGlmIChkYXRhLm9iamVjdCA9PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGFsZXJ0KGRhdGEuZGF0YSlcbiAgICAgICAgfVxuICAgICAgIGRhdGEgPSB7ZGF0YTogZGF0YX07XG4gICAgICAgY29uc29sZS5sb2coXCJkYXRhIFwiLGRhdGEpXG5cdH0sXG5cdHJlbmRlcl91cGRhdGVDdXN0b21lcjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgIGlmIChkYXRhLm9iamVjdCA9PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGFsZXJ0KGRhdGEuZGF0YSlcbiAgICAgICAgfVxuICAgICAgIGRhdGEgPSB7ZGF0YTogZGF0YX07XG4gICAgICAgY29uc29sZS5sb2coXCJkYXRhIFwiLGRhdGEpXG5cdH0sXG5cdFxuXHRyZW5kZXJfY3JlYXRlQ3VzdG9tZXI6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICBpZiAoZGF0YS5vYmplY3QgPT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICBhbGVydChkYXRhLmRhdGEpXG4gICAgICAgIH1cbiAgICAgICBkYXRhID0ge2RhdGE6IGRhdGF9O1xuICAgICAgIGNvbnNvbGUubG9nKFwiZGF0YSBcIixkYXRhKVxuXHR9LFxuXHRcblx0cmVuZGVyX2NyZWF0ZVRva2VuQ2FyZDogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgIGlmIChkYXRhLm9iamVjdCA9PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGFsZXJ0KGRhdGEuZGF0YSlcbiAgICAgICAgfVxuICAgICAgIGRhdGEgPSB7ZGF0YTogZGF0YX07XG4gICAgICAgY29uc29sZS5sb2coXCJjcmVhdGVUb2tlbkNhcmQgXCIsZGF0YSlcbiAgICAgICBDb0NyZWF0ZS5hcGkucmVuZGVyKCdjcmVhdGVUb2tlbkNhcmQnLCBkYXRhKTtcblx0fSxcblx0cmVuZGVyX2JhbGFuY2VUcmFuc2FjdGlvbjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgIGlmIChkYXRhLm9iamVjdCA9PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGFsZXJ0KGRhdGEuZGF0YSlcbiAgICAgICAgfVxuICAgICAgIGRhdGEgPSB7ZGF0YTogZGF0YX07XG4gICAgICAgY29uc29sZS5sb2coXCJkYXRhIFwiLGRhdGEpXG5cdH0sXG5cdHJlbmRlcl9jcmVhdGVTb3VyY2VDdXN0b21lcjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgIGlmIChkYXRhLm9iamVjdCA9PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGFsZXJ0KGRhdGEuZGF0YSlcbiAgICAgICAgfVxuICAgICAgIGRhdGEgPSB7ZGF0YTogZGF0YX07XG4gICAgICAgY29uc29sZS5sb2coXCJkYXRhIFwiLGRhdGEpXG5cdH0sXG5cdHJlbmRlcl9nZXRCYWxhbmNlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgaWYgKGRhdGEub2JqZWN0ID09IFwiZXJyb3JcIikge1xuICAgICAgICAgICAgYWxlcnQoZGF0YS5kYXRhKVxuICAgICAgICB9XG4gICAgICAgZGF0YSA9IHtkYXRhOiBkYXRhfTtcbiAgICAgICBjb25zb2xlLmxvZyhcImRhdGEgXCIsZGF0YSlcbiAgICAgICAgQ29DcmVhdGUuYXBpLnJlbmRlcignZ2V0QmFsYW5jZScsIGRhdGEpO1xuXHR9LFxuXHRyZW5kZXJfY3JlYXRlQ3VzdG9tZXI6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICBpZiAoZGF0YS5vYmplY3QgPT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICBhbGVydChkYXRhLmRhdGEpXG4gICAgICAgIH1cbiAgICAgICBkYXRhID0ge2RhdGE6IGRhdGF9O1xuICAgICAgIGNvbnNvbGUubG9nKFwiZGF0YSBcIixkYXRhKVxuICAgICAgQ29DcmVhdGUuYXBpLnJlbmRlcignY3JlYXRlQ3VzdG9tZXInLCBkYXRhKTtcblx0fSxcblx0cmVuZGVyX2xpc3RDdXN0b21lcnM6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICBpZiAoZGF0YS5vYmplY3QgPT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICBhbGVydChkYXRhLmRhdGEpXG4gICAgICAgIH1cbiAgICAgICBkYXRhID0ge2RhdGE6IGRhdGF9O1xuICAgICAgIGNvbnNvbGUubG9nKFwiZGF0YSBcIixkYXRhKVxuICAgICAgQ29DcmVhdGUuYXBpLnJlbmRlcignbGlzdEN1c3RvbWVycycsIGRhdGEpO1xuXHR9LFxufVxuXG5hcGkuaW5pdCh7XG5cdG5hbWU6IENvQ3JlYXRlU3RyaXBlLmlkLCBcblx0bW9kdWxlOlx0Q29DcmVhdGVTdHJpcGUsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQ29DcmVhdGVTdHJpcGU7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n')},"../../CoCreateJS/src/core.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = core;\n// ***********   define variables end ***************** /// \nconst CoCreateCore = {\n  socketInitFuncs: [],\n  moduleSelectors: [],\n  socket: null,\n  host: 'server.cocreate.app',\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n  init: function (host, namespace) {\n    if (host) {\n      this.host = host;\n    }\n\n    this.__setConfig();\n\n    this.createGeneralSocket(host, namespace || config.organization_Id);\n    this.initSocketListener();\n    this.createUserSocket(host);\n  },\n  __setConfig: function () {\n    let orgId = window.localStorage.getItem('organization_id');\n    let securityKey = window.localStorage.getItem('securityKey');\n    let apiKey = window.localStorage.getItem('apiKey');\n    if (orgId) config['organization_Id'] = orgId;\n    if (apiKey) config['apiKey'] = apiKey;\n    if (securityKey) config['securityKey'] = securityKey;\n  },\n  initSocketListener: function () {\n    const self = this;\n    this.socket.listen('connect', function (data, room) {\n      if (room == self.socket.getGlobalScope()) {\n        self.socketInitFuncs.forEach(func => {\n          func.initFunc.call(func.instance);\n        });\n      }\n    });\n    this.socket.listen('readDocument', function (data) {\n      const metadata = data.metadata; // if (metadata && metadata.type == 'crdt') {\n      //   self.initRenderCrdtData(data);\n      // } else {\n      //   // self.renderModules(data)\n      // }\n\n      return data;\n    });\n    this.socket.listen('updateDocument', function (data) {// self.renderModules(data)\n    });\n    this.socket.listen('deletedDocument', function (data) {\n      console.log(data);\n    });\n    this.socket.listen('sendMessage', function (data) {\n      console.log(data);\n    });\n    this.listenMessage('downloadFileInfo', function (data) {\n      self.socket.saveFileName = data.file_name;\n    });\n  },\n  createUserSocket: function (host) {\n    var user_id = window.localStorage.getItem('user_id');\n\n    if (user_id) {\n      this.socket.create({\n        namespace: 'users',\n        room: user_id,\n        host: host\n      });\n    }\n  },\n  createGeneralSocket: function (host, namespace) {\n    if (namespace) {\n      this.socket.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n      this.socket.setGlobalScope(namespace);\n    } else {\n      this.socket.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  },\n  registerInit: function (initFunc, instance) {\n    this.socketInitFuncs.push({\n      initFunc,\n      instance: instance || window\n    });\n  },\n  // registerSelector: function(selector) {\n  //   if (this.moduleSelectors.indexOf(selector) === -1) {\n  //     this.moduleSelectors.push(selector);\n  //   }\n  // },\n  // getSelectors: function(selector) {\n  //   return this.moduleSelectors.join(\",\");\n  // },\n  listenMessage: function (message, fun) {\n    this.socket.listen(message, fun);\n  },\n  createSocket: function (config) {\n    this.socket.create(config);\n  },\n  destroySocket: function (config) {\n    const {\n      namespace,\n      room\n    } = config;\n    const key = this.socket.getKey(namespace, room);\n    let socket = this.socket.sockets.get(key);\n\n    if (!socket) {\n      return;\n    }\n\n    this.socket.destroy(socket, key);\n  }\n};\n\nfunction core(socket) {\n  CoCreateCore.setSocket(socket);\n  return CoCreateCore;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zdHJpcGUvLi4vQ29DcmVhdGVKUy9zcmMvY29yZS5qcz9jZDFhIl0sIm5hbWVzIjpbIkNvQ3JlYXRlQ29yZSIsInNvY2tldEluaXRGdW5jcyIsIm1vZHVsZVNlbGVjdG9ycyIsInNvY2tldCIsImhvc3QiLCJzZXRTb2NrZXQiLCJpbml0IiwibmFtZXNwYWNlIiwiX19zZXRDb25maWciLCJjcmVhdGVHZW5lcmFsU29ja2V0IiwiY29uZmlnIiwib3JnYW5pemF0aW9uX0lkIiwiaW5pdFNvY2tldExpc3RlbmVyIiwiY3JlYXRlVXNlclNvY2tldCIsIm9yZ0lkIiwid2luZG93IiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsInNlY3VyaXR5S2V5IiwiYXBpS2V5Iiwic2VsZiIsImxpc3RlbiIsImRhdGEiLCJyb29tIiwiZ2V0R2xvYmFsU2NvcGUiLCJmb3JFYWNoIiwiZnVuYyIsImluaXRGdW5jIiwiY2FsbCIsImluc3RhbmNlIiwibWV0YWRhdGEiLCJjb25zb2xlIiwibG9nIiwibGlzdGVuTWVzc2FnZSIsInNhdmVGaWxlTmFtZSIsImZpbGVfbmFtZSIsInVzZXJfaWQiLCJjcmVhdGUiLCJzZXRHbG9iYWxTY29wZSIsInJlZ2lzdGVySW5pdCIsInB1c2giLCJtZXNzYWdlIiwiZnVuIiwiY3JlYXRlU29ja2V0IiwiZGVzdHJveVNvY2tldCIsImtleSIsImdldEtleSIsInNvY2tldHMiLCJnZXQiLCJkZXN0cm95IiwiY29yZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUE7QUFFQSxNQUFNQSxZQUFZLEdBQUc7QUFDbkJDLGlCQUFlLEVBQUUsRUFERTtBQUVuQkMsaUJBQWUsRUFBRSxFQUZFO0FBR25CQyxRQUFNLEVBQUUsSUFIVztBQUluQkMsTUFBSSxFQUFFLHFCQUphO0FBTW5CQyxXQUFTLEVBQUUsVUFBU0YsTUFBVCxFQUFpQjtBQUMxQixTQUFLQSxNQUFMLEdBQWNBLE1BQWQ7QUFDRCxHQVJrQjtBQVduQkcsTUFBSSxFQUFF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LE1BQUwsQ0FBWTJDLE1BQVosQ0FBbUJ2QyxTQUFuQixFQUE4QmdCLElBQTlCLENBQVo7QUFDQSxRQUFJcEIsTUFBTSxHQUFHLEtBQUtBLE1BQUwsQ0FBWTRDLE9BQVosQ0FBb0JDLEdBQXBCLENBQXdCSCxHQUF4QixDQUFiOztBQUVBLFFBQUksQ0FBQzFDLE1BQUwsRUFBYTtBQUNYO0FBQ0Q7O0FBQ0QsU0FBS0EsTUFBTCxDQUFZOEMsT0FBWixDQUFvQjlDLE1BQXBCLEVBQTRCMEMsR0FBNUI7QUFDRDtBQXJJbUIsQ0FBckI7O0FBd0llLFNBQVNLLElBQVQsQ0FBYy9DLE1BQWQsRUFBc0I7QUFDbkNILGNBQVksQ0FBQ0ssU0FBYixDQUF1QkYsTUFBdkI7QUFDQSxTQUFPSCxZQUFQO0FBQ0QiLCJmaWxlIjoiLi4vLi4vQ29DcmVhdGVKUy9zcmMvY29yZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vICoqKioqKioqKioqICAgZGVmaW5lIHZhcmlhYmxlcyBlbmQgKioqKioqKioqKioqKioqKiogLy8vIFxuXG5jb25zdCBDb0NyZWF0ZUNvcmUgPSB7XG4gIHNvY2tldEluaXRGdW5jczogW10sXG4gIG1vZHVsZVNlbGVjdG9yczogW10sXG4gIHNvY2tldDogbnVsbCxcbiAgaG9zdDogJ3NlcnZlci5jb2NyZWF0ZS5hcHAnLFxuICBcbiAgc2V0U29ja2V0OiBmdW5jdGlvbihzb2NrZXQpIHtcbiAgICB0aGlzLnNvY2tldCA9IHNvY2tldDtcbiAgfSxcblxuICBcbiAgaW5pdDogZnVuY3Rpb24oaG9zdCwgbmFtZXNwYWNlKSB7XG4gICAgaWYgKGhvc3QpIHtcbiAgICAgIHRoaXMuaG9zdCA9IGhvc3Q7XG4gICAgfVxuICAgIFxuICAgIHRoaXMuX19zZXRDb25maWcoKVxuICAgIHRoaXMuY3JlYXRlR2VuZXJhbFNvY2tldChob3N0LCBuYW1lc3BhY2UgfHwgY29uZmlnLm9yZ2FuaXphdGlvbl9JZCk7XG4gICAgdGhpcy5pbml0U29ja2V0TGlzdGVuZXIoKTtcbiAgICB0aGlzLmNyZWF0ZVVzZXJTb2NrZXQoaG9zdCk7XG4gIH0sXG4gIFxuICBfX3NldENvbmZpZzogZnVuY3Rpb24oKSB7XG5cdFx0bGV0IG9yZ0lkID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCdvcmdhbml6YXRpb25faWQnKTtcblx0XHRsZXQgc2VjdXJpdHlLZXkgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3NlY3VyaXR5S2V5Jyk7XG5cdFx0bGV0IGFwaUtleSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnYXBpS2V5Jyk7XG5cdFx0XG5cdFx0aWYgKG9yZ0lkKSAgICAgICAgY29uZmlnWydvcmdhbml6YXRpb25fSWQnXSA9IG9yZ0lkXG5cdFx0aWYgKGFwaUtleSkgICAgICAgY29uZmlnWydhcGlLZXknXSA9IGFwaUtleVxuXHRcdGlmIChzZWN1cml0eUtleSkgIGNvbmZpZ1snc2VjdXJpdHlLZXknXSA9IHNlY3VyaXR5S2V5O1xuICB9LFxuICBcbiAgaW5pdFNvY2tldExpc3RlbmVyOiBmdW5jdGlvbigpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICBcbiAgICB0aGlzLnNvY2tldC5saXN0ZW4oJ2Nvbm5lY3QnLCBmdW5jdGlvbiAoZGF0YSwgcm9vbSkge1xuICAgICAgXG4gICAgICBpZiAocm9vbSA9PSBzZWxmLnNvY2tldC5nZXRHbG9iYWxTY29wZSgpKSB7XG4gICAgICAgIHNlbGYuc29ja2V0SW5pdEZ1bmNzLmZvckVhY2goKGZ1bmMpID0+IHtcbiAgICAgICAgICBmdW5jLmluaXRGdW5jLmNhbGwoZnVuYy5pbnN0YW5jZSk7XG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSlcbiAgICBcbiAgICB0aGlzLnNvY2tldC5saXN0ZW4oJ3JlYWREb2N1bWVudCcsIGZ1bmN0aW9uKGRhdGEpe1xuICAgICAgY29uc3QgbWV0YWRhdGEgPSBkYXRhLm1ldGFkYXRhO1xuICAgICAgLy8gaWYgKG1ldGFkYXRhICYmIG1ldGFkYXRhLnR5cGUgPT0gJ2NyZHQnKSB7XG4gICAgICAvLyAgIHNlbGYuaW5pdFJlbmRlckNyZHREYXRhKGRhdGEpO1xuICAgICAgLy8gfSBlbHNlIHtcbiAgICAgIC8vICAgLy8gc2VsZi5yZW5kZXJNb2R1bGVzKGRhdGEpXG4gICAgICAvLyB9XG4gICAgICByZXR1cm4gZGF0YTtcbiAgICB9KVxuICAgIFxuICAgIHRoaXMuc29ja2V0Lmxpc3RlbigndXBkYXRlRG9jdW1lbnQnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAvLyBzZWxmLnJlbmRlck1vZHVsZXMoZGF0YSlcbiAgICB9KVxuICAgIFxuICAgIHRoaXMuc29ja2V0Lmxpc3RlbignZGVsZXRlZERvY3VtZW50JywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgfSlcbiAgICBcbiAgICB0aGlzLnNvY2tldC5saXN0ZW4oJ3NlbmRNZXNzYWdlJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgY29uc29sZS5sb2coZGF0YSk7XG4gICAgfSlcbiAgICBcbiAgICB0aGlzLmxpc3Rlbk1lc3NhZ2UoJ2Rvd25sb2FkRmlsZUluZm8nLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICBzZWxmLnNvY2tldC5zYXZlRmlsZU5hbWUgPSBkYXRhLmZpbGVfbmFtZTtcbiAgICB9KVxuICAgIFxuICB9LFxuICBcbiAgY3JlYXRlVXNlclNvY2tldDogZnVuY3Rpb24oaG9zdCkge1xuICAgIHZhciB1c2VyX2lkID0gd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCd1c2VyX2lkJyk7XG4gICAgaWYgKHVzZXJfaWQpIHtcbiAgICAgIHRoaXMuc29ja2V0LmNyZWF0ZSh7XG4gICAgICAgIG5hbWVzcGFjZTogJ3VzZXJzJyxcbiAgICAgICAgcm9vbTogdXNlcl9pZCxcbiAgICAgICAgaG9zdDogaG9zdFxuICAgICAgfSlcbiAgICB9XG4gIH0sXG4gIFxuICBjcmVhdGVHZW5lcmFsU29ja2V0OiBmdW5jdGlvbihob3N0LCBuYW1lc3BhY2UpIHtcbiAgICBpZiAobmFtZXNwYWNlKSB7XG4gICAgXHR0aGlzLnNvY2tldC5jcmVhdGUoe1xuICAgIFx0ICBuYW1lc3BhY2U6IG5hbWVzcGFjZSwgXG4gICAgXHQgIHJvb206IG51bGwsXG4gICAgXHQgIGhvc3Q6IGhvc3RcbiAgICBcdH0pO1xuICAgIFx0dGhpcy5zb2NrZXQuc2V0R2xvYmFsU2NvcGUobmFtZXNwYWNlKTtcbiAgICB9IGVsc2Uge1xuICAgIFx0dGhpcy5zb2NrZXQuY3JlYXRlKHtcbiAgICBcdCAgbmFtZXNwYWNlOiBudWxsLCBcbiAgICBcdCAgcm9vbTogbnVsbCxcbiAgICBcdCAgaG9zdDogaG9zdFxuICAgIFx0fSk7XG4gICAgfVxuICB9LFxuICBcbiAgcmVnaXN0ZXJJbml0OiBmdW5jdGlvbihpbml0RnVuYywgaW5zdGFuY2UpIHtcbiAgICB0aGlzLnNvY2tldEluaXRGdW5jcy5wdXNoKHtcbiAgICAgIGluaXRGdW5jLFxuICAgICAgaW5zdGFuY2UgOiBpbnN0YW5jZSB8fCB3aW5kb3dcbiAgICB9KTtcbiAgfSxcbiAgLy8gcmVnaXN0ZXJTZWxlY3RvcjogZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAgLy8gICBpZiAodGhpcy5tb2R1bGVTZWxlY3RvcnMuaW5kZXhPZihzZWxlY3RvcikgPT09IC0xKSB7XG4gIC8vICAgICB0aGlzLm1vZHVsZVNlbGVjdG9ycy5wdXNoKHNlbGVjdG9yKTtcbiAgLy8gICB9XG4gIC8vIH0sXG4gIFxuICAvLyBnZXRTZWxlY3RvcnM6IGZ1bmN0aW9uKHNlbGVjdG9yKSB7XG4gIC8vICAgcmV0dXJuIHRoaXMubW9kdWxlU2VsZWN0b3JzLmpvaW4oXCIsXCIpO1xuICAvLyB9LFxuXG4gIGxpc3Rlbk1lc3NhZ2U6IGZ1bmN0aW9uKG1lc3NhZ2UsIGZ1bikge1xuICAgIHRoaXMuc29ja2V0Lmxpc3RlbihtZXNzYWdlLCBmdW4pO1xuICB9LFxuIFxuIGNyZWF0ZVNvY2tldDogZnVuY3Rpb24oY29uZmlnKSB7XG4gICB0aGlzLnNvY2tldC5jcmVhdGUoY29uZmlnKTtcbiB9LFxuIFxuIGRlc3Ryb3lTb2NrZXQ6IGZ1bmN0aW9uKGNvbmZpZykge1xuICAgY29uc3Qge25hbWVzcGFjZSwgcm9vbX0gPSBjb25maWc7XG4gICBjb25zdCBrZXkgPSB0aGlzLnNvY2tldC5nZXRLZXkobmFtZXNwYWNlLCByb29tKTtcbiAgIGxldCBzb2NrZXQgPSB0aGlzLnNvY2tldC5zb2NrZXRzLmdldChrZXkpO1xuICAgXG4gICBpZiAoIXNvY2tldCkge1xuICAgICByZXR1cm5cbiAgIH1cbiAgIHRoaXMuc29ja2V0LmRlc3Ryb3koc29ja2V0LCBrZXkpO1xuIH0sXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvcmUoc29ja2V0KSB7XG4gIENvQ3JlYXRlQ29yZS5zZXRTb2NrZXQoc29ja2V0KTtcbiAgcmV0dXJuIENvQ3JlYXRlQ29yZTtcbn1cblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/core.js\n")},"../../CoCreateJS/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.addComponent = addComponent;\nexports.removeComponent = removeComponent;\nexports.utils = exports.message = exports.socket = exports.core = void 0;\n\nvar _socket = _interopRequireDefault(__webpack_require__(/*! @cocreate/socket */ "../../CoCreate-components/CoCreate-socket/src/index.js"));\n\nvar _core = _interopRequireDefault(__webpack_require__(/*! ./core.js */ "../../CoCreateJS/src/core.js"));\n\nvar utils = _interopRequireWildcard(__webpack_require__(/*! @cocreate/utils */ "../../CoCreate-components/CoCreate-utlis/src/index.js"));\n\nexports.utils = utils;\n\nvar _message = _interopRequireDefault(__webpack_require__(/*! @cocreate/message */ "../../CoCreate-components/CoCreate-message/src/index.js"));\n\nvar _crud = _interopRequireDefault(__webpack_require__(/*! @cocreate/crud */ "../../CoCreate-components/CoCreate-crud/src/index.js"));\n\nfunction _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/*global window*/\nlet socket = new _socket.default(\'ws\'); // let socketApi = new CoCreateSocket(\'api\');\n\nexports.socket = socket;\nlet core = (0, _core.default)(socket); // let crud = CRUD(socket)\n\nexports.core = core;\nlet message = (0, _message.default)(socket);\nexports.message = message;\ncore.init(window.config.host ? window.config.host : \'server.cocreate.app\');\n\nfunction addComponent(key, component) {\n  this[key] = component;\n}\n\nfunction removeComponent(key) {\n  if (this[key]) {}\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zdHJpcGUvLi4vQ29DcmVhdGVKUy9zcmMvaW5kZXguanM/Mjg5YSJdLCJuYW1lcyI6WyJzb2NrZXQiLCJDb0NyZWF0ZVNvY2tldCIsImNvcmUiLCJtZXNzYWdlIiwiaW5pdCIsIndpbmRvdyIsImNvbmZpZyIsImhvc3QiLCJhZGRDb21wb25lbnQiLCJrZXkiLCJjb21wb25lbnQiLCJyZW1vdmVDb21wb25lbnQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUNBOztBQUNBOztBQUNBOzs7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBTEE7QUFPQSxJQUFJQSxNQUFNLEdBQUcsSUFBSUMsZUFBSixDQUFtQixJQUFuQixDQUFiLEMsQ0FDQTs7O0FBRUEsSUFBSUMsSUFBSSxHQUFHLG1CQUFLRixNQUFMLENBQVgsQyxDQUNBOzs7QUFDQSxJQUFJRyxPQUFPLEdBQUcsc0JBQVFILE1BQVIsQ0FBZDs7QUFFQUUsSUFBSSxDQUFDRSxJQUFMLENBQVVDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjQyxJQUFkLEdBQXFCRixNQUFNLENBQUNDLE1BQVAsQ0FBY0MsSUFBbkMsR0FBMEMscUJBQXBEOztBQUVBLFNBQVNDLFlBQVQsQ0FBc0JDLEdBQXRCLEVBQTJCQyxTQUEzQixFQUFzQztBQUNsQyxPQUFLRCxHQUFMLElBQVlDLFNBQVo7QUFDSDs7QUFFRCxTQUFTQyxlQUFULENBQXlCRixHQUF6QixFQUE4QjtBQUMxQixNQUFJLEtBQUtBLEdBQUwsQ0FBSixFQUFlLENBRWQ7QUFDSiIsImZpbGUiOiIuLi8uLi9Db0NyZWF0ZUpTL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qZ2xvYmFsIHdpbmRvdyovXG5pbXBvcnQgQ29DcmVhdGVTb2NrZXQgZnJvbSBcIkBjb2NyZWF0ZS9zb2NrZXRcIlxuaW1wb3J0IENvcmUgZnJvbSBcIi4vY29yZS5qc1wiXG5pbXBvcnQgKiBhcyB1dGlscyBmcm9tIFwiQGNvY3JlYXRlL3V0aWxzXCJcbmltcG9ydCBNZXNzYWdlIGZyb20gXCJAY29jcmVhdGUvbWVzc2FnZVwiXG5pbXBvcnQgQ1JVRCBmcm9tIFwiQGNvY3JlYXRlL2NydWRcIlxuXG5sZXQgc29ja2V0ID0gbmV3IENvQ3JlYXRlU29ja2V0KCd3cycpO1xuLy8gbGV0IHNvY2tldEFwaSA9IG5ldyBDb0NyZWF0ZVNvY2tldCgnYXBpJyk7XG5cbmxldCBjb3JlID0gQ29yZShzb2NrZXQpXG4vLyBsZXQgY3J1ZCA9IENSVUQoc29ja2V0KVxubGV0IG1lc3NhZ2UgPSBNZXNzYWdlKHNvY2tldClcblxuY29yZS5pbml0KHdpbmRvdy5jb25maWcuaG9zdCA/IHdpbmRvdy5jb25maWcuaG9zdCA6ICdzZXJ2ZXIuY29jcmVhdGUuYXBwJyk7XG5cbmZ1bmN0aW9uIGFkZENvbXBvbmVudChrZXksIGNvbXBvbmVudCkge1xuICAgIHRoaXNba2V5XSA9IGNvbXBvbmVudDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ29tcG9uZW50KGtleSkge1xuICAgIGlmICh0aGlzW2tleV0pIHtcblxuICAgIH1cbn1cblxuZXhwb3J0IHtcbiAgICBjb3JlLFxuICAgIHNvY2tldCxcbiAgICAvLyBjcnVkLFxuICAgIHV0aWxzLFxuICAgIG1lc3NhZ2UsXG4gICAgYWRkQ29tcG9uZW50LFxuICAgIHJlbW92ZUNvbXBvbmVudFxufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/index.js\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.exports}var __webpack_exports__=__webpack_require__("./src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));