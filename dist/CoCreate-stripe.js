/*! For license information please see CoCreate-stripe.js.LICENSE.txt */
!function(Q,F){"object"==typeof exports&&"object"==typeof module?module.exports=F():"function"==typeof define&&define.amd?define([],F):"object"==typeof exports?exports.CoCreate=F():(Q.CoCreate=Q.CoCreate||{},Q.CoCreate.stripe=F())}(this,(function(){return(()=>{"use strict";var __webpack_modules__={"../../CoCreate-components/CoCreate-action/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n// -testing1\nconst CoCreateAction = {\n  attribute: 'data-actions',\n  actions: {},\n  selectedStage: [],\n  stageIndex: 0,\n  selectedElement: null,\n  completedEventName: 'completedEvent',\n  __init: function () {\n    this.actionButtonEvent();\n  },\n  // init: function(container) {\n  //   const __container = container || document\n  //   if (!__container.querySelectorAll) {\n  // \treturn;\n  // }\n  // let buttons = __container.querySelectorAll(\"[data-actions]\");\n  // for (let i = 0; i < buttons.length; i++) {\n  //   this.actionButtonEvent(buttons[i]);\n  // }\n  // },\n  // actionButtonEvent: function(btn) {\n  //   const _this = this;    \n  // let checkActions = btn.getAttribute('data-actions') || \"\";\n  // checkActions = checkActions.replace(/\\s/g, '').split(',');\n  // if (checkActions.length == 0) {\n  //   return;\n  // }\n  //   btn.addEventListener('click', function(event) {\n  //     event.preventDefault();\n  //     let actions = this.getAttribute(_this.attribute) || \"\";\n  //     actions = actions.replace(/\\s/g, '').split(',');\n  //     _this.stageIndex = 0;\n  //     _this.selectedStage = actions;\n  //     //. run function\n  //     _this.selectedElement = btn;\n  //     _this.__runActionFunc();\n  //   })\n  // },\n  actionButtonEvent: function () {\n    const self = this;\n    document.addEventListener('click', function (event) {\n      let btn = event.target;\n\n      if (!btn.getAttribute('data-actions')) {\n        btn = event.target.closest('[data-actions]');\n      }\n\n      if (!btn) return;\n      event.preventDefault();\n      let actions = (btn.getAttribute(self.attribute) || \"\").replace(/\\s/g, '').split(',');\n      if (actions.length == 0) return;\n      self.stageIndex = 0;\n      self.selectedStage = actions; //. run function\n\n      self.selectedElement = btn;\n\n      self.__runActionFunc();\n    });\n  },\n  init: function ({\n    action,\n    callback,\n    endEvent\n  }) {\n    this.registerEvent(action, callback, null, endEvent);\n  },\n\n  /**\n   * key: string\n   * runFunc: function\n   * instance: object\n   * endEvent: string\n   **/\n  registerEvent: function (key, runFunc, instance, endEvent) {\n    if (this.actions[key]) {\n      return;\n    }\n\n    this.actions[key] = {\n      key: key,\n      runFunc: runFunc,\n      instance: instance || window,\n      endEvent: endEvent\n    }; //. register events\n\n    for (let __key in this.actions) {\n      if (__key != key && this.actions[__key]['endEvent'] === endEvent) {\n        return;\n      }\n    } //. register events\n\n\n    const _this = this;\n\n    document.addEventListener(endEvent, function (e) {\n      _this.__nextAction(endEvent, e.detail);\n    });\n  },\n  __runActionFunc: function (data) {\n    if (this.stageIndex >= this.selectedStage.length) {\n      //. if latest case, it will be run aTag\n      if (this.stageIndex == this.selectedStage.length) {\n        this.__runAtag(this.selectedElement);\n      }\n\n      return;\n    }\n\n    const key = this.selectedStage[this.stageIndex]; //. run function\n\n    const action = this.actions[key];\n\n    if (action) {\n      if (action.runFunc) {\n        action.runFunc.call(null, this.selectedElement, data);\n      } else {\n        this.__nextAction(action.endEvent, {});\n      }\n    }\n  },\n  __nextAction: function (eventName, data) {\n    const key = this.selectedStage[this.stageIndex];\n\n    if (!key) {\n      return;\n    }\n\n    if (eventName !== this.actions[key].endEvent) {\n      return;\n    }\n\n    this.stageIndex++;\n\n    this.__runActionFunc(data);\n  },\n  __runAtag: function (button) {\n    var aTag = button.querySelector('a');\n\n    if (aTag) {\n      CoCreate.logic.setLinkProcess(aTag);\n    }\n  }\n};\n\nCoCreateAction.__init();\n\nvar _default = CoCreateAction;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-action/src/index.js\n")},"../../CoCreate-components/CoCreate-api/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _src = __webpack_require__(/*! ../../../CoCreateJS/src */ "../../CoCreateJS/src/index.js");\n\nvar _src2 = _interopRequireDefault(__webpack_require__(/*! ../../CoCreate-action/src */ "../../CoCreate-components/CoCreate-action/src/index.js"));\n\nvar _src3 = _interopRequireDefault(__webpack_require__(/*! ../../CoCreate-render/src */ "../../CoCreate-components/CoCreate-render/src/index.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateApi = {\n  modules: {},\n  init: function ({\n    name,\n    module\n  }) {\n    this.register(name, module);\n  },\n  register: function (name, m_instance) {\n    const self = this;\n\n    if (typeof this.modules[name] === \'undefined\') {\n      this.modules[name] = m_instance;\n\n      _src.socketApi.listen(name, data => {\n        self.__responseProcess(name, data);\n      }); //. register actions\n\n\n      if (Array.isArray(m_instance[\'actions\'])) {\n        m_instance[\'actions\'].forEach(action => {\n          if (typeof m_instance[`action_${action}`] !== \'function\') {\n            m_instance[`action_${action}`] = function (element) {\n              self.__commonAction(m_instance.id, action, element);\n            };\n          }\n\n          _src2.default.init({\n            action: action,\n            endEvent: action,\n            callback: btn => {\n              m_instance[`action_${action}`](btn);\n            }\n          });\n        });\n      }\n    }\n  },\n  __responseProcess: function (m_name, data) {\n    const {\n      type,\n      response\n    } = data;\n    const m_instance = this.modules[m_name];\n\n    if (type && response && m_instance) {\n      if (typeof m_instance[`render_${type}`] === \'function\') {\n        m_instance[`render_${type}`](response);\n      }\n\n      this.render(type, response);\n      document.dispatchEvent(new CustomEvent(type, {\n        detail: {\n          data: response\n        }\n      }));\n    }\n  },\n  __commonAction: function (id, action, element) {\n    const container = element.closest("form") || document;\n    let data = CoCreateApi.getFormData(id, action, container);\n    CoCreateApi.send(id, action, data);\n  },\n  getFormData: function (m_name, action, container) {\n    const mainAttr = `data-${m_name}`;\n    const self = this;\n    const elements = container.querySelectorAll(`[${mainAttr}^="${action}."]`);\n    let data = {};\n    elements.forEach(element => {\n      let name = element.getAttribute(mainAttr);\n      let array_name = element.getAttribute(mainAttr + "_array");\n\n      let value = self.__getElValue(element);\n\n      if (!name) return;\n\n      if (action) {\n        let re = new RegExp(`^${action}.`, \'i\');\n\n        if (re.test(name)) {\n          name = name.replace(re, "");\n        } else {\n          return;\n        }\n      }\n\n      if (array_name) {\n        if (!data[name]) {\n          data[name] = [];\n        }\n\n        data[name].push(self.getFormData(m_name, array_name, element));\n      } else if (value != null) {\n        data[name] = value;\n      }\n    });\n    let keys = Object.keys(data);\n    let objectData = {};\n    keys.forEach(k => {\n      if (k.split(\'.\').length > 1) {\n        let newData = self.__createObject(data[k], k);\n\n        delete data[k];\n        objectData = self.__mergeObject(objectData, newData);\n      } else {\n        objectData[k] = data[k];\n      }\n    });\n    return objectData;\n  },\n  __getElValue: function (element) {\n    let value = null;\n\n    if (typeof element.value !== "undefined") {\n      switch (element.type.toLocaleLowerCase()) {\n        case \'checkbox\':\n          if (element.checked) {\n            value = element.value;\n          }\n\n          break;\n\n        default:\n          value = element.value;\n          break;\n      }\n    } else {\n      value = element.getAttribute(\'value\');\n\n      if (!value) {\n        value = element.innerHTML;\n      }\n    }\n\n    return value;\n  },\n  __mergeObject: function (target, source) {\n    target = target || {};\n\n    for (let key of Object.keys(source)) {\n      if (source[key] instanceof Object) {\n        Object.assign(source[key], this.__mergeObject(target[key], source[key]));\n      }\n    }\n\n    Object.assign(target || {}, source);\n    return target;\n  },\n  __createObject: function (data, path) {\n    if (!path) return data;\n    let keys = path.split(\'.\');\n    let newObject = data;\n\n    for (var i = keys.length - 1; i >= 0; i--) {\n      newObject = {\n        [keys[i]]: newObject\n      };\n    }\n\n    return newObject;\n  },\n  send: function (module, action, data) {\n    let request_data = this.getCommonParamsExtend(data || {});\n    request_data = { ...request_data,\n      data\n    };\n\n    _src.socketApi.send(module, {\n      type: action,\n      data: request_data\n    });\n  },\n  render: function (action, data) {\n    _src3.default.data({\n      selector: `[data-template_id="${action}"]`,\n      data: data\n    });\n  },\n  createApiSocket: function (host, namespace) {\n    if (namespace) {\n      _src.socketApi.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n\n      _src.socketApi.setGlobalScope(namespace);\n    } else {\n      _src.socketApi.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  },\n  getCommonParamsExtend: function (info) {\n    return {\n      "apiKey": info.apiKey || config.apiKey,\n      "securityKey": info.securityKey || config.securityKey,\n      "organization_id": info.organization_id || config.organization_Id\n    };\n  }\n};\nCoCreateApi.createApiSocket(window.config.host ? window.config.host : \'server.cocreate.app\', window.config.organization_Id // window.config.apiKey\n// window.config.securityKey\n);\nvar _default = CoCreateApi;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-api/src/index.js\n')},"../../CoCreate-components/CoCreate-render/src/index.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\n/**\n * change name Class\n * add functionality to add value on any attr of each elements into template\n */\nconst CoCreateRender = {\n  __getValueFromObject: function (json, path) {\n    try {\n      if (typeof json == 'undefined' || !path) return false;\n      let jsonData = json,\n          subpath = path.split('.');\n\n      for (let i = 0; i < subpath.length; i++) {\n        jsonData = jsonData[subpath[i]];\n        if (!jsonData) return false;\n      }\n\n      return jsonData;\n    } catch (error) {\n      console.log(\"Error in getValueFromObject\", error);\n      return false;\n    }\n  },\n  __getValue: function (data, attrValue) {\n    let result = /{{\\s*([\\w\\W]+)\\s*}}/g.exec(attrValue);\n\n    if (result) {\n      return this.__getValueFromObject(data, result[1].trim());\n    }\n\n    return false;\n  },\n  __createObject: function (data, path) {\n    try {\n      if (!path) return data;\n      let keys = path.split('.');\n      let newObject = data;\n\n      for (var i = keys.length - 1; i >= 0; i--) {\n        newObject = {\n          [keys[i]]: newObject\n        };\n      }\n\n      return newObject;\n    } catch (error) {\n      console.log(\"Error in getValueFromObject\", error);\n      return false;\n    }\n  },\n  __replaceValue: function (data, inputValue) {\n    let isPass = false;\n    let self = this;\n    let resultValue = null; // let variables = inputValue.match(/{{\\s*(\\S+)\\s*}}/g);\n\n    let variables = inputValue.match(/{{([A-Za-z0-9_.,\\- ]*)}}/g);\n\n    if (variables) {\n      variables.forEach(attr => {\n        let value = self.__getValue(data, attr);\n\n        if (value && typeof value !== \"object\") {\n          isPass = true;\n          inputValue = inputValue.replace(attr, value);\n        }\n      });\n\n      if (isPass) {\n        resultValue = inputValue;\n      }\n    }\n\n    return resultValue;\n  },\n  setArray: function (template, data) {\n    const type = template.getAttribute('data-render_array') || \"data\";\n    const render_key = template.getAttribute('data-render_key') || type;\n    const self = this;\n\n    const arrayData = this.__getValueFromObject(data, type);\n\n    if (type && Array.isArray(arrayData)) {\n      arrayData.forEach((item, index) => {\n        let cloneEl = template.cloneNode(true);\n        cloneEl.classList.remove('template');\n        cloneEl.classList.add('clone_' + type);\n\n        if (typeof item !== 'object') {\n          item = {\n            \"--\": item\n          };\n        } else {\n          item['index'] = index;\n        }\n\n        let r_data = self.__createObject(item, render_key);\n\n        self.setValue([cloneEl], r_data);\n        template.insertAdjacentHTML('beforebegin', cloneEl.outerHTML);\n      });\n    }\n  },\n  setValue: function (els, data, passTo, template) {\n    if (!data) return;\n    const that = this;\n    Array.from(els).forEach(e => {\n      let passId = e.getAttribute('data-pass_id');\n\n      if (passTo && passId != passTo) {\n        return;\n      }\n\n      Array.from(e.attributes).forEach(attr => {\n        let attr_name = attr.name.toLowerCase();\n        let isPass = false;\n        let attrValue = attr.value;\n        attrValue = that.__replaceValue(data, attrValue);\n\n        if (attrValue) {\n          if (attr_name == 'value') {\n            let tag = e.tagName.toLowerCase();\n\n            switch (tag) {\n              case 'input':\n                e.setAttribute(attr_name, attrValue);\n                break;\n\n              case 'textarea':\n                e.setAttribute(attr_name, attrValue);\n                e.textContent = attrValue;\n                break;\n\n              default:\n                if (e.children.length === 0) {\n                  e.innerHTML = attrValue;\n                }\n\n            }\n          }\n\n          e.setAttribute(attr_name, attrValue);\n        }\n      });\n\n      if (e.children.length == 0 && e.textContent) {\n        let textContent = e.textContent;\n        textContent = that.__replaceValue(data, textContent);\n\n        if (textContent) {\n          e.textContent = textContent;\n        }\n      }\n\n      if (e.children.length > 0) {\n        that.setValue(e.children, data);\n\n        if (e.classList.contains('template')) {\n          that.setArray(e, data);\n        }\n      }\n    });\n  },\n  data: function ({\n    selector,\n    data,\n    elements,\n    passTo\n  }) {\n    if (selector) {\n      this.render(selector, data);\n    } else if (elements) {\n      this.setValue(elements, data, passTo);\n    }\n  },\n  render: function (selector, dataResult) {\n    let template_div = document.querySelector(selector);\n\n    if (!template_div) {\n      return;\n    }\n\n    if (Array.isArray(dataResult)) {\n      template_div.setAttribute('data-render_array', 'test');\n      this.setValue([template_div], {\n        test: dataResult\n      });\n    } else {\n      this.setValue(template_div.children, dataResult);\n    }\n  }\n};\nvar _default = CoCreateRender;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreate-components/CoCreate-render/src/index.js\n")},"./src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n\nvar _src = _interopRequireDefault(__webpack_require__(/*! ../../../CoCreate-components/CoCreate-api/src */ "../../CoCreate-components/CoCreate-api/src/index.js"));\n\nvar _src2 = __webpack_require__(/*! ../../../CoCreateJS/src */ "../../CoCreateJS/src/index.js");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nconst CoCreateStripe = {\n  id: \'stripe\',\n  actions: [\'balanceTransaction\', \'createSourceCustomer\', \'createCustomer\', \'getBalance\', \'listCustomers\', \'createTokenCard\', \'createCustomer\', \'updateCustomer\', \'createCharge\', \'create\'],\n  render_create: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_createCharge: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_updateCustomer: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_createCustomer: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_createTokenCard: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("createTokenCard ", data);\n    CoCreate.api.render(\'createTokenCard\', data);\n  },\n  render_balanceTransaction: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_createSourceCustomer: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n  },\n  render_getBalance: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n    CoCreate.api.render(\'getBalance\', data);\n  },\n  render_createCustomer: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n    CoCreate.api.render(\'createCustomer\', data);\n  },\n  render_listCustomers: function (data) {\n    if (data.object == "error") {\n      alert(data.data);\n    }\n\n    data = {\n      data: data\n    };\n    console.log("data ", data);\n    CoCreate.api.render(\'listCustomers\', data);\n  }\n};\n\n_src.default.init({\n  name: CoCreateStripe.id,\n  module: CoCreateStripe\n});\n\nvar _default = CoCreateStripe;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zdHJpcGUvLi9zcmMvaW5kZXguanM/YjYzNSJdLCJuYW1lcyI6WyJDb0NyZWF0ZVN0cmlwZSIsImlkIiwiYWN0aW9ucyIsInJlbmRlcl9jcmVhdGUiLCJkYXRhIiwib2JqZWN0IiwiYWxlcnQiLCJjb25zb2xlIiwibG9nIiwicmVuZGVyX2NyZWF0ZUNoYXJnZSIsInJlbmRlcl91cGRhdGVDdXN0b21lciIsInJlbmRlcl9jcmVhdGVDdXN0b21lciIsInJlbmRlcl9jcmVhdGVUb2tlbkNhcmQiLCJDb0NyZWF0ZSIsImFwaSIsInJlbmRlciIsInJlbmRlcl9iYWxhbmNlVHJhbnNhY3Rpb24iLCJyZW5kZXJfY3JlYXRlU291cmNlQ3VzdG9tZXIiLCJyZW5kZXJfZ2V0QmFsYW5jZSIsInJlbmRlcl9saXN0Q3VzdG9tZXJzIiwiaW5pdCIsIm5hbWUiLCJtb2R1bGUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFDQTs7OztBQUVBLE1BQU1BLGNBQWMsR0FBRztBQUN0QkMsSUFBRSxFQUFFLFFBRGtCO0FBRXRCQyxTQUFPLEVBQUUsQ0FDUCxvQkFETyxFQUVQLHNCQUZPLEVBR1AsZ0JBSE8sRUFJUCxZQUpPLEVBS1AsZUFMTyxFQU1QLGlCQU5PLEVBT1AsZ0JBUE8sRUFRUCxnQkFSTyxFQVNQLGNBVE8sRUFVUCxRQVZPLENBRmE7QUFnQnRCQyxlQUFhLEVBQUUsVUFBU0MsSUFBVCxFQUFlO0FBQ3hCLFFBQUlBLElBQUksQ0FBQ0MsTUFBTCxJQUFlLE9BQW5CLEVBQTRCO0FBQ3ZCQyxXQUFLLENBQUNGLElBQUksQ0FBQ0EsSUFBTixDQUFMO0FBQ0g7O0FBQ0ZBLFFBQUksR0FBRztBQUFDQSxVQUFJLEVBQUVBO0FBQVAsS0FBUDtBQUNBRyxXQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaLEVBQW9CSixJQUFwQjtBQUNMLEdBdEJxQjtBQXVCdEJLLHFCQUFtQixFQUFFLFVBQVNMLElBQVQsRUFBZTtBQUM5QixRQUFJQSxJQUFJLENBQUNDLE1BQUwsSUFBZSxPQUFuQixFQUE0QjtBQUN2QkMsV0FBSyxDQUFDRixJQUFJLENBQUNBLElBQU4sQ0FBTDtBQUNIOztBQUNGQSxRQUFJLEdBQUc7QUFBQ0EsVUFBSSxFQUFFQTtBQUFQLEtBQVA7QUFDQUcsV0FBTyxDQUFDQyxHQUFSLENBQVksT0FBWixFQUFvQkosSUFBcEI7QUFDTCxHQTdCcUI7QUE4QnRCTSx1QkFBcUIsRUFBRSxVQUFTTixJQUFULEVBQWU7QUFDaEMsUUFBSUEsSUFBSSxDQUFDQyxNQUFMLElBQWUsT0FBbkIsRUFBNEI7QUFDdkJDLFdBQUssQ0FBQ0YsSUFBSSxDQUFDQSxJQUFOLENBQUw7QUFDSDs7QUFDRkEsUUFBSSxHQUFHO0FBQUNBLFVBQUksRUFBRUE7QUFBUCxLQUFQO0FBQ0FHLFdBQU8sQ0FBQ0MsR0FBUixDQUFZLE9BQVosRUFBb0JKLElBQXBCO0FBQ0wsR0FwQ3FCO0FBc0N0Qk8sdUJBQXFCLEVBQUUsVUFBU1AsSUFBVCxFQUFlO0FBQ2hDLFFBQUlBLElBQUksQ0FBQ0MsTUFBTCxJQUFlLE9BQW5CLEVBQTRCO0FBQ3ZCQyxXQUFLLENBQUNGLElBQUksQ0FBQ0EsSUFBTixDQUFMO0FBQ0g7O0FBQ0ZBLFFBQUksR0FBRztBQUFDQSxVQUFJLEVBQUVBO0FBQVAsS0FBUDtBQUNBRyxXQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaLEVBQW9CSixJQUFwQjtBQUNMLEdBNUNxQjtBQThDdEJRLHdCQUFzQixFQUFFLFVBQVNSLElBQVQsRUFBZTtBQUNqQyxRQUFJQSxJQUFJLENBQUNDLE1BQUwsSUFBZSxPQUFuQixFQUE0QjtBQUN2QkMsV0FBSyxDQUFDRixJQUFJLENBQUNBLElBQU4sQ0FBTDtBQUNIOztBQUNGQSxRQUFJLEdBQUc7QUFBQ0EsVUFBSSxFQUFFQTtBQUFQLEtBQVA7QUFDQUcsV0FBTyxDQUFDQyxHQUFSLENBQVksa0JBQVosRUFBK0JKLElBQS9CO0FBQ0FTLFlBQVEsQ0FBQ0MsR0FBVCxDQUFhQyxNQUFiLENBQW9CLGlCQUFwQixFQUF1Q1gsSUFBdkM7QUFDTCxHQXJEcUI7QUFzRHRCWSwyQkFBeUIsRUFBRSxVQUFTWixJQUFULEVBQWU7QUFDcEMsUUFBSUEsSUFBSSxDQUFDQyxNQUFMLElBQWUsT0FBbkIsRUFBNEI7QUFDdkJDLFdBQUssQ0FBQ0YsSUFBSSxDQUFDQSxJQUFOLENBQUw7QUFDSDs7QUFDRkEsUUFBSSxHQUFHO0FBQUNBLFVBQUksRUFBRUE7QUFBUCxLQUFQO0FBQ0FHLFdBQU8sQ0FBQ0MsR0FBUixDQUFZLE9BQVosRUFBb0JKLElBQXBCO0FBQ0wsR0E1RHFCO0FBNkR0QmEsNkJBQTJCLEVBQUUsVUFBU2IsSUFBVCxFQUFlO0FBQ3RDLFFBQUlBLElBQUksQ0FBQ0MsTUFBTCxJQUFlLE9BQW5CLEVBQTRCO0FBQ3ZCQyxXQUFLLENBQUNGLElBQUksQ0FBQ0EsSUFBTixDQUFMO0FBQ0g7O0FBQ0ZBLFFBQUksR0FBRztBQUFDQSxVQUFJLEVBQUVBO0FBQVAsS0FBUDtBQUNBRyxXQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaLEVBQW9CSixJQUFwQjtBQUNMLEdBbkVxQjtBQW9FdEJjLG1CQUFpQixFQUFFLFVBQVNkLElBQVQsRUFBZTtBQUM1QixRQUFJQSxJQUFJLENBQUNDLE1BQUwsSUFBZSxPQUFuQixFQUE0QjtBQUN2QkMsV0FBSyxDQUFDRixJQUFJLENBQUNBLElBQU4sQ0FBTDtBQUNIOztBQUNGQSxRQUFJLEdBQUc7QUFBQ0EsVUFBSSxFQUFFQTtBQUFQLEtBQVA7QUFDQUcsV0FBTyxDQUFDQyxHQUFSLENBQVksT0FBWixFQUFvQkosSUFBcEI7QUFDQ1MsWUFBUSxDQUFDQyxHQUFULENBQWFDLE1BQWIsQ0FBb0IsWUFBcEIsRUFBa0NYLElBQWxDO0FBQ04sR0EzRXFCO0FBNEV0Qk8sdUJBQXFCLEVBQUUsVUFBU1AsSUFBVCxFQUFlO0FBQ2hDLFFBQUlBLElBQUksQ0FBQ0MsTUFBTCxJQUFlLE9BQW5CLEVBQTRCO0FBQ3ZCQyxXQUFLLENBQUNGLElBQUksQ0FBQ0EsSUFBTixDQUFMO0FBQ0g7O0FBQ0ZBLFFBQUksR0FBRztBQUFDQSxVQUFJLEVBQUVBO0FBQVAsS0FBUDtBQUNBRyxXQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaLEVBQW9CSixJQUFwQjtBQUNEUyxZQUFRLENBQUNDLEdBQVQsQ0FBYUMsTUFBYixDQUFvQixnQkFBcEIsRUFBc0NYLElBQXRDO0FBQ0osR0FuRnFCO0FBb0Z0QmUsc0JBQW9CLEVBQUUsVUFBU2YsSUFBVCxFQUFlO0FBQy9CLFFBQUlBLElBQUksQ0FBQ0MsTUFBTCxJQUFlLE9BQW5CLEVBQTRCO0FBQ3ZCQyxXQUFLLENBQUNGLElBQUksQ0FBQ0EsSUFBTixDQUFMO0FBQ0g7O0FBQ0ZBLFFBQUksR0FBRztBQUFDQSxVQUFJLEVBQUVBO0FBQVAsS0FBUDtBQUNBRyxXQUFPLENBQUNDLEdBQVIsQ0FBWSxPQUFaLEVBQW9CSixJQUFwQjtBQUNEUyxZQUFRLENBQUNDLEdBQVQsQ0FBYUMsTUFBYixDQUFvQixlQUFwQixFQUFxQ1gsSUFBckM7QUFDSjtBQTNGcUIsQ0FBdkI7O0FBOEZBVSxhQUFJTSxJQUFKLENBQVM7QUFDUkMsTUFBSSxFQUFFckIsY0FBYyxDQUFDQyxFQURiO0FBRVJxQixRQUFNLEVBQUV0QjtBQUZBLENBQVQ7O2VBS2VBLGMiLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgYXBpIGZyb20gJy4uLy4uLy4uL0NvQ3JlYXRlLWNvbXBvbmVudHMvQ29DcmVhdGUtYXBpL3NyYydcbmltcG9ydCB7c29ja2V0LCBjcnVkfSBmcm9tICcuLi8uLi8uLi9Db0NyZWF0ZUpTL3NyYyc7XG5cbmNvbnN0IENvQ3JlYXRlU3RyaXBlID0ge1xuXHRpZDogJ3N0cmlwZScsXG5cdGFjdGlvbnM6IFtcblx0ICAnYmFsYW5jZVRyYW5zYWN0aW9uJyxcblx0ICAnY3JlYXRlU291cmNlQ3VzdG9tZXInLFxuXHQgICdjcmVhdGVDdXN0b21lcicsXG5cdCAgJ2dldEJhbGFuY2UnLFxuXHQgICdsaXN0Q3VzdG9tZXJzJyxcblx0ICAnY3JlYXRlVG9rZW5DYXJkJyxcblx0ICAnY3JlYXRlQ3VzdG9tZXInLFxuXHQgICd1cGRhdGVDdXN0b21lcicsXG5cdCAgJ2NyZWF0ZUNoYXJnZScsXG5cdCAgJ2NyZWF0ZSdcblx0XSxcblx0XG5cdFxuXHRyZW5kZXJfY3JlYXRlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgaWYgKGRhdGEub2JqZWN0ID09IFwiZXJyb3JcIikge1xuICAgICAgICAgICAgYWxlcnQoZGF0YS5kYXRhKVxuICAgICAgICB9XG4gICAgICAgZGF0YSA9IHtkYXRhOiBkYXRhfTtcbiAgICAgICBjb25zb2xlLmxvZyhcImRhdGEgXCIsZGF0YSlcblx0fSxcblx0cmVuZGVyX2NyZWF0ZUNoYXJnZTogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgIGlmIChkYXRhLm9iamVjdCA9PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGFsZXJ0KGRhdGEuZGF0YSlcbiAgICAgICAgfVxuICAgICAgIGRhdGEgPSB7ZGF0YTogZGF0YX07XG4gICAgICAgY29uc29sZS5sb2coXCJkYXRhIFwiLGRhdGEpXG5cdH0sXG5cdHJlbmRlcl91cGRhdGVDdXN0b21lcjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgIGlmIChkYXRhLm9iamVjdCA9PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGFsZXJ0KGRhdGEuZGF0YSlcbiAgICAgICAgfVxuICAgICAgIGRhdGEgPSB7ZGF0YTogZGF0YX07XG4gICAgICAgY29uc29sZS5sb2coXCJkYXRhIFwiLGRhdGEpXG5cdH0sXG5cdFxuXHRyZW5kZXJfY3JlYXRlQ3VzdG9tZXI6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICBpZiAoZGF0YS5vYmplY3QgPT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICBhbGVydChkYXRhLmRhdGEpXG4gICAgICAgIH1cbiAgICAgICBkYXRhID0ge2RhdGE6IGRhdGF9O1xuICAgICAgIGNvbnNvbGUubG9nKFwiZGF0YSBcIixkYXRhKVxuXHR9LFxuXHRcblx0cmVuZGVyX2NyZWF0ZVRva2VuQ2FyZDogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgIGlmIChkYXRhLm9iamVjdCA9PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGFsZXJ0KGRhdGEuZGF0YSlcbiAgICAgICAgfVxuICAgICAgIGRhdGEgPSB7ZGF0YTogZGF0YX07XG4gICAgICAgY29uc29sZS5sb2coXCJjcmVhdGVUb2tlbkNhcmQgXCIsZGF0YSlcbiAgICAgICBDb0NyZWF0ZS5hcGkucmVuZGVyKCdjcmVhdGVUb2tlbkNhcmQnLCBkYXRhKTtcblx0fSxcblx0cmVuZGVyX2JhbGFuY2VUcmFuc2FjdGlvbjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgIGlmIChkYXRhLm9iamVjdCA9PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGFsZXJ0KGRhdGEuZGF0YSlcbiAgICAgICAgfVxuICAgICAgIGRhdGEgPSB7ZGF0YTogZGF0YX07XG4gICAgICAgY29uc29sZS5sb2coXCJkYXRhIFwiLGRhdGEpXG5cdH0sXG5cdHJlbmRlcl9jcmVhdGVTb3VyY2VDdXN0b21lcjogZnVuY3Rpb24oZGF0YSkge1xuICAgICAgIGlmIChkYXRhLm9iamVjdCA9PSBcImVycm9yXCIpIHtcbiAgICAgICAgICAgIGFsZXJ0KGRhdGEuZGF0YSlcbiAgICAgICAgfVxuICAgICAgIGRhdGEgPSB7ZGF0YTogZGF0YX07XG4gICAgICAgY29uc29sZS5sb2coXCJkYXRhIFwiLGRhdGEpXG5cdH0sXG5cdHJlbmRlcl9nZXRCYWxhbmNlOiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgaWYgKGRhdGEub2JqZWN0ID09IFwiZXJyb3JcIikge1xuICAgICAgICAgICAgYWxlcnQoZGF0YS5kYXRhKVxuICAgICAgICB9XG4gICAgICAgZGF0YSA9IHtkYXRhOiBkYXRhfTtcbiAgICAgICBjb25zb2xlLmxvZyhcImRhdGEgXCIsZGF0YSlcbiAgICAgICAgQ29DcmVhdGUuYXBpLnJlbmRlcignZ2V0QmFsYW5jZScsIGRhdGEpO1xuXHR9LFxuXHRyZW5kZXJfY3JlYXRlQ3VzdG9tZXI6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICBpZiAoZGF0YS5vYmplY3QgPT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICBhbGVydChkYXRhLmRhdGEpXG4gICAgICAgIH1cbiAgICAgICBkYXRhID0ge2RhdGE6IGRhdGF9O1xuICAgICAgIGNvbnNvbGUubG9nKFwiZGF0YSBcIixkYXRhKVxuICAgICAgQ29DcmVhdGUuYXBpLnJlbmRlcignY3JlYXRlQ3VzdG9tZXInLCBkYXRhKTtcblx0fSxcblx0cmVuZGVyX2xpc3RDdXN0b21lcnM6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICBpZiAoZGF0YS5vYmplY3QgPT0gXCJlcnJvclwiKSB7XG4gICAgICAgICAgICBhbGVydChkYXRhLmRhdGEpXG4gICAgICAgIH1cbiAgICAgICBkYXRhID0ge2RhdGE6IGRhdGF9O1xuICAgICAgIGNvbnNvbGUubG9nKFwiZGF0YSBcIixkYXRhKVxuICAgICAgQ29DcmVhdGUuYXBpLnJlbmRlcignbGlzdEN1c3RvbWVycycsIGRhdGEpO1xuXHR9LFxufVxuXG5hcGkuaW5pdCh7XG5cdG5hbWU6IENvQ3JlYXRlU3RyaXBlLmlkLCBcblx0bW9kdWxlOlx0Q29DcmVhdGVTdHJpcGUsXG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQ29DcmVhdGVTdHJpcGU7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n')},"../../CoCreateJS/src/common-fun.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.getCommonParams = getCommonParams;\nexports.getCommonParamsExtend = getCommonParamsExtend;\nexports.generateSocketClient = generateSocketClient;\n\nfunction getCommonParams() {\n  return {\n    "apiKey": config.apiKey,\n    "securityKey": config.securityKey,\n    "organization_id": config.organization_Id\n  };\n}\n\nfunction getCommonParamsExtend(info) {\n  return {\n    "apiKey": info.apiKey || config.apiKey,\n    "securityKey": info.securityKey || config.securityKey,\n    "organization_id": info.organization_id || config.organization_Id\n  };\n}\n\nfunction generateSocketClient(namespace, room) {\n  let ns = namespace || config.organization_Id;\n  let rr = room || \'\';\n\n  if (rr) {\n    return `${ns}/${rr}`;\n  } else {\n    return ns;\n  }\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zdHJpcGUvLi4vQ29DcmVhdGVKUy9zcmMvY29tbW9uLWZ1bi5qcz9iODlmIl0sIm5hbWVzIjpbImdldENvbW1vblBhcmFtcyIsImNvbmZpZyIsImFwaUtleSIsInNlY3VyaXR5S2V5Iiwib3JnYW5pemF0aW9uX0lkIiwiZ2V0Q29tbW9uUGFyYW1zRXh0ZW5kIiwiaW5mbyIsIm9yZ2FuaXphdGlvbl9pZCIsImdlbmVyYXRlU29ja2V0Q2xpZW50IiwibmFtZXNwYWNlIiwicm9vbSIsIm5zIiwicnIiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBLFNBQVNBLGVBQVQsR0FDQTtBQUNFLFNBQU87QUFDTCxjQUFvQkMsTUFBTSxDQUFDQyxNQUR0QjtBQUVMLG1CQUFvQkQsTUFBTSxDQUFDRSxXQUZ0QjtBQUdMLHVCQUFvQkYsTUFBTSxDQUFDRztBQUh0QixHQUFQO0FBS0Q7O0FBRUQsU0FBU0MscUJBQVQsQ0FBK0JDLElBQS9CLEVBQ0E7QUFDRSxTQUFPO0FBQ0wsY0FBb0JBLElBQUksQ0FBQ0osTUFBTCxJQUFlRCxNQUFNLENBQUNDLE1BRHJDO0FBRUwsbUJBQW9CSSxJQUFJLENBQUNILFdBQUwsSUFBb0JGLE1BQU0sQ0FBQ0UsV0FGMUM7QUFHTCx1QkFBb0JHLElBQUksQ0FBQ0MsZUFBTCxJQUF3Qk4sTUFBTSxDQUFDRztBQUg5QyxHQUFQO0FBS0Q7O0FBRUQsU0FBU0ksb0JBQVQsQ0FBK0JDLFNBQS9CLEVBQTBDQyxJQUExQyxFQUNBO0FBQ0UsTUFBSUMsRUFBRSxHQUFHRixTQUFTLElBQUlSLE1BQU0sQ0FBQ0csZUFBN0I7QUFDQSxNQUFJUSxFQUFFLEdBQUdGLElBQUksSUFBSSxFQUFqQjs7QUFDQSxNQUFJRSxFQUFKLEVBQVE7QUFDTixXQUFRLEdBQUVELEVBQUcsSUFBR0MsRUFBRyxFQUFuQjtBQUNELEdBRkQsTUFFTztBQUNMLFdBQU9ELEVBQVA7QUFDRDtBQUNGIiwiZmlsZSI6Ii4uLy4uL0NvQ3JlYXRlSlMvc3JjL2NvbW1vbi1mdW4uanMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBnZXRDb21tb25QYXJhbXMoKSBcbntcbiAgcmV0dXJuIHtcbiAgICBcImFwaUtleVwiOiAgICAgICAgICAgY29uZmlnLmFwaUtleSxcbiAgICBcInNlY3VyaXR5S2V5XCI6ICAgICAgY29uZmlnLnNlY3VyaXR5S2V5LFxuICAgIFwib3JnYW5pemF0aW9uX2lkXCI6ICBjb25maWcub3JnYW5pemF0aW9uX0lkLFxuICB9XG59XG5cbmZ1bmN0aW9uIGdldENvbW1vblBhcmFtc0V4dGVuZChpbmZvKSBcbntcbiAgcmV0dXJuIHtcbiAgICBcImFwaUtleVwiOiAgICAgICAgICAgaW5mby5hcGlLZXkgfHwgY29uZmlnLmFwaUtleSxcbiAgICBcInNlY3VyaXR5S2V5XCI6ICAgICAgaW5mby5zZWN1cml0eUtleSB8fCBjb25maWcuc2VjdXJpdHlLZXksXG4gICAgXCJvcmdhbml6YXRpb25faWRcIjogIGluZm8ub3JnYW5pemF0aW9uX2lkIHx8IGNvbmZpZy5vcmdhbml6YXRpb25fSWQsXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVTb2NrZXRDbGllbnQgKG5hbWVzcGFjZSwgcm9vbSkgXG57XG4gIGxldCBucyA9IG5hbWVzcGFjZSB8fCBjb25maWcub3JnYW5pemF0aW9uX0lkXG4gIGxldCByciA9IHJvb20gfHwgJyc7XG4gIGlmIChycikge1xuICAgIHJldHVybiBgJHtuc30vJHtycn1gXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5zO1xuICB9XG59XG5cbmV4cG9ydCB7Z2V0Q29tbW9uUGFyYW1zLCBnZXRDb21tb25QYXJhbXNFeHRlbmQsIGdlbmVyYXRlU29ja2V0Q2xpZW50fTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/common-fun.js\n')},"../../CoCreateJS/src/core.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = core;\n// ***********   define variables end ***************** /// \nconst CoCreateCore = {\n  socketInitFuncs: [],\n  moduleSelectors: [],\n  socket: null,\n  host: 'server.cocreate.app',\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n  init: function (host, namespace) {\n    if (host) {\n      this.host = host;\n    }\n\n    this.__setConfig();\n\n    this.createGeneralSocket(host, namespace || config.organization_Id);\n    this.initSocketListener();\n    this.createUserSocket(host);\n  },\n  __setConfig: function () {\n    let orgId = window.localStorage.getItem('organization_id');\n    let securityKey = window.localStorage.getItem('securityKey');\n    let apiKey = window.localStorage.getItem('apiKey');\n    if (orgId) config['organization_Id'] = orgId;\n    if (apiKey) config['apiKey'] = apiKey;\n    if (securityKey) config['securityKey'] = securityKey;\n  },\n  initSocketListener: function () {\n    const self = this;\n    this.socket.listen('connect', function (data, room) {\n      if (room == self.socket.getGlobalScope()) {\n        self.socketInitFuncs.forEach(func => {\n          func.initFunc.call(func.instance);\n        });\n      }\n    });\n    this.socket.listen('readDocument', function (data) {\n      const metadata = data.metadata; // if (metadata && metadata.type == 'crdt') {\n      //   self.initRenderCrdtData(data);\n      // } else {\n      //   // self.renderModules(data)\n      // }\n\n      return data;\n    });\n    this.socket.listen('updateDocument', function (data) {// self.renderModules(data)\n    });\n    this.socket.listen('deletedDocument', function (data) {\n      console.log(data);\n    });\n    this.socket.listen('sendMessage', function (data) {\n      console.log(data);\n    });\n    this.listenMessage('downloadFileInfo', function (data) {\n      self.socket.saveFileName = data.file_name;\n    });\n  },\n  createUserSocket: function (host) {\n    var user_id = window.localStorage.getItem('user_id');\n\n    if (user_id) {\n      this.socket.create({\n        namespace: 'users',\n        room: user_id,\n        host: host\n      });\n    }\n  },\n  createGeneralSocket: function (host, namespace) {\n    if (namespace) {\n      this.socket.create({\n        namespace: namespace,\n        room: null,\n        host: host\n      });\n      this.socket.setGlobalScope(namespace);\n    } else {\n      this.socket.create({\n        namespace: null,\n        room: null,\n        host: host\n      });\n    }\n  },\n  registerInit: function (initFunc, instance) {\n    this.socketInitFuncs.push({\n      initFunc,\n      instance: instance || window\n    });\n  },\n  // registerSelector: function(selector) {\n  //   if (this.moduleSelectors.indexOf(selector) === -1) {\n  //     this.moduleSelectors.push(selector);\n  //   }\n  // },\n  // getSelectors: function(selector) {\n  //   return this.moduleSelectors.join(\",\");\n  // },\n  listenMessage: function (message, fun) {\n    this.socket.listen(message, fun);\n  },\n  createSocket: function (config) {\n    this.socket.create(config);\n  },\n  destroySocket: function (config) {\n    const {\n      namespace,\n      room\n    } = config;\n    const key = this.socket.getKey(namespace, room);\n    let socket = this.socket.sockets.get(key);\n\n    if (!socket) {\n      return;\n    }\n\n    this.socket.destroy(socket, key);\n  }\n};\n\nfunction core(socket) {\n  CoCreateCore.setSocket(socket);\n  return CoCreateCore;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/core.js\n")},"../../CoCreateJS/src/crud.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = CRUD;\n\nvar _commonFun = __webpack_require__(/*! ./common-fun.js */ \"../../CoCreateJS/src/common-fun.js\");\n\n// ***********   define variables end ***************** /// \nconst CoCreateCRUD = {\n  socket: null,\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n\n  /*\n   \n    CoCreate.crud.readDcoumentList {\n      collection: \"modules\",\n      element: \"xxxx\",\n      metadata: \"\",\n      operator: {\n        fetch: {\n          name: 'xxxx',\n          value: 'xxxxx'\n        },\n        filters: [{\n          name: 'field1',\n          operator: \"contain | range | eq | ne | lt | lte | gt | gte | in | nin\",\n          value: [v1, v2, ...]\n        }, {\n          name: \"_id\",\n          opreator: \"in\",\n          value: [\"id1\"]\n        }, {\n          ....\n        }],\n        orders: [{\n          name: 'field-x',\n          type: 1 | -1\n        }],\n        search: {\n          type: 'or | and',\n          value: [value1, value2]\n        },\n        \n        startIndex: 0 (integer),\n        count: 0 (integer)\n      },\n      \n      is_collection: true | false,\n      //. case fetch document case\n      created_ids : [id1, id2, ...],\n      \n      \n      -------- additional response data -----------\n      data: [] // array\n    }\n  */\n  readDocumentList(info) {\n    if (!info) return;\n    let request_data = (0, _commonFun.getCommonParams)();\n\n    if (!info.collection || !info.operator) {\n      return;\n    }\n\n    request_data = { ...request_data,\n      ...info\n    };\n    this.socket.send('readDocumentList', request_data);\n  },\n\n  /*\n  CoCreate.crud.createDocument({\n    namespace:'',\n    room:'',\n    broadcast: true/false, (default=ture)\n    broadcast_sender: true/false, (default=true) \n    \n    collection: \"test123\",\n    data:{\n    \tname1:“hello”,\n    \tname2:  “hello1”\n    },\n    element: “xxxx”,\n    metaData: \"xxxx\"\n  }),\n  */\n  // data param needs organization_id field added to pass security check\n  createDocument: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'] || 'module_activities';\n    let data = info.data || {};\n\n    if (!data['organization_id']) {\n      data['organization_id'] = config.organization_Id;\n    }\n\n    if (info['data']) {\n      data = { ...data,\n        ...info['data']\n      };\n    }\n\n    request_data['data'] = data;\n\n    if (info['metadata']) {\n      request_data['metadata'] = info['metadata'];\n    }\n\n    request_data['element'] = info['element'];\n    /** socket parameters **/\n    // if (info['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (info['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('createDocument', request_data, room);\n  },\n\n  /*\n  CoCreate.crud.updateDocument({\n    namespace: '',\n    room: '',\n    broadcast: true/false,\n    broadcast_sender: true/false,\n    \n    collection: \"test123\",\n    document_id: \"document_id\",\n    data:{\n    \tname1:“hello”,\n    \tname2:  “hello1”\n    },\n    delete_fields:[\"name3\", \"name4\"],\n    element: “xxxx”,\n    metaData: \"xxxx\"\n  }),\n  */\n  updateDocument: function (info) {\n    if (!info || !info['document_id']) return;\n    let request_data = (0, _commonFun.getCommonParamsExtend)(info);\n    request_data['collection'] = info['collection'] || 'module_activities';\n    request_data['document_id'] = info['document_id'];\n    if (typeof info['data'] === 'object') request_data['set'] = info['data'];\n    if (Array.isArray(info['delete_fields'])) request_data['unset'] = info['delete_fields'];\n    if (!request_data['set'] && !request_data['unset']) return;\n    request_data['element'] = info['element'];\n    request_data['metadata'] = info['metadata'];\n\n    if (info.upsert) {\n      request_data['upsert'] = true;\n    }\n\n    if (info.broadcast === false) {\n      request_data['broadcast'] = false;\n    }\n    /** socket parameters **/\n    // if (info['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n\n\n    request_data['broadcast_sender'] = info.broadcast_sender;\n\n    if (info['broadcast_sender'] === undefined) {\n      request_data['broadcast_sender'] = true;\n    }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('updateDocument', request_data, room);\n  },\n\n  /*\n  CoCreate.crud.readDocument({\n    collection: \"test123\",\n    document_id: \"document_id\",\n    element: “xxxx”,\n    metaData: \"xxxx\",\n    exclude_fields: [] \n  }),\n  */\n  readDocument: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    if (!info['document_id'] || !info) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['document_id'] = info['document_id'];\n\n    if (info['exclude_fields']) {\n      request_data['exclude_fields'] = info['exclude_fields'];\n    }\n\n    if (info['element']) {\n      request_data['element'] = info['element'];\n    }\n\n    request_data['metadata'] = info['metadata'];\n    this.socket.send('readDocument', request_data);\n  },\n\n  /*\n  CoCreate.crud.deleteDocument({\n    namespace: '',\n    room: '',\n    broadcast: true/false,\n    broadcast_sender: true/false,\n    \n    collection: \"module\",\n    document_id: \"\",\n    element: “xxxx”,\n    metadata: \"xxxx\"\n  }),\n  */\n  deleteDocument: function (info) {\n    if (!info['document_id'] || !info) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['document_id'] = info['document_id'];\n\n    if (info['element']) {\n      request_data['element'] = info['element'];\n    }\n\n    request_data['metadata'] = info['metadata'];\n    /** socket parameters **/\n    // if (info['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (info['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(info.namespace, info.room);\n    this.socket.send('deleteDocument', request_data, room);\n  },\n\n  /** export / import db functions **/\n\n  /*\n  readDocument({\n   collection: \"test123\",\n   element: “xxxx”,\n   metaData: \"xxxx\",\n  }),\n  */\n  exportCollection: function (info) {\n    if (info === null) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['export_type'] = info['export_type'];\n    request_data['metadata'] = info['metadata'];\n    this.socket.send('exportDB', request_data);\n  },\n\n  /*\n  readDocument({\n    collection: \"test123\",\n    file: file\n  }),\n  */\n  importCollection: function (info) {\n    const {\n      file\n    } = info;\n\n    if (info === null || !(file instanceof File)) {\n      return;\n    }\n\n    const extension = file.name.split(\".\").pop();\n\n    if (!['json', 'csv'].some(item => item === extension)) {\n      return;\n    }\n\n    let request_data = (0, _commonFun.getCommonParams)();\n    request_data['collection'] = info['collection'];\n    request_data['import_type'] = extension;\n    this.socket.send('importDB', request_data);\n    this.socket.sendFile(file);\n  },\n  //. message listener\n  listenMessage: function (message, fun) {\n    this.socket.listen(message, fun);\n  },\n  listenerReadDocument: function (fun) {\n    this.socket.listen(\"readDocument\", fun);\n  },\n  listenerCreateDocument: function (fun) {\n    this.socket.listen(\"createDocument\", fun);\n  },\n  listenerDeleteDocument: function (fun) {\n    this.socket.listen(\"deleteDocument\", fun);\n  },\n  listenerUpdateDocument: function (fun) {\n    this.socket.listen(\"updateDocument\", fun);\n  },\n  listenerReadDocumentList: function (fun) {\n    this.socket.listen(\"readDocumentList\", fun);\n  }\n};\n\nfunction CRUD(socket) {\n  CoCreateCRUD.setSocket(socket);\n  return CoCreateCRUD;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/crud.js\n")},"../../CoCreateJS/src/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.addComponent = addComponent;\nexports.removeComponent = removeComponent;\nObject.defineProperty(exports, "utils", ({\n  enumerable: true,\n  get: function () {\n    return _utils.default;\n  }\n}));\nexports.message = exports.crud = exports.socketApi = exports.socket = exports.core = void 0;\n\nvar _socket = _interopRequireDefault(__webpack_require__(/*! ./socket.js */ "../../CoCreateJS/src/socket.js"));\n\nvar _crud = _interopRequireDefault(__webpack_require__(/*! ./crud.js */ "../../CoCreateJS/src/crud.js"));\n\nvar _core = _interopRequireDefault(__webpack_require__(/*! ./core.js */ "../../CoCreateJS/src/core.js"));\n\nvar _utils = _interopRequireDefault(__webpack_require__(/*! ./utils.js */ "../../CoCreateJS/src/utils.js"));\n\nvar _message = _interopRequireDefault(__webpack_require__(/*! ./message.js */ "../../CoCreateJS/src/message.js"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// import CRDT from "./crdt.js"\nlet socket = new _socket.default(\'ws\');\nexports.socket = socket;\nlet socketApi = new _socket.default(\'api\');\nexports.socketApi = socketApi;\nlet core = (0, _core.default)(socket);\nexports.core = core;\nlet crud = (0, _crud.default)(socket);\nexports.crud = crud;\nlet message = (0, _message.default)(socket);\nexports.message = message;\ncore.init(window.config.host ? window.config.host : \'server.cocreate.app\');\n\nfunction addComponent(key, component) {\n  this[key] = component;\n}\n\nfunction removeComponent(key) {\n  if (this[key]) {}\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zdHJpcGUvLi4vQ29DcmVhdGVKUy9zcmMvaW5kZXguanM/Mjg5YSJdLCJuYW1lcyI6WyJzb2NrZXQiLCJDb0NyZWF0ZVNvY2tldCIsInNvY2tldEFwaSIsImNvcmUiLCJjcnVkIiwibWVzc2FnZSIsImluaXQiLCJ3aW5kb3ciLCJjb25maWciLCJob3N0IiwiYWRkQ29tcG9uZW50Iiwia2V5IiwiY29tcG9uZW50IiwicmVtb3ZlQ29tcG9uZW50Il0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7OztBQUVBO0FBQ0EsSUFBSUEsTUFBTSxHQUFHLElBQUlDLGVBQUosQ0FBbUIsSUFBbkIsQ0FBYjs7QUFDQSxJQUFJQyxTQUFTLEdBQUcsSUFBSUQsZUFBSixDQUFtQixLQUFuQixDQUFoQjs7QUFFQSxJQUFJRSxJQUFJLEdBQUcsbUJBQUtILE1BQUwsQ0FBWDs7QUFDQSxJQUFJSSxJQUFJLEdBQUcsbUJBQUtKLE1BQUwsQ0FBWDs7QUFDQSxJQUFJSyxPQUFPLEdBQUcsc0JBQVFMLE1BQVIsQ0FBZDs7QUFFQUcsSUFBSSxDQUFDRyxJQUFMLENBQVVDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjQyxJQUFkLEdBQXFCRixNQUFNLENBQUNDLE1BQVAsQ0FBY0MsSUFBbkMsR0FBMEMscUJBQXBEOztBQUVBLFNBQVNDLFlBQVQsQ0FBc0JDLEdBQXRCLEVBQTJCQyxTQUEzQixFQUFzQztBQUNsQyxPQUFLRCxHQUFMLElBQVlDLFNBQVo7QUFDSDs7QUFFRCxTQUFTQyxlQUFULENBQXlCRixHQUF6QixFQUE4QjtBQUMxQixNQUFJLEtBQUtBLEdBQUwsQ0FBSixFQUFlLENBRWQ7QUFDSiIsImZpbGUiOiIuLi8uLi9Db0NyZWF0ZUpTL3NyYy9pbmRleC5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb0NyZWF0ZVNvY2tldCBmcm9tIFwiLi9zb2NrZXQuanNcIlxuaW1wb3J0IENSVUQgZnJvbSBcIi4vY3J1ZC5qc1wiXG5pbXBvcnQgQ29yZSBmcm9tIFwiLi9jb3JlLmpzXCJcbmltcG9ydCB1dGlscyBmcm9tIFwiLi91dGlscy5qc1wiXG5pbXBvcnQgTWVzc2FnZSBmcm9tIFwiLi9tZXNzYWdlLmpzXCJcblxuLy8gaW1wb3J0IENSRFQgZnJvbSBcIi4vY3JkdC5qc1wiXG5sZXQgc29ja2V0ID0gbmV3IENvQ3JlYXRlU29ja2V0KCd3cycpO1xubGV0IHNvY2tldEFwaSA9IG5ldyBDb0NyZWF0ZVNvY2tldCgnYXBpJyk7XG5cbmxldCBjb3JlID0gQ29yZShzb2NrZXQpXG5sZXQgY3J1ZCA9IENSVUQoc29ja2V0KVxubGV0IG1lc3NhZ2UgPSBNZXNzYWdlKHNvY2tldClcblxuY29yZS5pbml0KHdpbmRvdy5jb25maWcuaG9zdCA/IHdpbmRvdy5jb25maWcuaG9zdCA6ICdzZXJ2ZXIuY29jcmVhdGUuYXBwJyk7XG5cbmZ1bmN0aW9uIGFkZENvbXBvbmVudChrZXksIGNvbXBvbmVudCkge1xuICAgIHRoaXNba2V5XSA9IGNvbXBvbmVudDtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ29tcG9uZW50KGtleSkge1xuICAgIGlmICh0aGlzW2tleV0pIHtcblxuICAgIH1cbn1cblxuZXhwb3J0IHtcbiAgICBjb3JlLFxuICAgIHNvY2tldCxcbiAgICBzb2NrZXRBcGksXG4gICAgY3J1ZCxcbiAgICB1dGlscyxcbiAgICBtZXNzYWdlLFxuICAgIGFkZENvbXBvbmVudCxcbiAgICByZW1vdmVDb21wb25lbnRcbn07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/index.js\n')},"../../CoCreateJS/src/message.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = Message;\n\nvar _commonFun = __webpack_require__(/*! ./common-fun.js */ \"../../CoCreateJS/src/common-fun.js\");\n\nconst CoCreateMessage = {\n  socket: null,\n  setSocket: function (socket) {\n    this.socket = socket;\n  },\n\n  /*\n  CoCreate.message.send({\n     namespace: '',\n     room: '',\n     broadcast: true/false,\n     broadcast_sender: true/false\n     \n     rooms: [r1, r2],\n     emit: {\n       message': 'nice game',\n       data': 'let's play a game ....'\n     }\n   })\n  */\n  send: function (data) {\n    let request_data = (0, _commonFun.getCommonParams)();\n\n    if (!data || !data.emit) {\n      return;\n    }\n\n    request_data = { ...request_data,\n      ...data\n    };\n    /** socket parameters **/\n    // if (data['broadcast'] === undefined) {\n    //   request_data['broadcast'] = true;\n    // }\n    // if (data['broadcast_sender'] === undefined) {\n    //   request_data['broadcast_sender'] = true;\n    // }\n\n    const room = (0, _commonFun.generateSocketClient)(data.namespace, data.room);\n    this.socket.send('sendMessage', request_data, room);\n  },\n  receive: function (message, fun) {\n    this.socket.listen(message, fun);\n  }\n};\n\nfunction Message(socket) {\n  CoCreateMessage.setSocket(socket);\n  return CoCreateMessage;\n}\n\n;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Db0NyZWF0ZS5zdHJpcGUvLi4vQ29DcmVhdGVKUy9zcmMvbWVzc2FnZS5qcz83ODQyIl0sIm5hbWVzIjpbIkNvQ3JlYXRlTWVzc2FnZSIsInNvY2tldCIsInNldFNvY2tldCIsInNlbmQiLCJkYXRhIiwicmVxdWVzdF9kYXRhIiwiZW1pdCIsInJvb20iLCJuYW1lc3BhY2UiLCJyZWNlaXZlIiwibWVzc2FnZSIsImZ1biIsImxpc3RlbiIsIk1lc3NhZ2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBQTs7QUFFQSxNQUFNQSxlQUFlLEdBQUc7QUFDdEJDLFFBQU0sRUFBRSxJQURjO0FBRXRCQyxXQUFTLEVBQUUsVUFBU0QsTUFBVCxFQUFpQjtBQUMxQixTQUFLQSxNQUFMLEdBQWNBLE1BQWQ7QUFDRCxHQUpxQjs7QUFLdkI7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNDRSxNQUFJLEVBQUUsVUFBU0MsSUFBVCxFQUFlO0FBQ2xCLFFBQUlDLFlBQVksR0FBRyxpQ0FBbkI7O0FBRUEsUUFBSSxDQUFDRCxJQUFELElBQVMsQ0FBQ0EsSUFBSSxDQUFDRSxJQUFuQixFQUF5QjtBQUN2QjtBQUNEOztBQUNERCxnQkFBWSxHQUFHLEVBQUMsR0FBR0EsWUFBSjtBQUFrQixTQUFHRDtBQUFyQixLQUFmO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsVUFBTUcsSUFBSSxHQUFHLHFDQUFxQkgsSUFBSSxDQUFDSSxTQUExQixFQUFxQ0osSUFBSSxDQUFDRyxJQUExQyxDQUFiO0FBRUEsU0FBS04sTUFBTCxDQUFZRSxJQUFaLENBQWlCLGFBQWpCLEVBQWdDRSxZQUFoQyxFQUE4Q0UsSUFBOUM7QUFDRixHQXJDc0I7QUF1Q3ZCRSxTQUFPLEVBQUUsVUFBU0MsT0FBVCxFQUFrQkMsR0FBbEIsRUFBdUI7QUFDOUIsU0FBS1YsTUFBTCxDQUFZVyxNQUFaLENBQW1CRixPQUFuQixFQUE0QkMsR0FBNUI7QUFDRDtBQXpDc0IsQ0FBeEI7O0FBNENlLFNBQVNFLE9BQVQsQ0FBaUJaLE1BQWpCLEVBQXlCO0FBQ3RDRCxpQkFBZSxDQUFDRSxTQUFoQixDQUEwQkQsTUFBMUI7QUFDQSxTQUFPRCxlQUFQO0FBQ0Q7O0FBQUEiLCJmaWxlIjoiLi4vLi4vQ29DcmVhdGVKUy9zcmMvbWVzc2FnZS5qcy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Z2V0Q29tbW9uUGFyYW1zLCBnZXRDb21tb25QYXJhbXNFeHRlbmQsIGdlbmVyYXRlU29ja2V0Q2xpZW50fSBmcm9tIFwiLi9jb21tb24tZnVuLmpzXCJcblxuY29uc3QgQ29DcmVhdGVNZXNzYWdlID0ge1xuICBzb2NrZXQ6IG51bGwsXG4gIHNldFNvY2tldDogZnVuY3Rpb24oc29ja2V0KSB7XG4gICAgdGhpcy5zb2NrZXQgPSBzb2NrZXQ7XG4gIH0sXG4gLypcbiBDb0NyZWF0ZS5tZXNzYWdlLnNlbmQoe1xuICAgIG5hbWVzcGFjZTogJycsXG4gICAgcm9vbTogJycsXG4gICAgYnJvYWRjYXN0OiB0cnVlL2ZhbHNlLFxuICAgIGJyb2FkY2FzdF9zZW5kZXI6IHRydWUvZmFsc2VcbiAgICBcbiAgICByb29tczogW3IxLCByMl0sXG4gICAgZW1pdDoge1xuICAgICAgbWVzc2FnZSc6ICduaWNlIGdhbWUnLFxuICAgICAgZGF0YSc6ICdsZXQncyBwbGF5IGEgZ2FtZSAuLi4uJ1xuICAgIH1cbiAgfSlcbiAqL1xuIHNlbmQ6IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBsZXQgcmVxdWVzdF9kYXRhID0gZ2V0Q29tbW9uUGFyYW1zKCk7XG4gICAgXG4gICAgaWYgKCFkYXRhIHx8ICFkYXRhLmVtaXQpIHtcbiAgICAgIHJldHVybjsgICAgIFxuICAgIH1cbiAgICByZXF1ZXN0X2RhdGEgPSB7Li4ucmVxdWVzdF9kYXRhLCAuLi5kYXRhfVxuICAgIFxuICAgIC8qKiBzb2NrZXQgcGFyYW1ldGVycyAqKi9cbiAgICAvLyBpZiAoZGF0YVsnYnJvYWRjYXN0J10gPT09IHVuZGVmaW5lZCkge1xuICAgIC8vICAgcmVxdWVzdF9kYXRhWydicm9hZGNhc3QnXSA9IHRydWU7XG4gICAgLy8gfVxuICAgIC8vIGlmIChkYXRhWydicm9hZGNhc3Rfc2VuZGVyJ10gPT09IHVuZGVmaW5lZCkge1xuICAgIC8vICAgcmVxdWVzdF9kYXRhWydicm9hZGNhc3Rfc2VuZGVyJ10gPSB0cnVlO1xuICAgIC8vIH1cbiAgICBjb25zdCByb29tID0gZ2VuZXJhdGVTb2NrZXRDbGllbnQoZGF0YS5uYW1lc3BhY2UsIGRhdGEucm9vbSk7XG4gICAgXG4gICAgdGhpcy5zb2NrZXQuc2VuZCgnc2VuZE1lc3NhZ2UnLCByZXF1ZXN0X2RhdGEsIHJvb20pXG4gfSxcbiBcbiByZWNlaXZlOiBmdW5jdGlvbihtZXNzYWdlLCBmdW4pIHtcbiAgIHRoaXMuc29ja2V0Lmxpc3RlbihtZXNzYWdlLCBmdW4pO1xuIH0sXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1lc3NhZ2Uoc29ja2V0KSB7XG4gIENvQ3JlYXRlTWVzc2FnZS5zZXRTb2NrZXQoc29ja2V0KVxuICByZXR1cm4gQ29DcmVhdGVNZXNzYWdlO1xufTtcblxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/message.js\n")},"../../CoCreateJS/src/socket.js":(__unused_webpack_module,exports)=>{eval("\n\nObject.defineProperty(exports, \"__esModule\", ({\n  value: true\n}));\nexports.default = void 0;\n\nclass CoCreateSocket {\n  constructor(prefix = \"crud\") {\n    this.prefix = prefix || \"crud\";\n    this.sockets = new Map();\n    this.listeners = new Map();\n    this.messageQueue = new Map();\n    this.saveFileName = '';\n    this.globalScope = \"\";\n  }\n\n  setGlobalScope(scope) {\n    this.globalScope = `${this.prefix}/${scope}`;\n  }\n\n  getGlobalScope() {\n    return this.globalScope;\n  }\n  /**\n   * config: {namespace, room, host}\n   */\n\n\n  create(config) {\n    const {\n      namespace,\n      room\n    } = config;\n    const key = this.getKey(namespace, room);\n\n    let _this = this;\n\n    let socket;\n\n    if (this.sockets.get(key)) {\n      socket = this.sockets.get(key);\n      console.log('SOcket already has been register');\n      return;\n    }\n\n    let w_protocol = window.location.protocol;\n\n    if (window.location.protocol === \"about:\") {\n      w_protocol = window.parent.location.protocol;\n    }\n\n    let protocol = w_protocol === 'http:' ? 'ws' : 'wss';\n    const port = config.port ? config.port : 8088;\n    let socket_url = `${protocol}://${window.location.host}:${port}/${key}`;\n\n    if (config.host) {\n      if (config.host.includes(\"://\")) {\n        socket_url = `${config.host}/${key}`;\n      } else {\n        socket_url = `${protocol}://${config.host}:${port}/${key}`;\n      }\n    }\n\n    socket = new WebSocket(socket_url);\n\n    socket.onopen = function (event) {\n      console.log('created socket: ' + key);\n      const messages = _this.messageQueue.get(key) || [];\n      console.log(messages);\n      messages.forEach(msg => socket.send(JSON.stringify(msg)));\n\n      _this.sockets.set(key, socket);\n\n      _this.messageQueue.set(key, []);\n    };\n\n    socket.onclose = function (event) {\n      switch (event.code) {\n        case 1000:\n          // close normal\n          console.log(\"websocket: closed\");\n          break;\n\n        default:\n          _this.destroy(socket, key);\n\n          _this.reconnect(socket, config);\n\n          break;\n      }\n    };\n\n    socket.onerror = function (err) {\n      console.log('Socket error');\n\n      _this.destroy(socket, key);\n\n      _this.reconnect(socket, config);\n    };\n\n    socket.onmessage = function (data) {\n      try {\n        if (data.data instanceof Blob) {\n          _this.saveFile(data.data);\n\n          return;\n        }\n\n        let rev_data = JSON.parse(data.data);\n\n        const listeners = _this.listeners.get(rev_data.action);\n\n        if (!listeners) {\n          return;\n        }\n\n        listeners.forEach(listener => {\n          listener(rev_data.data, key);\n        });\n      } catch (e) {\n        console.log(e);\n      }\n    };\n  }\n  /**\n   * \n   */\n\n\n  send(action, data, room) {\n    const obj = {\n      action: action,\n      data: data\n    };\n    const key = this.getKeyByRoom(room);\n    const socket = this.getByRoom(room);\n\n    if (socket) {\n      socket.send(JSON.stringify(obj));\n    } else {\n      if (this.messageQueue.get(key)) {\n        this.messageQueue.get(key).push(obj);\n      } else {\n        this.messageQueue.set(key, [obj]);\n      }\n    }\n  }\n\n  sendFile(file, room) {\n    const socket = this.getByRoom(room);\n\n    if (socket) {\n      socket.send(file);\n    }\n  }\n  /**\n   * scope: ns/room\n   */\n\n\n  listen(type, callback) {\n    if (!this.listeners.get(type)) {\n      this.listeners.set(type, [callback]);\n    } else {\n      this.listeners.get(type).push(callback);\n    }\n  }\n\n  reconnect(socket, config) {\n    let _this = this;\n\n    setTimeout(function () {\n      _this.create(config);\n    }, 1000);\n  }\n\n  destroy(socket, key) {\n    if (socket) {\n      socket.onerror = socket.onopen = socket.onclose = null;\n      socket.close();\n      socket = null;\n    }\n\n    if (this.sockets.get(key)) {\n      this.sockets.delete(key);\n    }\n  }\n\n  getKey(namespace, room) {\n    let key = `${this.prefix}`;\n\n    if (namespace && namespace != '') {\n      if (room && room != '') {\n        key += `/${namespace}/${room}`;\n      } else {\n        key += `/${namespace}`;\n      }\n    }\n\n    return key;\n  }\n\n  getByRoom(room) {\n    let key = this.getKeyByRoom(room);\n    return this.sockets.get(key);\n  }\n\n  getKeyByRoom(room) {\n    let key = this.globalScope;\n\n    if (room) {\n      key = `${this.prefix}/${room}`;\n    }\n\n    return key;\n  }\n\n  saveFile(blob) {\n    // const {filename} = window.saveFileInfo;\n    const file_name = this.saveFileName || 'downloadFile';\n    var a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style = \"display: none\";\n    let url = window.URL.createObjectURL(blob);\n    a.href = url;\n    a.download = file_name;\n    a.click();\n    window.URL.revokeObjectURL(url);\n    this.saveFileName = '';\n  }\n\n}\n\nvar _default = CoCreateSocket;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/socket.js\n")},"../../CoCreateJS/src/utils.js":(__unused_webpack_module,exports)=>{eval('\n\nObject.defineProperty(exports, "__esModule", ({\n  value: true\n}));\nexports.default = void 0;\n\n/**\n * Created by jin\n * 2020-04-03\n */\nconst CoCreateUtils = {\n  generateUUID: function (length = 36) {\n    // if (length == 10) {\n    //   var result           = \'\';\n    //   var characters       = \'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\';\n    //   var charactersLength = characters.length;\n    //   for ( var i = 0; i < length; i++ ) {\n    //     result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    //   }\n    //   var dd = new Date().toTimeString();\n    //   var random = dd.replace(/[\\W_]+/g, "").substr(0,6);\n    //   result += random;\n    //   return result;\n    // }\n    let d = new Date().getTime();\n    let d2 = window.performance && window.performance.now && window.performance.now() * 1000 || 0;\n    let pattern = "uxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx";\n\n    if (length <= pattern.length) {\n      pattern = pattern.substr(0, length);\n    } else {\n      let add_len = length - pattern.length;\n      let sub_pattern = "-xxxyyxxx";\n      let group_n = Math.floor(add_len / sub_pattern.length);\n\n      for (let i = 0; i < group_n; i++) {\n        pattern += sub_pattern;\n      }\n\n      group_n = add_len - group_n * sub_pattern.length;\n      pattern += sub_pattern.substr(0, group_n);\n    }\n\n    let uuid = pattern.replace(/[xy]/g, function (c) {\n      var r = Math.random() * 16;\n\n      if (d > 0) {\n        var r = (d + r) % 16 | 0;\n        d = Math.floor(d / 16);\n      } else {\n        var r = (d2 + r) % 16 | 0;\n        d2 = Math.floor(d2 / 16);\n      }\n\n      return (c == "x" ? r : r & 0x7 | 0x8).toString(16);\n    });\n    return uuid;\n  },\n  isRealTime: function (element, parent_realTime) {\n    let realtime = element.getAttribute("data-realtime") || parent_realTime;\n\n    if (realtime === "false") {\n      return false;\n    }\n\n    return true;\n  },\n  getParentFromElement: function (element, parent_class, attributes) {\n    if (parent_class) {\n      if (element.classList.contains(parent_class)) {\n        return element;\n      }\n\n      let node = element.parentNode;\n\n      while (node != null && node.classList) {\n        if (node.classList.contains(parent_class)) {\n          return node;\n        }\n\n        node = node.parentNode;\n      }\n    } else if (attributes) {\n      if (attributes.every(attr => element.attributes.hasOwnProperty(attr))) {\n        return element;\n      }\n\n      let node = element.parentNode;\n\n      while (node != null && node.attributes) {\n        if (attributes.every(attr => node.attributes.hasOwnProperty(attr))) {\n          return node;\n        }\n\n        node = node.parentNode;\n      }\n    }\n\n    return false;\n  },\n  isReadValue: function (element) {\n    return element.getAttribute("data-read_value") != "false";\n  },\n  isUpdateValue: function (element) {\n    return element.getAttribute("data-update_value") != "false";\n  },\n  isJsonString: function (str_data) {\n    try {\n      let json_data = JSON.parse(str_data);\n\n      if (typeof json_data === "object" && json_data != null) {\n        return true;\n      } else {\n        return false;\n      }\n    } catch (e) {\n      return false;\n    }\n  },\n  getAttributes: function (element) {\n    return element.getAttributeNames().reduce((attrMap, name) => {\n      attrMap[name] = element.getAttribute(name);\n      return attrMap;\n    }, {});\n  },\n  checkValue: function (value) {\n    if (!value) return false;\n\n    if (/{{\\s*([\\w\\W]+)\\s*}}/g.test(value)) {\n      return false;\n    }\n\n    return true;\n  },\n  // hosseins utills\n  // function to go through all frames\n  allFrame: function allFrame(callback) {\n    let allFrames = [{\n      document,\n      window\n    }];\n\n    for (let frame of document.querySelectorAll("iframe")) {\n      let frameDocument = frame.contentDocument || frame.contentWindow.document;\n      let frameWindow = frame.contentWindow;\n      allFrames.push({\n        document: frameDocument,\n        window: frameWindow,\n        frameElement: frame\n      });\n    }\n\n    let result = new Set();\n\n    for (let frame of allFrames) {\n      let callbackResult = callback(frame);\n      if (callbackResult && typeof callbackResult[Symbol.iterator] === "function") callbackResult.forEach(el => result.add(el));else if (callbackResult) result.add(callbackResult);\n    }\n\n    return Array.from(result);\n  },\n  cssPath: function cssPath(node) {\n    let pathSplits = [];\n\n    do {\n      if (!node || !node.tagName) return false;\n      let pathSplit = node.tagName.toLowerCase();\n      if (node.id && node.tagName !== "BODY") pathSplit += "#" + node.id;\n\n      if (node.classList.length && node.tagName !== "BODY") {\n        node.classList.forEach(item => {\n          if (item.indexOf(":") === -1) pathSplit += "." + item;\n        });\n      }\n\n      if (node.tagName !== "BODY" && node.parentNode) {\n        let index = Array.prototype.indexOf.call(node.parentNode.children, node);\n        pathSplit += `:nth-child(${index + 1})`;\n      }\n\n      pathSplits.unshift(pathSplit);\n      node = node.parentNode;\n    } while (node.tagName !== "HTML");\n\n    return pathSplits.join(" > ");\n  },\n  getTopMostWindow: function getTopMostWindow() {\n    let parentWindow = window;\n\n    while (parentWindow !== window.parent) parentWindow = window.parent;\n\n    return parentWindow;\n  },\n  findIframeFromElement: (windowObject, element) => {\n    let frameElement;\n    CoCreate.utils.allFrame(frame => {\n      if (frame.document.contains(element)) frameElement = frame.frameElement; // window.cc.findIframeFromElement(frame.window, element);\n    });\n    return frameElement;\n  },\n  getIframeFromPath: function getIframeFromPath(path) {\n    let topWindow = CoCreate.utils.getTopMostWindow;\n    path.forEach(selector => {\n      if (topWindow) topWindow = topWindow.querySelector(selector);\n    });\n    return topWindow;\n  },\n  // DO NOT REMOVE\n  // configMatch: function* configMatch(elementConfig, element) {\n  //   for (let config of elementConfig) {\n  //     // if (!Array.isArray(config.selector))\n  //     //   config.selector = [config.selector];\n  //     if (config.selector && element.matches(config.selector)) yield config;\n  //   }\n  //   return;\n  // },\n  configMatch2: function configMatch(elementConfig, element) {\n    let result = [];\n\n    for (let config of elementConfig) {\n      if (config.selector && element.matches(config.selector)) result.push(config);\n    }\n\n    return result;\n  },\n  // DO NOT REMOVE\n  // an opiniated function uses configMatch2 to read configs\n  // WARNING: the config iterated from top to bottom. for deseired effect elementConfig should be reveresed\n  // typeof elementConfig: array of objects and every objects containing keys as false, true or a selector \n  // element: the element to read attributes\n  // key: the key in which is in elementConfig and on match onSuccess callback will be called\n  configExecuter: function configExecuter(element, key, onSuccess, elementConfig) {\n    for (let config of CoCreate.utils.configMatch2(elementConfig || window.elementConfig, element)) if (config[key] === true) return onSuccess(element, config);else if (config[key] === false) return false;else if (config[key] === undefined) continue;else if (CoCreate.utils.isValidSelector(config[key])) return onSuccess(element, config, true);else console.warn("builder: wrong element config ", config);\n\n    return false;\n  },\n  UUID: function UUID(length = 10) {\n    var result = "";\n    var characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";\n    var charactersLength = characters.length;\n\n    for (var i = 0; i < length; i++) {\n      result += characters.charAt(Math.floor(Math.random() * charactersLength));\n    }\n\n    var d = new Date().toTimeString();\n    var random = d.replace(/[\\W_]+/g, "").substr(0, 6);\n    result += random;\n    return result;\n  },\n  parseTextToHtml: function parse(text) {\n    let doc = new DOMParser().parseFromString(text, "text/html");\n    if (doc.head.children[0]) return doc.head.children[0];else return doc.body.children[0];\n  },\n  splitBydelimiter: function parse(str, delimiter) {\n    return str.split(delimiter).map(s => s.trim());\n  },\n  joinBydelimiter: function parse(str, delimiter) {\n    return str.map(s => s.trim()).join(delimiter);\n  },\n  isValidSelector: selector => {\n    try {\n      document.createDocumentFragment().querySelector(selector);\n    } catch (error) {\n      return false;\n    }\n\n    return true;\n  },\n  getElementPath: function getElementPath(element, returnContext) {\n    let path = [];\n    let topWindow = window;\n    let iframeElement = CoCreate.utils.findIframeFromElement(topWindow, element);\n    let p = CoCreate.utils.cssPath(iframeElement);\n    if (p) path.unshift(p);\n    return returnContext ? {\n      path,\n      document: iframeElement || document\n    } : path; //todo: support for nested iframe\n    // while(iframeElement !== findIframeFromElement(topWindow,iframeElement))\n    // {\n    //   iframeElement = findIframeFromElement(topWindow,iframeElement);\n    //   path.unshift(cssPath(iframeElement))\n    // }\n  },\n  isUsageY: function isUsageY(input) {\n    if (this.isJsonString(input.getAttribute(\'data-collection\'))) {\n      return false;\n    }\n\n    if (this.isJsonString(input.getAttribute(\'name\'))) {\n      return false;\n    }\n\n    if (input.tagName === "INPUT" && ["text", "email", "tel", "url"].includes(input.type) || input.tagName === "TEXTAREA") {\n      if (!input.getAttribute(\'name\')) {\n        return false;\n      }\n\n      if (input.getAttribute("data-realtime") == "false") {\n        return false;\n      }\n\n      if (input.getAttribute("data-unique") === "true") {\n        return false;\n      }\n\n      if (input.type === \'password\') {\n        return false;\n      }\n\n      if (!this.isReadValue(input)) {\n        return false;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n};\nvar _default = CoCreateUtils;\nexports.default = _default;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../../CoCreateJS/src/utils.js\n')}},__webpack_module_cache__={};function __webpack_require__(Q){var F=__webpack_module_cache__[Q];if(void 0!==F)return F.exports;var B=__webpack_module_cache__[Q]={exports:{}};return __webpack_modules__[Q](B,B.exports,__webpack_require__),B.exports}var __webpack_exports__=__webpack_require__("./src/index.js");return __webpack_exports__=__webpack_exports__.default,__webpack_exports__})()}));